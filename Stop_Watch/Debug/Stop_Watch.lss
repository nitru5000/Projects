
Stop_Watch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000035da  0000366e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800078  00800078  00003686  2**0
                  ALLOC
  3 .stab         00003270  00000000  00000000  00003688  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001359  00000000  00000000  000068f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007c51  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007f01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000aa35  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b7e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b944  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bbd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c39f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__vector_1>
       8:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <__vector_2>
       c:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__vector_10>
      2c:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <main>
      8a:	0c 94 eb 1a 	jmp	0x35d6	; 0x35d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b4 1a 	jmp	0x3568	; 0x3568 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d0 1a 	jmp	0x35a0	; 0x35a0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b4 1a 	jmp	0x3568	; 0x3568 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d0 1a 	jmp	0x35a0	; 0x35a0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c4 1a 	jmp	0x3588	; 0x3588 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_VoidInit>:
#include "ADC_Interface.h"

void ADC_VoidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

/************   prescaler        ****************************/
	ADCSRA &= ADC_PRE_MASK;
     b4e:	a6 e2       	ldi	r26, 0x26	; 38
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e6 e2       	ldi	r30, 0x26	; 38
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 7f       	andi	r24, 0xF8	; 248
     b5a:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESCALER;
     b5c:	a6 e2       	ldi	r26, 0x26	; 38
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e6 e2       	ldi	r30, 0x26	; 38
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	86 60       	ori	r24, 0x06	; 6
     b68:	8c 93       	st	X, r24
/************ Voltage refrence ****************************/
#if          ADC_Vref  ==    AREF
	         CLR_BIT(ADMUX,REFS0);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7b       	andi	r24, 0xBF	; 191
     b76:	8c 93       	st	X, r24
	         CLR_BIT(ADMUX,REFS1);
     b78:	a7 e2       	ldi	r26, 0x27	; 39
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e7 e2       	ldi	r30, 0x27	; 39
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 77       	andi	r24, 0x7F	; 127
     b84:	8c 93       	st	X, r24
	         SET_BIT(ADMUX,REFS1);
#endif

/************ ADC MODE ****************************/
#if          ADC_MODE ==  ADC_SINGLE_CONVERSION
	         CLR_BIT(ADCSRA,ADATE);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8f 7d       	andi	r24, 0xDF	; 223
     b92:	8c 93       	st	X, r24
	         SIT_BIT(ADCSRA,ADATE);
	         ADCSRA &= ADC_MODE_MASK ;
	         ADCSRA |= ADC_AUTO_TRIGGER_SOURCE;
#endif
/************ ADC Enable ****************************/
	         SET_BIT(ADCSRA,ADEN);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 68       	ori	r24, 0x80	; 128
     ba0:	8c 93       	st	X, r24
}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <DIO_SetPotDirection>:
#include "DIO_Interface.h"


void DIO_SetPotDirection (DIO_Port PORT , DIO_Direction DIRECTION)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	00 d0       	rcall	.+0      	; 0xbae <DIO_SetPotDirection+0x6>
     bae:	00 d0       	rcall	.+0      	; 0xbb0 <DIO_SetPotDirection+0x8>
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <DIO_SetPotDirection+0xa>
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	89 83       	std	Y+1, r24	; 0x01
     bb8:	6a 83       	std	Y+2, r22	; 0x02
  if (OUTPUT == DIRECTION)
     bba:	8a 81       	ldd	r24, Y+2	; 0x02
     bbc:	81 30       	cpi	r24, 0x01	; 1
     bbe:	99 f5       	brne	.+102    	; 0xc26 <DIO_SetPotDirection+0x7e>
  {
	  switch (PORT)
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	3e 83       	std	Y+6, r19	; 0x06
     bc8:	2d 83       	std	Y+5, r18	; 0x05
     bca:	8d 81       	ldd	r24, Y+5	; 0x05
     bcc:	9e 81       	ldd	r25, Y+6	; 0x06
     bce:	81 30       	cpi	r24, 0x01	; 1
     bd0:	91 05       	cpc	r25, r1
     bd2:	d1 f0       	breq	.+52     	; 0xc08 <DIO_SetPotDirection+0x60>
     bd4:	2d 81       	ldd	r18, Y+5	; 0x05
     bd6:	3e 81       	ldd	r19, Y+6	; 0x06
     bd8:	22 30       	cpi	r18, 0x02	; 2
     bda:	31 05       	cpc	r19, r1
     bdc:	2c f4       	brge	.+10     	; 0xbe8 <DIO_SetPotDirection+0x40>
     bde:	8d 81       	ldd	r24, Y+5	; 0x05
     be0:	9e 81       	ldd	r25, Y+6	; 0x06
     be2:	00 97       	sbiw	r24, 0x00	; 0
     be4:	61 f0       	breq	.+24     	; 0xbfe <DIO_SetPotDirection+0x56>
     be6:	50 c0       	rjmp	.+160    	; 0xc88 <DIO_SetPotDirection+0xe0>
     be8:	2d 81       	ldd	r18, Y+5	; 0x05
     bea:	3e 81       	ldd	r19, Y+6	; 0x06
     bec:	22 30       	cpi	r18, 0x02	; 2
     bee:	31 05       	cpc	r19, r1
     bf0:	81 f0       	breq	.+32     	; 0xc12 <DIO_SetPotDirection+0x6a>
     bf2:	8d 81       	ldd	r24, Y+5	; 0x05
     bf4:	9e 81       	ldd	r25, Y+6	; 0x06
     bf6:	83 30       	cpi	r24, 0x03	; 3
     bf8:	91 05       	cpc	r25, r1
     bfa:	81 f0       	breq	.+32     	; 0xc1c <DIO_SetPotDirection+0x74>
     bfc:	45 c0       	rjmp	.+138    	; 0xc88 <DIO_SetPotDirection+0xe0>
	  {
	  case PORTA : DDRA = 0xFF;break;
     bfe:	ea e3       	ldi	r30, 0x3A	; 58
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	8f ef       	ldi	r24, 0xFF	; 255
     c04:	80 83       	st	Z, r24
     c06:	40 c0       	rjmp	.+128    	; 0xc88 <DIO_SetPotDirection+0xe0>
	  case PORTB : DDRB = 0xFF;break;
     c08:	e7 e3       	ldi	r30, 0x37	; 55
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	8f ef       	ldi	r24, 0xFF	; 255
     c0e:	80 83       	st	Z, r24
     c10:	3b c0       	rjmp	.+118    	; 0xc88 <DIO_SetPotDirection+0xe0>
	  case PORTC : DDRC = 0xFF;break;
     c12:	e4 e3       	ldi	r30, 0x34	; 52
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	8f ef       	ldi	r24, 0xFF	; 255
     c18:	80 83       	st	Z, r24
     c1a:	36 c0       	rjmp	.+108    	; 0xc88 <DIO_SetPotDirection+0xe0>
	  case PORTD : DDRD = 0xFF;break;
     c1c:	e1 e3       	ldi	r30, 0x31	; 49
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	8f ef       	ldi	r24, 0xFF	; 255
     c22:	80 83       	st	Z, r24
     c24:	31 c0       	rjmp	.+98     	; 0xc88 <DIO_SetPotDirection+0xe0>
	  }
  }

  else if (INPUT == DIRECTION)
     c26:	8a 81       	ldd	r24, Y+2	; 0x02
     c28:	88 23       	and	r24, r24
     c2a:	71 f5       	brne	.+92     	; 0xc88 <DIO_SetPotDirection+0xe0>
  {
	  switch (PORT)
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	28 2f       	mov	r18, r24
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	3c 83       	std	Y+4, r19	; 0x04
     c34:	2b 83       	std	Y+3, r18	; 0x03
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	9c 81       	ldd	r25, Y+4	; 0x04
     c3a:	81 30       	cpi	r24, 0x01	; 1
     c3c:	91 05       	cpc	r25, r1
     c3e:	c9 f0       	breq	.+50     	; 0xc72 <DIO_SetPotDirection+0xca>
     c40:	2b 81       	ldd	r18, Y+3	; 0x03
     c42:	3c 81       	ldd	r19, Y+4	; 0x04
     c44:	22 30       	cpi	r18, 0x02	; 2
     c46:	31 05       	cpc	r19, r1
     c48:	2c f4       	brge	.+10     	; 0xc54 <DIO_SetPotDirection+0xac>
     c4a:	8b 81       	ldd	r24, Y+3	; 0x03
     c4c:	9c 81       	ldd	r25, Y+4	; 0x04
     c4e:	00 97       	sbiw	r24, 0x00	; 0
     c50:	61 f0       	breq	.+24     	; 0xc6a <DIO_SetPotDirection+0xc2>
     c52:	1a c0       	rjmp	.+52     	; 0xc88 <DIO_SetPotDirection+0xe0>
     c54:	2b 81       	ldd	r18, Y+3	; 0x03
     c56:	3c 81       	ldd	r19, Y+4	; 0x04
     c58:	22 30       	cpi	r18, 0x02	; 2
     c5a:	31 05       	cpc	r19, r1
     c5c:	71 f0       	breq	.+28     	; 0xc7a <DIO_SetPotDirection+0xd2>
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	9c 81       	ldd	r25, Y+4	; 0x04
     c62:	83 30       	cpi	r24, 0x03	; 3
     c64:	91 05       	cpc	r25, r1
     c66:	69 f0       	breq	.+26     	; 0xc82 <DIO_SetPotDirection+0xda>
     c68:	0f c0       	rjmp	.+30     	; 0xc88 <DIO_SetPotDirection+0xe0>
	  {
	  case PORTA : DDRA = 0x00;break;
     c6a:	ea e3       	ldi	r30, 0x3A	; 58
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	10 82       	st	Z, r1
     c70:	0b c0       	rjmp	.+22     	; 0xc88 <DIO_SetPotDirection+0xe0>
	  case PORTB : DDRB = 0x00;break;
     c72:	e7 e3       	ldi	r30, 0x37	; 55
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	10 82       	st	Z, r1
     c78:	07 c0       	rjmp	.+14     	; 0xc88 <DIO_SetPotDirection+0xe0>
	  case PORTC : DDRC = 0x00;break;
     c7a:	e4 e3       	ldi	r30, 0x34	; 52
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	10 82       	st	Z, r1
     c80:	03 c0       	rjmp	.+6      	; 0xc88 <DIO_SetPotDirection+0xe0>
	  case PORTD : DDRD = 0x00;break;
     c82:	e1 e3       	ldi	r30, 0x31	; 49
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	10 82       	st	Z, r1
	  }
  }
}
     c88:	26 96       	adiw	r28, 0x06	; 6
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <DIO_SetPortValue>:

/**********************************************************************************************************/

void DIO_SetPortValue (DIO_Port PORT , u8 Value)
{
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	28 97       	sbiw	r28, 0x08	; 8
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	89 83       	std	Y+1, r24	; 0x01
     cb0:	6a 83       	std	Y+2, r22	; 0x02


	if (HIGH == Value)
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	81 30       	cpi	r24, 0x01	; 1
     cb6:	99 f5       	brne	.+102    	; 0xd1e <DIO_SetPortValue+0x84>
	{
		switch (PORT)
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	38 87       	std	Y+8, r19	; 0x08
     cc0:	2f 83       	std	Y+7, r18	; 0x07
     cc2:	8f 81       	ldd	r24, Y+7	; 0x07
     cc4:	98 85       	ldd	r25, Y+8	; 0x08
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	91 05       	cpc	r25, r1
     cca:	d1 f0       	breq	.+52     	; 0xd00 <DIO_SetPortValue+0x66>
     ccc:	2f 81       	ldd	r18, Y+7	; 0x07
     cce:	38 85       	ldd	r19, Y+8	; 0x08
     cd0:	22 30       	cpi	r18, 0x02	; 2
     cd2:	31 05       	cpc	r19, r1
     cd4:	2c f4       	brge	.+10     	; 0xce0 <DIO_SetPortValue+0x46>
     cd6:	8f 81       	ldd	r24, Y+7	; 0x07
     cd8:	98 85       	ldd	r25, Y+8	; 0x08
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	61 f0       	breq	.+24     	; 0xcf6 <DIO_SetPortValue+0x5c>
     cde:	83 c0       	rjmp	.+262    	; 0xde6 <DIO_SetPortValue+0x14c>
     ce0:	2f 81       	ldd	r18, Y+7	; 0x07
     ce2:	38 85       	ldd	r19, Y+8	; 0x08
     ce4:	22 30       	cpi	r18, 0x02	; 2
     ce6:	31 05       	cpc	r19, r1
     ce8:	81 f0       	breq	.+32     	; 0xd0a <DIO_SetPortValue+0x70>
     cea:	8f 81       	ldd	r24, Y+7	; 0x07
     cec:	98 85       	ldd	r25, Y+8	; 0x08
     cee:	83 30       	cpi	r24, 0x03	; 3
     cf0:	91 05       	cpc	r25, r1
     cf2:	81 f0       	breq	.+32     	; 0xd14 <DIO_SetPortValue+0x7a>
     cf4:	78 c0       	rjmp	.+240    	; 0xde6 <DIO_SetPortValue+0x14c>
		{
		  case PORTA : PORTA_ = 0xFF;break;
     cf6:	eb e3       	ldi	r30, 0x3B	; 59
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	8f ef       	ldi	r24, 0xFF	; 255
     cfc:	80 83       	st	Z, r24
     cfe:	73 c0       	rjmp	.+230    	; 0xde6 <DIO_SetPortValue+0x14c>
		  case PORTB : PORTB_ = 0xFF;break;
     d00:	e8 e3       	ldi	r30, 0x38	; 56
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	8f ef       	ldi	r24, 0xFF	; 255
     d06:	80 83       	st	Z, r24
     d08:	6e c0       	rjmp	.+220    	; 0xde6 <DIO_SetPortValue+0x14c>
		  case PORTC : PORTC_ = 0xFF;break;
     d0a:	e5 e3       	ldi	r30, 0x35	; 53
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	8f ef       	ldi	r24, 0xFF	; 255
     d10:	80 83       	st	Z, r24
     d12:	69 c0       	rjmp	.+210    	; 0xde6 <DIO_SetPortValue+0x14c>
		  case PORTD : PORTD_ = 0xFF;break;
     d14:	e2 e3       	ldi	r30, 0x32	; 50
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	8f ef       	ldi	r24, 0xFF	; 255
     d1a:	80 83       	st	Z, r24
     d1c:	64 c0       	rjmp	.+200    	; 0xde6 <DIO_SetPortValue+0x14c>
		}
	}
	else if (LOW == Value)
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	88 23       	and	r24, r24
     d22:	79 f5       	brne	.+94     	; 0xd82 <DIO_SetPortValue+0xe8>
	{
		switch (PORT)
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	3e 83       	std	Y+6, r19	; 0x06
     d2c:	2d 83       	std	Y+5, r18	; 0x05
     d2e:	8d 81       	ldd	r24, Y+5	; 0x05
     d30:	9e 81       	ldd	r25, Y+6	; 0x06
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	91 05       	cpc	r25, r1
     d36:	c9 f0       	breq	.+50     	; 0xd6a <DIO_SetPortValue+0xd0>
     d38:	2d 81       	ldd	r18, Y+5	; 0x05
     d3a:	3e 81       	ldd	r19, Y+6	; 0x06
     d3c:	22 30       	cpi	r18, 0x02	; 2
     d3e:	31 05       	cpc	r19, r1
     d40:	2c f4       	brge	.+10     	; 0xd4c <DIO_SetPortValue+0xb2>
     d42:	8d 81       	ldd	r24, Y+5	; 0x05
     d44:	9e 81       	ldd	r25, Y+6	; 0x06
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	61 f0       	breq	.+24     	; 0xd62 <DIO_SetPortValue+0xc8>
     d4a:	4d c0       	rjmp	.+154    	; 0xde6 <DIO_SetPortValue+0x14c>
     d4c:	2d 81       	ldd	r18, Y+5	; 0x05
     d4e:	3e 81       	ldd	r19, Y+6	; 0x06
     d50:	22 30       	cpi	r18, 0x02	; 2
     d52:	31 05       	cpc	r19, r1
     d54:	71 f0       	breq	.+28     	; 0xd72 <DIO_SetPortValue+0xd8>
     d56:	8d 81       	ldd	r24, Y+5	; 0x05
     d58:	9e 81       	ldd	r25, Y+6	; 0x06
     d5a:	83 30       	cpi	r24, 0x03	; 3
     d5c:	91 05       	cpc	r25, r1
     d5e:	69 f0       	breq	.+26     	; 0xd7a <DIO_SetPortValue+0xe0>
     d60:	42 c0       	rjmp	.+132    	; 0xde6 <DIO_SetPortValue+0x14c>
		{
		  case PORTA : PORTA_ = 0x00;break;
     d62:	eb e3       	ldi	r30, 0x3B	; 59
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	10 82       	st	Z, r1
     d68:	3e c0       	rjmp	.+124    	; 0xde6 <DIO_SetPortValue+0x14c>
		  case PORTB : PORTB_ = 0x00;break;
     d6a:	e8 e3       	ldi	r30, 0x38	; 56
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	10 82       	st	Z, r1
     d70:	3a c0       	rjmp	.+116    	; 0xde6 <DIO_SetPortValue+0x14c>
		  case PORTC : PORTC_ = 0x00;break;
     d72:	e5 e3       	ldi	r30, 0x35	; 53
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	10 82       	st	Z, r1
     d78:	36 c0       	rjmp	.+108    	; 0xde6 <DIO_SetPortValue+0x14c>
		  case PORTD : PORTD_ = 0x00;break;
     d7a:	e2 e3       	ldi	r30, 0x32	; 50
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	10 82       	st	Z, r1
     d80:	32 c0       	rjmp	.+100    	; 0xde6 <DIO_SetPortValue+0x14c>
		}
	}
	else
	{
		switch (PORT)
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	3c 83       	std	Y+4, r19	; 0x04
     d8a:	2b 83       	std	Y+3, r18	; 0x03
     d8c:	8b 81       	ldd	r24, Y+3	; 0x03
     d8e:	9c 81       	ldd	r25, Y+4	; 0x04
     d90:	81 30       	cpi	r24, 0x01	; 1
     d92:	91 05       	cpc	r25, r1
     d94:	d1 f0       	breq	.+52     	; 0xdca <DIO_SetPortValue+0x130>
     d96:	2b 81       	ldd	r18, Y+3	; 0x03
     d98:	3c 81       	ldd	r19, Y+4	; 0x04
     d9a:	22 30       	cpi	r18, 0x02	; 2
     d9c:	31 05       	cpc	r19, r1
     d9e:	2c f4       	brge	.+10     	; 0xdaa <DIO_SetPortValue+0x110>
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	9c 81       	ldd	r25, Y+4	; 0x04
     da4:	00 97       	sbiw	r24, 0x00	; 0
     da6:	61 f0       	breq	.+24     	; 0xdc0 <DIO_SetPortValue+0x126>
     da8:	1e c0       	rjmp	.+60     	; 0xde6 <DIO_SetPortValue+0x14c>
     daa:	2b 81       	ldd	r18, Y+3	; 0x03
     dac:	3c 81       	ldd	r19, Y+4	; 0x04
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	31 05       	cpc	r19, r1
     db2:	81 f0       	breq	.+32     	; 0xdd4 <DIO_SetPortValue+0x13a>
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	9c 81       	ldd	r25, Y+4	; 0x04
     db8:	83 30       	cpi	r24, 0x03	; 3
     dba:	91 05       	cpc	r25, r1
     dbc:	81 f0       	breq	.+32     	; 0xdde <DIO_SetPortValue+0x144>
     dbe:	13 c0       	rjmp	.+38     	; 0xde6 <DIO_SetPortValue+0x14c>
		{
		  case PORTA : PORTA_ = Value;break;
     dc0:	eb e3       	ldi	r30, 0x3B	; 59
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	80 83       	st	Z, r24
     dc8:	0e c0       	rjmp	.+28     	; 0xde6 <DIO_SetPortValue+0x14c>
		  case PORTB : PORTB_ = Value;break;
     dca:	e8 e3       	ldi	r30, 0x38	; 56
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	80 83       	st	Z, r24
     dd2:	09 c0       	rjmp	.+18     	; 0xde6 <DIO_SetPortValue+0x14c>
		  case PORTC : PORTC_ = Value;break;
     dd4:	e5 e3       	ldi	r30, 0x35	; 53
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	80 83       	st	Z, r24
     ddc:	04 c0       	rjmp	.+8      	; 0xde6 <DIO_SetPortValue+0x14c>
		  case PORTD : PORTD_ = Value;break;
     dde:	e2 e3       	ldi	r30, 0x32	; 50
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	80 83       	st	Z, r24
		}
	}

}
     de6:	28 96       	adiw	r28, 0x08	; 8
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <DIO_SetPinDirection>:

/**********************************************************************************************************/

void DIO_SetPinDirection (DIO_Port PORT , DIO_Pin PIN , DIO_Direction DIRECTION)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	27 97       	sbiw	r28, 0x07	; 7
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	89 83       	std	Y+1, r24	; 0x01
     e0e:	6a 83       	std	Y+2, r22	; 0x02
     e10:	4b 83       	std	Y+3, r20	; 0x03
	  if (OUTPUT == DIRECTION)
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	09 f0       	breq	.+2      	; 0xe1a <DIO_SetPinDirection+0x22>
     e18:	6f c0       	rjmp	.+222    	; 0xef8 <DIO_SetPinDirection+0x100>
	  {
		  switch (PORT)
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	3f 83       	std	Y+7, r19	; 0x07
     e22:	2e 83       	std	Y+6, r18	; 0x06
     e24:	8e 81       	ldd	r24, Y+6	; 0x06
     e26:	9f 81       	ldd	r25, Y+7	; 0x07
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	91 05       	cpc	r25, r1
     e2c:	49 f1       	breq	.+82     	; 0xe80 <DIO_SetPinDirection+0x88>
     e2e:	2e 81       	ldd	r18, Y+6	; 0x06
     e30:	3f 81       	ldd	r19, Y+7	; 0x07
     e32:	22 30       	cpi	r18, 0x02	; 2
     e34:	31 05       	cpc	r19, r1
     e36:	2c f4       	brge	.+10     	; 0xe42 <DIO_SetPinDirection+0x4a>
     e38:	8e 81       	ldd	r24, Y+6	; 0x06
     e3a:	9f 81       	ldd	r25, Y+7	; 0x07
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	61 f0       	breq	.+24     	; 0xe58 <DIO_SetPinDirection+0x60>
     e40:	d2 c0       	rjmp	.+420    	; 0xfe6 <DIO_SetPinDirection+0x1ee>
     e42:	2e 81       	ldd	r18, Y+6	; 0x06
     e44:	3f 81       	ldd	r19, Y+7	; 0x07
     e46:	22 30       	cpi	r18, 0x02	; 2
     e48:	31 05       	cpc	r19, r1
     e4a:	71 f1       	breq	.+92     	; 0xea8 <DIO_SetPinDirection+0xb0>
     e4c:	8e 81       	ldd	r24, Y+6	; 0x06
     e4e:	9f 81       	ldd	r25, Y+7	; 0x07
     e50:	83 30       	cpi	r24, 0x03	; 3
     e52:	91 05       	cpc	r25, r1
     e54:	e9 f1       	breq	.+122    	; 0xed0 <DIO_SetPinDirection+0xd8>
     e56:	c7 c0       	rjmp	.+398    	; 0xfe6 <DIO_SetPinDirection+0x1ee>
		  {
		  case PORTA : SET_BIT(DDRA,PIN);break;
     e58:	aa e3       	ldi	r26, 0x3A	; 58
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	ea e3       	ldi	r30, 0x3A	; 58
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	48 2f       	mov	r20, r24
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	02 2e       	mov	r0, r18
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <DIO_SetPinDirection+0x7e>
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	0a 94       	dec	r0
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <DIO_SetPinDirection+0x7a>
     e7a:	84 2b       	or	r24, r20
     e7c:	8c 93       	st	X, r24
     e7e:	b3 c0       	rjmp	.+358    	; 0xfe6 <DIO_SetPinDirection+0x1ee>
		  case PORTB : SET_BIT(DDRB,PIN);break;
     e80:	a7 e3       	ldi	r26, 0x37	; 55
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e7 e3       	ldi	r30, 0x37	; 55
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	48 2f       	mov	r20, r24
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	02 2e       	mov	r0, r18
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <DIO_SetPinDirection+0xa6>
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	0a 94       	dec	r0
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <DIO_SetPinDirection+0xa2>
     ea2:	84 2b       	or	r24, r20
     ea4:	8c 93       	st	X, r24
     ea6:	9f c0       	rjmp	.+318    	; 0xfe6 <DIO_SetPinDirection+0x1ee>
		  case PORTC : SET_BIT(DDRC,PIN);break;
     ea8:	a4 e3       	ldi	r26, 0x34	; 52
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e4 e3       	ldi	r30, 0x34	; 52
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <DIO_SetPinDirection+0xce>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <DIO_SetPinDirection+0xca>
     eca:	84 2b       	or	r24, r20
     ecc:	8c 93       	st	X, r24
     ece:	8b c0       	rjmp	.+278    	; 0xfe6 <DIO_SetPinDirection+0x1ee>
		  case PORTD : SET_BIT(DDRD,PIN);break;
     ed0:	a1 e3       	ldi	r26, 0x31	; 49
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e1 e3       	ldi	r30, 0x31	; 49
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	48 2f       	mov	r20, r24
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 2e       	mov	r0, r18
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <DIO_SetPinDirection+0xf6>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	0a 94       	dec	r0
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <DIO_SetPinDirection+0xf2>
     ef2:	84 2b       	or	r24, r20
     ef4:	8c 93       	st	X, r24
     ef6:	77 c0       	rjmp	.+238    	; 0xfe6 <DIO_SetPinDirection+0x1ee>
		  }
	  }

	  else if (INPUT == DIRECTION)
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	88 23       	and	r24, r24
     efc:	09 f0       	breq	.+2      	; 0xf00 <DIO_SetPinDirection+0x108>
     efe:	73 c0       	rjmp	.+230    	; 0xfe6 <DIO_SetPinDirection+0x1ee>
	  {
		  switch (PORT)
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	3d 83       	std	Y+5, r19	; 0x05
     f08:	2c 83       	std	Y+4, r18	; 0x04
     f0a:	8c 81       	ldd	r24, Y+4	; 0x04
     f0c:	9d 81       	ldd	r25, Y+5	; 0x05
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	91 05       	cpc	r25, r1
     f12:	59 f1       	breq	.+86     	; 0xf6a <DIO_SetPinDirection+0x172>
     f14:	2c 81       	ldd	r18, Y+4	; 0x04
     f16:	3d 81       	ldd	r19, Y+5	; 0x05
     f18:	22 30       	cpi	r18, 0x02	; 2
     f1a:	31 05       	cpc	r19, r1
     f1c:	2c f4       	brge	.+10     	; 0xf28 <DIO_SetPinDirection+0x130>
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	9d 81       	ldd	r25, Y+5	; 0x05
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	69 f0       	breq	.+26     	; 0xf40 <DIO_SetPinDirection+0x148>
     f26:	5f c0       	rjmp	.+190    	; 0xfe6 <DIO_SetPinDirection+0x1ee>
     f28:	2c 81       	ldd	r18, Y+4	; 0x04
     f2a:	3d 81       	ldd	r19, Y+5	; 0x05
     f2c:	22 30       	cpi	r18, 0x02	; 2
     f2e:	31 05       	cpc	r19, r1
     f30:	89 f1       	breq	.+98     	; 0xf94 <DIO_SetPinDirection+0x19c>
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
     f34:	9d 81       	ldd	r25, Y+5	; 0x05
     f36:	83 30       	cpi	r24, 0x03	; 3
     f38:	91 05       	cpc	r25, r1
     f3a:	09 f4       	brne	.+2      	; 0xf3e <DIO_SetPinDirection+0x146>
     f3c:	40 c0       	rjmp	.+128    	; 0xfbe <DIO_SetPinDirection+0x1c6>
     f3e:	53 c0       	rjmp	.+166    	; 0xfe6 <DIO_SetPinDirection+0x1ee>
		  {
		  case PORTA : CLR_BIT(DDRA,PIN);break;
     f40:	aa e3       	ldi	r26, 0x3A	; 58
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	ea e3       	ldi	r30, 0x3A	; 58
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_SetPinDirection+0x166>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_SetPinDirection+0x162>
     f62:	80 95       	com	r24
     f64:	84 23       	and	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	3e c0       	rjmp	.+124    	; 0xfe6 <DIO_SetPinDirection+0x1ee>
		  case PORTB : CLR_BIT(DDRB,PIN);break;
     f6a:	a7 e3       	ldi	r26, 0x37	; 55
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e7 e3       	ldi	r30, 0x37	; 55
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DIO_SetPinDirection+0x190>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <DIO_SetPinDirection+0x18c>
     f8c:	80 95       	com	r24
     f8e:	84 23       	and	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	29 c0       	rjmp	.+82     	; 0xfe6 <DIO_SetPinDirection+0x1ee>
		  case PORTC : CLR_BIT(DDRC,PIN);break;
     f94:	a4 e3       	ldi	r26, 0x34	; 52
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e4 e3       	ldi	r30, 0x34	; 52
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_SetPinDirection+0x1ba>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_SetPinDirection+0x1b6>
     fb6:	80 95       	com	r24
     fb8:	84 23       	and	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	14 c0       	rjmp	.+40     	; 0xfe6 <DIO_SetPinDirection+0x1ee>
		  case PORTD : CLR_BIT(DDRD,PIN);break;
     fbe:	a1 e3       	ldi	r26, 0x31	; 49
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e1 e3       	ldi	r30, 0x31	; 49
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_SetPinDirection+0x1e4>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_SetPinDirection+0x1e0>
     fe0:	80 95       	com	r24
     fe2:	84 23       	and	r24, r20
     fe4:	8c 93       	st	X, r24
		  }
	  }

}
     fe6:	27 96       	adiw	r28, 0x07	; 7
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <DIO_SetPinValue>:

/**********************************************************************************************************/
void DIO_SetPinValue     (DIO_Port PORT , DIO_Pin PIN , u8 Value)
{
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	27 97       	sbiw	r28, 0x07	; 7
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	6a 83       	std	Y+2, r22	; 0x02
    1010:	4b 83       	std	Y+3, r20	; 0x03
	if    (HIGH == Value)
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	09 f0       	breq	.+2      	; 0x101a <DIO_SetPinValue+0x22>
    1018:	6f c0       	rjmp	.+222    	; 0x10f8 <DIO_SetPinValue+0x100>
	{
		switch (PORT)
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	3f 83       	std	Y+7, r19	; 0x07
    1022:	2e 83       	std	Y+6, r18	; 0x06
    1024:	8e 81       	ldd	r24, Y+6	; 0x06
    1026:	9f 81       	ldd	r25, Y+7	; 0x07
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	91 05       	cpc	r25, r1
    102c:	49 f1       	breq	.+82     	; 0x1080 <DIO_SetPinValue+0x88>
    102e:	2e 81       	ldd	r18, Y+6	; 0x06
    1030:	3f 81       	ldd	r19, Y+7	; 0x07
    1032:	22 30       	cpi	r18, 0x02	; 2
    1034:	31 05       	cpc	r19, r1
    1036:	2c f4       	brge	.+10     	; 0x1042 <DIO_SetPinValue+0x4a>
    1038:	8e 81       	ldd	r24, Y+6	; 0x06
    103a:	9f 81       	ldd	r25, Y+7	; 0x07
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	61 f0       	breq	.+24     	; 0x1058 <DIO_SetPinValue+0x60>
    1040:	d2 c0       	rjmp	.+420    	; 0x11e6 <DIO_SetPinValue+0x1ee>
    1042:	2e 81       	ldd	r18, Y+6	; 0x06
    1044:	3f 81       	ldd	r19, Y+7	; 0x07
    1046:	22 30       	cpi	r18, 0x02	; 2
    1048:	31 05       	cpc	r19, r1
    104a:	71 f1       	breq	.+92     	; 0x10a8 <DIO_SetPinValue+0xb0>
    104c:	8e 81       	ldd	r24, Y+6	; 0x06
    104e:	9f 81       	ldd	r25, Y+7	; 0x07
    1050:	83 30       	cpi	r24, 0x03	; 3
    1052:	91 05       	cpc	r25, r1
    1054:	e9 f1       	breq	.+122    	; 0x10d0 <DIO_SetPinValue+0xd8>
    1056:	c7 c0       	rjmp	.+398    	; 0x11e6 <DIO_SetPinValue+0x1ee>
		{
		case PORTA : SET_BIT(PORTA_,PIN);break;
    1058:	ab e3       	ldi	r26, 0x3B	; 59
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	eb e3       	ldi	r30, 0x3B	; 59
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_SetPinValue+0x7e>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_SetPinValue+0x7a>
    107a:	84 2b       	or	r24, r20
    107c:	8c 93       	st	X, r24
    107e:	b3 c0       	rjmp	.+358    	; 0x11e6 <DIO_SetPinValue+0x1ee>
		case PORTB : SET_BIT(PORTB_,PIN);break;
    1080:	a8 e3       	ldi	r26, 0x38	; 56
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e8 e3       	ldi	r30, 0x38	; 56
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	48 2f       	mov	r20, r24
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 2e       	mov	r0, r18
    1098:	02 c0       	rjmp	.+4      	; 0x109e <DIO_SetPinValue+0xa6>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	0a 94       	dec	r0
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <DIO_SetPinValue+0xa2>
    10a2:	84 2b       	or	r24, r20
    10a4:	8c 93       	st	X, r24
    10a6:	9f c0       	rjmp	.+318    	; 0x11e6 <DIO_SetPinValue+0x1ee>
		case PORTC : SET_BIT(PORTC_,PIN);break;
    10a8:	a5 e3       	ldi	r26, 0x35	; 53
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e5 e3       	ldi	r30, 0x35	; 53
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 2e       	mov	r0, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <DIO_SetPinValue+0xce>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <DIO_SetPinValue+0xca>
    10ca:	84 2b       	or	r24, r20
    10cc:	8c 93       	st	X, r24
    10ce:	8b c0       	rjmp	.+278    	; 0x11e6 <DIO_SetPinValue+0x1ee>
		case PORTD : SET_BIT(PORTD_,PIN);break;
    10d0:	a2 e3       	ldi	r26, 0x32	; 50
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e2 e3       	ldi	r30, 0x32	; 50
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	48 2f       	mov	r20, r24
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 2e       	mov	r0, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <DIO_SetPinValue+0xf6>
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	0a 94       	dec	r0
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <DIO_SetPinValue+0xf2>
    10f2:	84 2b       	or	r24, r20
    10f4:	8c 93       	st	X, r24
    10f6:	77 c0       	rjmp	.+238    	; 0x11e6 <DIO_SetPinValue+0x1ee>
		}
	}
	else if (LOW == Value)
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	88 23       	and	r24, r24
    10fc:	09 f0       	breq	.+2      	; 0x1100 <DIO_SetPinValue+0x108>
    10fe:	73 c0       	rjmp	.+230    	; 0x11e6 <DIO_SetPinValue+0x1ee>
	{
		switch (PORT)
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	3d 83       	std	Y+5, r19	; 0x05
    1108:	2c 83       	std	Y+4, r18	; 0x04
    110a:	8c 81       	ldd	r24, Y+4	; 0x04
    110c:	9d 81       	ldd	r25, Y+5	; 0x05
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	91 05       	cpc	r25, r1
    1112:	59 f1       	breq	.+86     	; 0x116a <DIO_SetPinValue+0x172>
    1114:	2c 81       	ldd	r18, Y+4	; 0x04
    1116:	3d 81       	ldd	r19, Y+5	; 0x05
    1118:	22 30       	cpi	r18, 0x02	; 2
    111a:	31 05       	cpc	r19, r1
    111c:	2c f4       	brge	.+10     	; 0x1128 <DIO_SetPinValue+0x130>
    111e:	8c 81       	ldd	r24, Y+4	; 0x04
    1120:	9d 81       	ldd	r25, Y+5	; 0x05
    1122:	00 97       	sbiw	r24, 0x00	; 0
    1124:	69 f0       	breq	.+26     	; 0x1140 <DIO_SetPinValue+0x148>
    1126:	5f c0       	rjmp	.+190    	; 0x11e6 <DIO_SetPinValue+0x1ee>
    1128:	2c 81       	ldd	r18, Y+4	; 0x04
    112a:	3d 81       	ldd	r19, Y+5	; 0x05
    112c:	22 30       	cpi	r18, 0x02	; 2
    112e:	31 05       	cpc	r19, r1
    1130:	89 f1       	breq	.+98     	; 0x1194 <DIO_SetPinValue+0x19c>
    1132:	8c 81       	ldd	r24, Y+4	; 0x04
    1134:	9d 81       	ldd	r25, Y+5	; 0x05
    1136:	83 30       	cpi	r24, 0x03	; 3
    1138:	91 05       	cpc	r25, r1
    113a:	09 f4       	brne	.+2      	; 0x113e <DIO_SetPinValue+0x146>
    113c:	40 c0       	rjmp	.+128    	; 0x11be <DIO_SetPinValue+0x1c6>
    113e:	53 c0       	rjmp	.+166    	; 0x11e6 <DIO_SetPinValue+0x1ee>
		{
		case PORTA : CLR_BIT(PORTA_,PIN);break;
    1140:	ab e3       	ldi	r26, 0x3B	; 59
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	eb e3       	ldi	r30, 0x3B	; 59
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 2e       	mov	r0, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <DIO_SetPinValue+0x166>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <DIO_SetPinValue+0x162>
    1162:	80 95       	com	r24
    1164:	84 23       	and	r24, r20
    1166:	8c 93       	st	X, r24
    1168:	3e c0       	rjmp	.+124    	; 0x11e6 <DIO_SetPinValue+0x1ee>
		case PORTB : CLR_BIT(PORTB_,PIN);break;
    116a:	a8 e3       	ldi	r26, 0x38	; 56
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e8 e3       	ldi	r30, 0x38	; 56
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_SetPinValue+0x190>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_SetPinValue+0x18c>
    118c:	80 95       	com	r24
    118e:	84 23       	and	r24, r20
    1190:	8c 93       	st	X, r24
    1192:	29 c0       	rjmp	.+82     	; 0x11e6 <DIO_SetPinValue+0x1ee>
		case PORTC : CLR_BIT(PORTC_,PIN);break;
    1194:	a5 e3       	ldi	r26, 0x35	; 53
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e5 e3       	ldi	r30, 0x35	; 53
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 2e       	mov	r0, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <DIO_SetPinValue+0x1ba>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <DIO_SetPinValue+0x1b6>
    11b6:	80 95       	com	r24
    11b8:	84 23       	and	r24, r20
    11ba:	8c 93       	st	X, r24
    11bc:	14 c0       	rjmp	.+40     	; 0x11e6 <DIO_SetPinValue+0x1ee>
		case PORTD : CLR_BIT(PORTD_,PIN);break;
    11be:	a2 e3       	ldi	r26, 0x32	; 50
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e2 e3       	ldi	r30, 0x32	; 50
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <DIO_SetPinValue+0x1e4>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <DIO_SetPinValue+0x1e0>
    11e0:	80 95       	com	r24
    11e2:	84 23       	and	r24, r20
    11e4:	8c 93       	st	X, r24
		}
	}

}
    11e6:	27 96       	adiw	r28, 0x07	; 7
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <DIO_GetPinValue>:

/**********************************************************************************************************/
u8 DIO_GetPinValue       (DIO_Port PORT , DIO_Pin PIN)
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <DIO_GetPinValue+0x6>
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <DIO_GetPinValue+0x8>
    1200:	0f 92       	push	r0
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	8a 83       	std	Y+2, r24	; 0x02
    1208:	6b 83       	std	Y+3, r22	; 0x03
    u8 PinValue = 0 ;
    120a:	19 82       	std	Y+1, r1	; 0x01
    switch (PORT)
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	3d 83       	std	Y+5, r19	; 0x05
    1214:	2c 83       	std	Y+4, r18	; 0x04
    1216:	4c 81       	ldd	r20, Y+4	; 0x04
    1218:	5d 81       	ldd	r21, Y+5	; 0x05
    121a:	41 30       	cpi	r20, 0x01	; 1
    121c:	51 05       	cpc	r21, r1
    121e:	41 f1       	breq	.+80     	; 0x1270 <DIO_GetPinValue+0x78>
    1220:	8c 81       	ldd	r24, Y+4	; 0x04
    1222:	9d 81       	ldd	r25, Y+5	; 0x05
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	91 05       	cpc	r25, r1
    1228:	34 f4       	brge	.+12     	; 0x1236 <DIO_GetPinValue+0x3e>
    122a:	2c 81       	ldd	r18, Y+4	; 0x04
    122c:	3d 81       	ldd	r19, Y+5	; 0x05
    122e:	21 15       	cp	r18, r1
    1230:	31 05       	cpc	r19, r1
    1232:	61 f0       	breq	.+24     	; 0x124c <DIO_GetPinValue+0x54>
    1234:	52 c0       	rjmp	.+164    	; 0x12da <DIO_GetPinValue+0xe2>
    1236:	4c 81       	ldd	r20, Y+4	; 0x04
    1238:	5d 81       	ldd	r21, Y+5	; 0x05
    123a:	42 30       	cpi	r20, 0x02	; 2
    123c:	51 05       	cpc	r21, r1
    123e:	51 f1       	breq	.+84     	; 0x1294 <DIO_GetPinValue+0x9c>
    1240:	8c 81       	ldd	r24, Y+4	; 0x04
    1242:	9d 81       	ldd	r25, Y+5	; 0x05
    1244:	83 30       	cpi	r24, 0x03	; 3
    1246:	91 05       	cpc	r25, r1
    1248:	b9 f1       	breq	.+110    	; 0x12b8 <DIO_GetPinValue+0xc0>
    124a:	47 c0       	rjmp	.+142    	; 0x12da <DIO_GetPinValue+0xe2>
    {
		case PORTA:PinValue = GET_BIT(PINA,PIN);break;
    124c:	e9 e3       	ldi	r30, 0x39	; 57
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	88 2f       	mov	r24, r24
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	a9 01       	movw	r20, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <DIO_GetPinValue+0x6c>
    1260:	55 95       	asr	r21
    1262:	47 95       	ror	r20
    1264:	8a 95       	dec	r24
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <DIO_GetPinValue+0x68>
    1268:	ca 01       	movw	r24, r20
    126a:	81 70       	andi	r24, 0x01	; 1
    126c:	89 83       	std	Y+1, r24	; 0x01
    126e:	35 c0       	rjmp	.+106    	; 0x12da <DIO_GetPinValue+0xe2>
		case PORTB:PinValue = GET_BIT(PINB,PIN);break;
    1270:	e6 e3       	ldi	r30, 0x36	; 54
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	88 2f       	mov	r24, r24
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	a9 01       	movw	r20, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <DIO_GetPinValue+0x90>
    1284:	55 95       	asr	r21
    1286:	47 95       	ror	r20
    1288:	8a 95       	dec	r24
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <DIO_GetPinValue+0x8c>
    128c:	ca 01       	movw	r24, r20
    128e:	81 70       	andi	r24, 0x01	; 1
    1290:	89 83       	std	Y+1, r24	; 0x01
    1292:	23 c0       	rjmp	.+70     	; 0x12da <DIO_GetPinValue+0xe2>
		case PORTC:PinValue = GET_BIT(PINC,PIN);break;
    1294:	e3 e3       	ldi	r30, 0x33	; 51
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	88 2f       	mov	r24, r24
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	a9 01       	movw	r20, r18
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <DIO_GetPinValue+0xb4>
    12a8:	55 95       	asr	r21
    12aa:	47 95       	ror	r20
    12ac:	8a 95       	dec	r24
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <DIO_GetPinValue+0xb0>
    12b0:	ca 01       	movw	r24, r20
    12b2:	81 70       	andi	r24, 0x01	; 1
    12b4:	89 83       	std	Y+1, r24	; 0x01
    12b6:	11 c0       	rjmp	.+34     	; 0x12da <DIO_GetPinValue+0xe2>
		case PORTD:PinValue = GET_BIT(PIND,PIN);break;
    12b8:	e0 e3       	ldi	r30, 0x30	; 48
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	88 2f       	mov	r24, r24
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	a9 01       	movw	r20, r18
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <DIO_GetPinValue+0xd8>
    12cc:	55 95       	asr	r21
    12ce:	47 95       	ror	r20
    12d0:	8a 95       	dec	r24
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <DIO_GetPinValue+0xd4>
    12d4:	ca 01       	movw	r24, r20
    12d6:	81 70       	andi	r24, 0x01	; 1
    12d8:	89 83       	std	Y+1, r24	; 0x01

	}
   return PinValue;
    12da:	89 81       	ldd	r24, Y+1	; 0x01
}
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	08 95       	ret

000012ec <DIO_VoidWriteHighNibbles>:


void DIO_VoidWriteHighNibbles (DIO_Port PORT , u8 Value)
{
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <DIO_VoidWriteHighNibbles+0x6>
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <DIO_VoidWriteHighNibbles+0x8>
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	89 83       	std	Y+1, r24	; 0x01
    12fa:	6a 83       	std	Y+2, r22	; 0x02
	if (PORT <= PORTD)
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	84 30       	cpi	r24, 0x04	; 4
    1300:	08 f0       	brcs	.+2      	; 0x1304 <DIO_VoidWriteHighNibbles+0x18>
    1302:	62 c0       	rjmp	.+196    	; 0x13c8 <DIO_VoidWriteHighNibbles+0xdc>
	{

		Value = (Value<<4) ;
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	82 95       	swap	r24
    1308:	80 7f       	andi	r24, 0xF0	; 240
    130a:	8a 83       	std	Y+2, r24	; 0x02
		switch (PORT)
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	3c 83       	std	Y+4, r19	; 0x04
    1314:	2b 83       	std	Y+3, r18	; 0x03
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	91 05       	cpc	r25, r1
    131e:	29 f1       	breq	.+74     	; 0x136a <DIO_VoidWriteHighNibbles+0x7e>
    1320:	2b 81       	ldd	r18, Y+3	; 0x03
    1322:	3c 81       	ldd	r19, Y+4	; 0x04
    1324:	22 30       	cpi	r18, 0x02	; 2
    1326:	31 05       	cpc	r19, r1
    1328:	2c f4       	brge	.+10     	; 0x1334 <DIO_VoidWriteHighNibbles+0x48>
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	9c 81       	ldd	r25, Y+4	; 0x04
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	61 f0       	breq	.+24     	; 0x134a <DIO_VoidWriteHighNibbles+0x5e>
    1332:	4a c0       	rjmp	.+148    	; 0x13c8 <DIO_VoidWriteHighNibbles+0xdc>
    1334:	2b 81       	ldd	r18, Y+3	; 0x03
    1336:	3c 81       	ldd	r19, Y+4	; 0x04
    1338:	22 30       	cpi	r18, 0x02	; 2
    133a:	31 05       	cpc	r19, r1
    133c:	31 f1       	breq	.+76     	; 0x138a <DIO_VoidWriteHighNibbles+0x9e>
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	83 30       	cpi	r24, 0x03	; 3
    1344:	91 05       	cpc	r25, r1
    1346:	89 f1       	breq	.+98     	; 0x13aa <DIO_VoidWriteHighNibbles+0xbe>
    1348:	3f c0       	rjmp	.+126    	; 0x13c8 <DIO_VoidWriteHighNibbles+0xdc>
		{
		case PORTA :
			PORTA_&=0x0f;                   // make sure the high bits = 0000
    134a:	ab e3       	ldi	r26, 0x3B	; 59
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	eb e3       	ldi	r30, 0x3B	; 59
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	8f 70       	andi	r24, 0x0F	; 15
    1356:	8c 93       	st	X, r24
			PORTA_|=Value;			//Set only the high nibble of the port A by the given value
    1358:	ab e3       	ldi	r26, 0x3B	; 59
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	eb e3       	ldi	r30, 0x3B	; 59
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	90 81       	ld	r25, Z
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	89 2b       	or	r24, r25
    1366:	8c 93       	st	X, r24
    1368:	2f c0       	rjmp	.+94     	; 0x13c8 <DIO_VoidWriteHighNibbles+0xdc>
			break ;
		case PORTB :
			PORTB_&=0x0f;                   // make sure the high bits = 0000
    136a:	a8 e3       	ldi	r26, 0x38	; 56
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e8 e3       	ldi	r30, 0x38	; 56
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	8f 70       	andi	r24, 0x0F	; 15
    1376:	8c 93       	st	X, r24
			PORTB_|=Value;			//Set only the high nibble of the port A by the given value
    1378:	a8 e3       	ldi	r26, 0x38	; 56
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e8 e3       	ldi	r30, 0x38	; 56
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	90 81       	ld	r25, Z
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	89 2b       	or	r24, r25
    1386:	8c 93       	st	X, r24
    1388:	1f c0       	rjmp	.+62     	; 0x13c8 <DIO_VoidWriteHighNibbles+0xdc>
			break ;
		case PORTC :
			PORTC_&=0x0f;                   // make sure the high bits = 0000
    138a:	a5 e3       	ldi	r26, 0x35	; 53
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e5 e3       	ldi	r30, 0x35	; 53
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	8f 70       	andi	r24, 0x0F	; 15
    1396:	8c 93       	st	X, r24
			PORTC_|=Value;			//Set only the high nibble of the port A by the given value
    1398:	a5 e3       	ldi	r26, 0x35	; 53
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e5 e3       	ldi	r30, 0x35	; 53
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	90 81       	ld	r25, Z
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	89 2b       	or	r24, r25
    13a6:	8c 93       	st	X, r24
    13a8:	0f c0       	rjmp	.+30     	; 0x13c8 <DIO_VoidWriteHighNibbles+0xdc>
			break ;
		case PORTD :
			PORTD_&=0x0f;                   // make sure the high bits = 0000
    13aa:	a2 e3       	ldi	r26, 0x32	; 50
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e2 e3       	ldi	r30, 0x32	; 50
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	8f 70       	andi	r24, 0x0F	; 15
    13b6:	8c 93       	st	X, r24
			PORTD_|=Value;			//Set only the high nibble of the port A by the given value
    13b8:	a2 e3       	ldi	r26, 0x32	; 50
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e2 e3       	ldi	r30, 0x32	; 50
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	90 81       	ld	r25, Z
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	89 2b       	or	r24, r25
    13c6:	8c 93       	st	X, r24
			break ;
		default: break ;
		}

	}
}
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <DIO_VoidWriteLowNibbles>:

void DIO_VoidWriteLowNibbles (DIO_Port PORT , u8 Value)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	00 d0       	rcall	.+0      	; 0x13dc <DIO_VoidWriteLowNibbles+0x6>
    13dc:	00 d0       	rcall	.+0      	; 0x13de <DIO_VoidWriteLowNibbles+0x8>
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	6a 83       	std	Y+2, r22	; 0x02
	if (PORT <= PORTD)
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	84 30       	cpi	r24, 0x04	; 4
    13ea:	08 f0       	brcs	.+2      	; 0x13ee <DIO_VoidWriteLowNibbles+0x18>
    13ec:	60 c0       	rjmp	.+192    	; 0x14ae <DIO_VoidWriteLowNibbles+0xd8>
	{

		Value = 0x0f;
    13ee:	8f e0       	ldi	r24, 0x0F	; 15
    13f0:	8a 83       	std	Y+2, r24	; 0x02
		switch (PORT)
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	3c 83       	std	Y+4, r19	; 0x04
    13fa:	2b 83       	std	Y+3, r18	; 0x03
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	91 05       	cpc	r25, r1
    1404:	29 f1       	breq	.+74     	; 0x1450 <DIO_VoidWriteLowNibbles+0x7a>
    1406:	2b 81       	ldd	r18, Y+3	; 0x03
    1408:	3c 81       	ldd	r19, Y+4	; 0x04
    140a:	22 30       	cpi	r18, 0x02	; 2
    140c:	31 05       	cpc	r19, r1
    140e:	2c f4       	brge	.+10     	; 0x141a <DIO_VoidWriteLowNibbles+0x44>
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	61 f0       	breq	.+24     	; 0x1430 <DIO_VoidWriteLowNibbles+0x5a>
    1418:	4a c0       	rjmp	.+148    	; 0x14ae <DIO_VoidWriteLowNibbles+0xd8>
    141a:	2b 81       	ldd	r18, Y+3	; 0x03
    141c:	3c 81       	ldd	r19, Y+4	; 0x04
    141e:	22 30       	cpi	r18, 0x02	; 2
    1420:	31 05       	cpc	r19, r1
    1422:	31 f1       	breq	.+76     	; 0x1470 <DIO_VoidWriteLowNibbles+0x9a>
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	9c 81       	ldd	r25, Y+4	; 0x04
    1428:	83 30       	cpi	r24, 0x03	; 3
    142a:	91 05       	cpc	r25, r1
    142c:	89 f1       	breq	.+98     	; 0x1490 <DIO_VoidWriteLowNibbles+0xba>
    142e:	3f c0       	rjmp	.+126    	; 0x14ae <DIO_VoidWriteLowNibbles+0xd8>
		{
		case PORTA :
			PORTA_&=0xf0;                   // make sure the high bits = 0000
    1430:	ab e3       	ldi	r26, 0x3B	; 59
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	eb e3       	ldi	r30, 0x3B	; 59
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	80 7f       	andi	r24, 0xF0	; 240
    143c:	8c 93       	st	X, r24
			PORTA_|=Value;			//Set only the high nibble of the port A by the given value
    143e:	ab e3       	ldi	r26, 0x3B	; 59
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	eb e3       	ldi	r30, 0x3B	; 59
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	90 81       	ld	r25, Z
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	89 2b       	or	r24, r25
    144c:	8c 93       	st	X, r24
    144e:	2f c0       	rjmp	.+94     	; 0x14ae <DIO_VoidWriteLowNibbles+0xd8>
			break ;
		case PORTB :
			PORTB_&=0xf0;                    // make sure the high bits = 0000
    1450:	a8 e3       	ldi	r26, 0x38	; 56
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e8 e3       	ldi	r30, 0x38	; 56
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	80 7f       	andi	r24, 0xF0	; 240
    145c:	8c 93       	st	X, r24
			PORTB_|=Value;			//Set only the high nibble of the port A by the given value
    145e:	a8 e3       	ldi	r26, 0x38	; 56
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e8 e3       	ldi	r30, 0x38	; 56
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	90 81       	ld	r25, Z
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	89 2b       	or	r24, r25
    146c:	8c 93       	st	X, r24
    146e:	1f c0       	rjmp	.+62     	; 0x14ae <DIO_VoidWriteLowNibbles+0xd8>
			break ;
		case PORTC :
			PORTC_&=0xf0;                    // make sure the high bits = 0000
    1470:	a5 e3       	ldi	r26, 0x35	; 53
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	e5 e3       	ldi	r30, 0x35	; 53
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	80 7f       	andi	r24, 0xF0	; 240
    147c:	8c 93       	st	X, r24
			PORTC_|=Value;			//Set only the high nibble of the port A by the given value
    147e:	a5 e3       	ldi	r26, 0x35	; 53
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e5 e3       	ldi	r30, 0x35	; 53
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	90 81       	ld	r25, Z
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	89 2b       	or	r24, r25
    148c:	8c 93       	st	X, r24
    148e:	0f c0       	rjmp	.+30     	; 0x14ae <DIO_VoidWriteLowNibbles+0xd8>
			break ;
		case PORTD :
			PORTD_&=0xf0;                    // make sure the high bits = 0000
    1490:	a2 e3       	ldi	r26, 0x32	; 50
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e2 e3       	ldi	r30, 0x32	; 50
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	80 7f       	andi	r24, 0xF0	; 240
    149c:	8c 93       	st	X, r24
			PORTD_|=Value;			//Set only the high nibble of the port A by the given value
    149e:	a2 e3       	ldi	r26, 0x32	; 50
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e2 e3       	ldi	r30, 0x32	; 50
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	90 81       	ld	r25, Z
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	89 2b       	or	r24, r25
    14ac:	8c 93       	st	X, r24
			break ;
		default: break ;
		}

	}
}
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <EXTI_GI_Enable>:
void (*GlobalFuncPtr0) (void) = NULL;
void (*GlobalFuncPtr1) (void) = NULL;
void (*GlobalFuncPtr2) (void) = NULL;

void EXTI_GI_Enable    (void)
{
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    14c4:	af e5       	ldi	r26, 0x5F	; 95
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	ef e5       	ldi	r30, 0x5F	; 95
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	80 68       	ori	r24, 0x80	; 128
    14d0:	8c 93       	st	X, r24
}
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <EXTI_GI_Disable>:

void EXTI_GI_Disable   (void)
{
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    14e0:	af e5       	ldi	r26, 0x5F	; 95
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	ef e5       	ldi	r30, 0x5F	; 95
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	8f 77       	andi	r24, 0x7F	; 127
    14ec:	8c 93       	st	X, r24
}
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <EXTI_Initialize>:


void EXTI_Initialize (void)
{
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,0);
    14fc:	a5 e5       	ldi	r26, 0x55	; 85
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	e5 e5       	ldi	r30, 0x55	; 85
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	8e 7f       	andi	r24, 0xFE	; 254
    1508:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,1);
    150a:	a5 e5       	ldi	r26, 0x55	; 85
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	e5 e5       	ldi	r30, 0x55	; 85
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	8d 7f       	andi	r24, 0xFD	; 253
    1516:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,2);
    1518:	a5 e5       	ldi	r26, 0x55	; 85
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e5 e5       	ldi	r30, 0x55	; 85
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	8b 7f       	andi	r24, 0xFB	; 251
    1524:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,3);
    1526:	a5 e5       	ldi	r26, 0x55	; 85
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e5 e5       	ldi	r30, 0x55	; 85
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	87 7f       	andi	r24, 0xF7	; 247
    1532:	8c 93       	st	X, r24
	CLR_BIT(MCUCSR,0);
    1534:	a4 e5       	ldi	r26, 0x54	; 84
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e4 e5       	ldi	r30, 0x54	; 84
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	8e 7f       	andi	r24, 0xFE	; 254
    1540:	8c 93       	st	X, r24
      MCUCR |= EXTI_Any_Logical_Change;

#elif EXTI_0_Mode == EXTI_Falling_Edge
	  MCUCR |= EXTI_Falling_Edge;
#elif EXTI_0_Mode == EXTI_Rising_Edge
	  MCUCR |= EXTI_Rising_Edge;
    1542:	a5 e5       	ldi	r26, 0x55	; 85
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e5 e5       	ldi	r30, 0x55	; 85
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	83 60       	ori	r24, 0x03	; 3
    154e:	8c 93       	st	X, r24


#if    EXTI_0_Init_State  == EXTI_Disable
	   CLR_BIT(GICR,6);
#elif  EXTI_0_Init_State  == EXTI_Enable
	   SET_BIT(GICR,6);
    1550:	ab e5       	ldi	r26, 0x5B	; 91
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	eb e5       	ldi	r30, 0x5B	; 91
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	80 64       	ori	r24, 0x40	; 64
    155c:	8c 93       	st	X, r24
#if   EXTI_1_Mode == EXTI_Low_Level
	  MCUCR |= ( EXTI_Low_Level << 2 );
#elif EXTI_1_Mode == EXTI_Any_Logical_Change
	  MCUCR |= ( EXTI_Any_Logical_Change << 2 );
#elif EXTI_1_Mode == EXTI_Rising_Edge
	  MCUCR |= ( EXTI_Rising_Edge << 2 );
    155e:	a5 e5       	ldi	r26, 0x55	; 85
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e5 e5       	ldi	r30, 0x55	; 85
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	8c 60       	ori	r24, 0x0C	; 12
    156a:	8c 93       	st	X, r24
#endif

#if    EXTI_1_Init_State  == EXTI_Disable
	   CLR_BIT(GICR,7);
#elif  EXTI_1_Init_State  == EXTI_Enable
	   SET_BIT(GICR,7);
    156c:	ab e5       	ldi	r26, 0x5B	; 91
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	eb e5       	ldi	r30, 0x5B	; 91
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	80 68       	ori	r24, 0x80	; 128
    1578:	8c 93       	st	X, r24

/************************************* INT_2 ************************************************/
#if   EXTI_2_Mode == EXTI_INT2_Rising_Edge
	  SET_BIT(MCUCSR,6);
#elif EXTI_2_Mode == EXTI_INT2_Falling_Edge
	  CLR_BIT(MCUCSR,6);
    157a:	a4 e5       	ldi	r26, 0x54	; 84
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e4 e5       	ldi	r30, 0x54	; 84
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	8f 7b       	andi	r24, 0xBF	; 191
    1586:	8c 93       	st	X, r24
#endif

#if    EXTI_2_Init_State  == EXTI_Disable
	   CLR_BIT(GICR,5);
    1588:	ab e5       	ldi	r26, 0x5B	; 91
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	eb e5       	ldi	r30, 0x5B	; 91
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	8f 7d       	andi	r24, 0xDF	; 223
    1594:	8c 93       	st	X, r24
#elif  EXTI_2_Init_State  == EXTI_Enable
	   SET_BIT(GICR,5);
#endif


}
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <EXTI_0_Enable>:


void EXTI_0_Enable    (void)
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(GICR,6);
    15a4:	ab e5       	ldi	r26, 0x5B	; 91
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	eb e5       	ldi	r30, 0x5B	; 91
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	80 64       	ori	r24, 0x40	; 64
    15b0:	8c 93       	st	X, r24
}
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <EXTI_0_Disable>:
void EXTI_0_Disable   (void)
{
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,6);
    15c0:	ab e5       	ldi	r26, 0x5B	; 91
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	eb e5       	ldi	r30, 0x5B	; 91
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	8f 7b       	andi	r24, 0xBF	; 191
    15cc:	8c 93       	st	X, r24
}
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	08 95       	ret

000015d4 <EXTI_1_Enable>:

void EXTI_1_Enable    (void)
{
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,7);
    15dc:	ab e5       	ldi	r26, 0x5B	; 91
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	eb e5       	ldi	r30, 0x5B	; 91
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	80 68       	ori	r24, 0x80	; 128
    15e8:	8c 93       	st	X, r24
}
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	08 95       	ret

000015f0 <EXTI_1_Disable>:
void EXTI_1_Disable   (void)
{
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,7);
    15f8:	ab e5       	ldi	r26, 0x5B	; 91
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	eb e5       	ldi	r30, 0x5B	; 91
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	8f 77       	andi	r24, 0x7F	; 127
    1604:	8c 93       	st	X, r24
}
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <EXTI_2_Enable>:

void EXTI_2_Enable    (void)
{
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,5);
    1614:	ab e5       	ldi	r26, 0x5B	; 91
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	eb e5       	ldi	r30, 0x5B	; 91
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	80 62       	ori	r24, 0x20	; 32
    1620:	8c 93       	st	X, r24
}
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <EXTI_2_Disable>:
void EXTI_2_Disable   (void)
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,5);
    1630:	ab e5       	ldi	r26, 0x5B	; 91
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	eb e5       	ldi	r30, 0x5B	; 91
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	8f 7d       	andi	r24, 0xDF	; 223
    163c:	8c 93       	st	X, r24
}
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <EXTI_0_SendToISR>:

/***********************************************************************************/
void EXTI_0_SendToISR  (void (*FuncPtr0) (void))
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	00 d0       	rcall	.+0      	; 0x164a <EXTI_0_SendToISR+0x6>
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	9a 83       	std	Y+2, r25	; 0x02
    1650:	89 83       	std	Y+1, r24	; 0x01
	GlobalFuncPtr0 = FuncPtr0;
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	9a 81       	ldd	r25, Y+2	; 0x02
    1656:	90 93 79 00 	sts	0x0079, r25
    165a:	80 93 78 00 	sts	0x0078, r24
}
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	08 95       	ret

00001668 <__vector_1>:

void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    1668:	1f 92       	push	r1
    166a:	0f 92       	push	r0
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	0f 92       	push	r0
    1670:	11 24       	eor	r1, r1
    1672:	2f 93       	push	r18
    1674:	3f 93       	push	r19
    1676:	4f 93       	push	r20
    1678:	5f 93       	push	r21
    167a:	6f 93       	push	r22
    167c:	7f 93       	push	r23
    167e:	8f 93       	push	r24
    1680:	9f 93       	push	r25
    1682:	af 93       	push	r26
    1684:	bf 93       	push	r27
    1686:	ef 93       	push	r30
    1688:	ff 93       	push	r31
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
	if (GlobalFuncPtr0 != NULL)
    1692:	80 91 78 00 	lds	r24, 0x0078
    1696:	90 91 79 00 	lds	r25, 0x0079
    169a:	00 97       	sbiw	r24, 0x00	; 0
    169c:	29 f0       	breq	.+10     	; 0x16a8 <__vector_1+0x40>
	{
		GlobalFuncPtr0();
    169e:	e0 91 78 00 	lds	r30, 0x0078
    16a2:	f0 91 79 00 	lds	r31, 0x0079
    16a6:	09 95       	icall
	}
}
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	ff 91       	pop	r31
    16ae:	ef 91       	pop	r30
    16b0:	bf 91       	pop	r27
    16b2:	af 91       	pop	r26
    16b4:	9f 91       	pop	r25
    16b6:	8f 91       	pop	r24
    16b8:	7f 91       	pop	r23
    16ba:	6f 91       	pop	r22
    16bc:	5f 91       	pop	r21
    16be:	4f 91       	pop	r20
    16c0:	3f 91       	pop	r19
    16c2:	2f 91       	pop	r18
    16c4:	0f 90       	pop	r0
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	0f 90       	pop	r0
    16ca:	1f 90       	pop	r1
    16cc:	18 95       	reti

000016ce <EXTI_1_SendToISR>:

/***********************************************************************************/

void EXTI_1_SendToISR  (void (*FuncPtr1) (void))
{
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <EXTI_1_SendToISR+0x6>
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	9a 83       	std	Y+2, r25	; 0x02
    16da:	89 83       	std	Y+1, r24	; 0x01
	GlobalFuncPtr1 = FuncPtr1;
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	9a 81       	ldd	r25, Y+2	; 0x02
    16e0:	90 93 7b 00 	sts	0x007B, r25
    16e4:	80 93 7a 00 	sts	0x007A, r24
}
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <__vector_2>:

void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
    16f2:	1f 92       	push	r1
    16f4:	0f 92       	push	r0
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	0f 92       	push	r0
    16fa:	11 24       	eor	r1, r1
    16fc:	2f 93       	push	r18
    16fe:	3f 93       	push	r19
    1700:	4f 93       	push	r20
    1702:	5f 93       	push	r21
    1704:	6f 93       	push	r22
    1706:	7f 93       	push	r23
    1708:	8f 93       	push	r24
    170a:	9f 93       	push	r25
    170c:	af 93       	push	r26
    170e:	bf 93       	push	r27
    1710:	ef 93       	push	r30
    1712:	ff 93       	push	r31
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
	if (GlobalFuncPtr1 != NULL)
    171c:	80 91 7a 00 	lds	r24, 0x007A
    1720:	90 91 7b 00 	lds	r25, 0x007B
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	29 f0       	breq	.+10     	; 0x1732 <__vector_2+0x40>
	{
		GlobalFuncPtr1();
    1728:	e0 91 7a 00 	lds	r30, 0x007A
    172c:	f0 91 7b 00 	lds	r31, 0x007B
    1730:	09 95       	icall
	}
}
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	ff 91       	pop	r31
    1738:	ef 91       	pop	r30
    173a:	bf 91       	pop	r27
    173c:	af 91       	pop	r26
    173e:	9f 91       	pop	r25
    1740:	8f 91       	pop	r24
    1742:	7f 91       	pop	r23
    1744:	6f 91       	pop	r22
    1746:	5f 91       	pop	r21
    1748:	4f 91       	pop	r20
    174a:	3f 91       	pop	r19
    174c:	2f 91       	pop	r18
    174e:	0f 90       	pop	r0
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	0f 90       	pop	r0
    1754:	1f 90       	pop	r1
    1756:	18 95       	reti

00001758 <EXTI_2_SendToISR>:

/***********************************************************************************/

void EXTI_2_SendToISR  (void (*FuncPtr2) (void))
{
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	00 d0       	rcall	.+0      	; 0x175e <EXTI_2_SendToISR+0x6>
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	9a 83       	std	Y+2, r25	; 0x02
    1764:	89 83       	std	Y+1, r24	; 0x01
	GlobalFuncPtr2 = FuncPtr2;
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	9a 81       	ldd	r25, Y+2	; 0x02
    176a:	90 93 7d 00 	sts	0x007D, r25
    176e:	80 93 7c 00 	sts	0x007C, r24
}
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <__vector_3>:

void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    177c:	1f 92       	push	r1
    177e:	0f 92       	push	r0
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	0f 92       	push	r0
    1784:	11 24       	eor	r1, r1
    1786:	2f 93       	push	r18
    1788:	3f 93       	push	r19
    178a:	4f 93       	push	r20
    178c:	5f 93       	push	r21
    178e:	6f 93       	push	r22
    1790:	7f 93       	push	r23
    1792:	8f 93       	push	r24
    1794:	9f 93       	push	r25
    1796:	af 93       	push	r26
    1798:	bf 93       	push	r27
    179a:	ef 93       	push	r30
    179c:	ff 93       	push	r31
    179e:	df 93       	push	r29
    17a0:	cf 93       	push	r28
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
	if (GlobalFuncPtr2 != NULL)
    17a6:	80 91 7c 00 	lds	r24, 0x007C
    17aa:	90 91 7d 00 	lds	r25, 0x007D
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	29 f0       	breq	.+10     	; 0x17bc <__vector_3+0x40>
	{
		GlobalFuncPtr2();
    17b2:	e0 91 7c 00 	lds	r30, 0x007C
    17b6:	f0 91 7d 00 	lds	r31, 0x007D
    17ba:	09 95       	icall
	}
}
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	ff 91       	pop	r31
    17c2:	ef 91       	pop	r30
    17c4:	bf 91       	pop	r27
    17c6:	af 91       	pop	r26
    17c8:	9f 91       	pop	r25
    17ca:	8f 91       	pop	r24
    17cc:	7f 91       	pop	r23
    17ce:	6f 91       	pop	r22
    17d0:	5f 91       	pop	r21
    17d2:	4f 91       	pop	r20
    17d4:	3f 91       	pop	r19
    17d6:	2f 91       	pop	r18
    17d8:	0f 90       	pop	r0
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	0f 90       	pop	r0
    17de:	1f 90       	pop	r1
    17e0:	18 95       	reti

000017e2 <Keypad_VoidInoit>:
		                       { 5 , 6 , 7 , 8 },
							   { 9 , 0 ,'c','='},
							   {'+','-','/','*'}  };

void Keypad_VoidInoit(void)
{
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62

DIO_SetPinDirection(KEYPAD_ROW_PORT,ROW_1,INPUT);
    17ea:	82 e0       	ldi	r24, 0x02	; 2
    17ec:	65 e0       	ldi	r22, 0x05	; 5
    17ee:	40 e0       	ldi	r20, 0x00	; 0
    17f0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
DIO_SetPinDirection(KEYPAD_ROW_PORT,ROW_2,INPUT);
    17f4:	82 e0       	ldi	r24, 0x02	; 2
    17f6:	64 e0       	ldi	r22, 0x04	; 4
    17f8:	40 e0       	ldi	r20, 0x00	; 0
    17fa:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
DIO_SetPinDirection(KEYPAD_ROW_PORT,ROW_3,INPUT);
    17fe:	82 e0       	ldi	r24, 0x02	; 2
    1800:	63 e0       	ldi	r22, 0x03	; 3
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
DIO_SetPinDirection(KEYPAD_ROW_PORT,ROW_4,INPUT);
    1808:	82 e0       	ldi	r24, 0x02	; 2
    180a:	62 e0       	ldi	r22, 0x02	; 2
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>


DIO_SetPinDirection(KEYPAD_COL_PORT,COL_1,INPUT);
    1812:	83 e0       	ldi	r24, 0x03	; 3
    1814:	67 e0       	ldi	r22, 0x07	; 7
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
DIO_SetPinDirection(KEYPAD_COL_PORT,COL_2,INPUT);
    181c:	83 e0       	ldi	r24, 0x03	; 3
    181e:	66 e0       	ldi	r22, 0x06	; 6
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
DIO_SetPinDirection(KEYPAD_COL_PORT,COL_3,INPUT);
    1826:	83 e0       	ldi	r24, 0x03	; 3
    1828:	65 e0       	ldi	r22, 0x05	; 5
    182a:	40 e0       	ldi	r20, 0x00	; 0
    182c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
DIO_SetPinDirection(KEYPAD_COL_PORT,COL_4,INPUT);
    1830:	83 e0       	ldi	r24, 0x03	; 3
    1832:	63 e0       	ldi	r22, 0x03	; 3
    1834:	40 e0       	ldi	r20, 0x00	; 0
    1836:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>

}
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <Keypad_u8GetPressedKey>:




u8   Keypad_u8GetPressedKey (void)
{
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	a0 97       	sbiw	r28, 0x20	; 32
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_u8Flag = 0;
    1854:	18 a2       	std	Y+32, r1	; 0x20
	u8 LOC_u8Row;
	u8 LOC_u8COL;

	u8 LOC_u8Data = NO_DATA ;
    1856:	8f ef       	ldi	r24, 0xFF	; 255
    1858:	8d 8f       	std	Y+29, r24	; 0x1d

	for(LOC_u8Row = 0 + ROW_1 ;LOC_u8Row > ROW_4 - 1 ;LOC_u8Row--)
    185a:	85 e0       	ldi	r24, 0x05	; 5
    185c:	8f 8f       	std	Y+31, r24	; 0x1f
    185e:	59 c1       	rjmp	.+690    	; 0x1b12 <Keypad_u8GetPressedKey+0x2d2>
	{
		DIO_SetPinDirection(KEYPAD_ROW_PORT,LOC_u8Row,OUTPUT);
    1860:	82 e0       	ldi	r24, 0x02	; 2
    1862:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1864:	41 e0       	ldi	r20, 0x01	; 1
    1866:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
		DIO_SetPinValue(KEYPAD_ROW_PORT,LOC_u8Row,LOW);
    186a:	82 e0       	ldi	r24, 0x02	; 2
    186c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    186e:	40 e0       	ldi	r20, 0x00	; 0
    1870:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>

		for (LOC_u8COL = 0 + COL_1 ;LOC_u8COL > COL_4 - 1 ;LOC_u8COL--)
    1874:	87 e0       	ldi	r24, 0x07	; 7
    1876:	8e 8f       	std	Y+30, r24	; 0x1e
    1878:	3d c1       	rjmp	.+634    	; 0x1af4 <Keypad_u8GetPressedKey+0x2b4>
		{
                if(LOC_u8COL == 4)
    187a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    187c:	84 30       	cpi	r24, 0x04	; 4
    187e:	09 f0       	breq	.+2      	; 0x1882 <Keypad_u8GetPressedKey+0x42>
    1880:	96 c0       	rjmp	.+300    	; 0x19ae <Keypad_u8GetPressedKey+0x16e>
                	{
                	LOC_u8COL--;
    1882:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1884:	81 50       	subi	r24, 0x01	; 1
    1886:	8e 8f       	std	Y+30, r24	; 0x1e
                	if (DIO_GetPinValue(KEYPAD_COL_PORT,LOC_u8COL) == LOW)
    1888:	83 e0       	ldi	r24, 0x03	; 3
    188a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    188c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <DIO_GetPinValue>
    1890:	88 23       	and	r24, r24
    1892:	09 f0       	breq	.+2      	; 0x1896 <Keypad_u8GetPressedKey+0x56>
    1894:	2c c1       	rjmp	.+600    	; 0x1aee <Keypad_u8GetPressedKey+0x2ae>
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	a0 e2       	ldi	r26, 0x20	; 32
    189c:	b2 e4       	ldi	r27, 0x42	; 66
    189e:	89 8f       	std	Y+25, r24	; 0x19
    18a0:	9a 8f       	std	Y+26, r25	; 0x1a
    18a2:	ab 8f       	std	Y+27, r26	; 0x1b
    18a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a6:	69 8d       	ldd	r22, Y+25	; 0x19
    18a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	4a e7       	ldi	r20, 0x7A	; 122
    18b4:	55 e4       	ldi	r21, 0x45	; 69
    18b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	8d 8b       	std	Y+21, r24	; 0x15
    18c0:	9e 8b       	std	Y+22, r25	; 0x16
    18c2:	af 8b       	std	Y+23, r26	; 0x17
    18c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18c6:	6d 89       	ldd	r22, Y+21	; 0x15
    18c8:	7e 89       	ldd	r23, Y+22	; 0x16
    18ca:	8f 89       	ldd	r24, Y+23	; 0x17
    18cc:	98 8d       	ldd	r25, Y+24	; 0x18
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	40 e8       	ldi	r20, 0x80	; 128
    18d4:	5f e3       	ldi	r21, 0x3F	; 63
    18d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18da:	88 23       	and	r24, r24
    18dc:	2c f4       	brge	.+10     	; 0x18e8 <Keypad_u8GetPressedKey+0xa8>
		__ticks = 1;
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	9c 8b       	std	Y+20, r25	; 0x14
    18e4:	8b 8b       	std	Y+19, r24	; 0x13
    18e6:	3f c0       	rjmp	.+126    	; 0x1966 <Keypad_u8GetPressedKey+0x126>
	else if (__tmp > 65535)
    18e8:	6d 89       	ldd	r22, Y+21	; 0x15
    18ea:	7e 89       	ldd	r23, Y+22	; 0x16
    18ec:	8f 89       	ldd	r24, Y+23	; 0x17
    18ee:	98 8d       	ldd	r25, Y+24	; 0x18
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	3f ef       	ldi	r19, 0xFF	; 255
    18f4:	4f e7       	ldi	r20, 0x7F	; 127
    18f6:	57 e4       	ldi	r21, 0x47	; 71
    18f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18fc:	18 16       	cp	r1, r24
    18fe:	4c f5       	brge	.+82     	; 0x1952 <Keypad_u8GetPressedKey+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1900:	69 8d       	ldd	r22, Y+25	; 0x19
    1902:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1904:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1906:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e2       	ldi	r20, 0x20	; 32
    190e:	51 e4       	ldi	r21, 0x41	; 65
    1910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	bc 01       	movw	r22, r24
    191a:	cd 01       	movw	r24, r26
    191c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	9c 8b       	std	Y+20, r25	; 0x14
    1926:	8b 8b       	std	Y+19, r24	; 0x13
    1928:	0f c0       	rjmp	.+30     	; 0x1948 <Keypad_u8GetPressedKey+0x108>
    192a:	80 e9       	ldi	r24, 0x90	; 144
    192c:	91 e0       	ldi	r25, 0x01	; 1
    192e:	9a 8b       	std	Y+18, r25	; 0x12
    1930:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1932:	89 89       	ldd	r24, Y+17	; 0x11
    1934:	9a 89       	ldd	r25, Y+18	; 0x12
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	f1 f7       	brne	.-4      	; 0x1936 <Keypad_u8GetPressedKey+0xf6>
    193a:	9a 8b       	std	Y+18, r25	; 0x12
    193c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193e:	8b 89       	ldd	r24, Y+19	; 0x13
    1940:	9c 89       	ldd	r25, Y+20	; 0x14
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	9c 8b       	std	Y+20, r25	; 0x14
    1946:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1948:	8b 89       	ldd	r24, Y+19	; 0x13
    194a:	9c 89       	ldd	r25, Y+20	; 0x14
    194c:	00 97       	sbiw	r24, 0x00	; 0
    194e:	69 f7       	brne	.-38     	; 0x192a <Keypad_u8GetPressedKey+0xea>
    1950:	25 c0       	rjmp	.+74     	; 0x199c <Keypad_u8GetPressedKey+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1952:	6d 89       	ldd	r22, Y+21	; 0x15
    1954:	7e 89       	ldd	r23, Y+22	; 0x16
    1956:	8f 89       	ldd	r24, Y+23	; 0x17
    1958:	98 8d       	ldd	r25, Y+24	; 0x18
    195a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	9c 8b       	std	Y+20, r25	; 0x14
    1964:	8b 8b       	std	Y+19, r24	; 0x13
    1966:	8b 89       	ldd	r24, Y+19	; 0x13
    1968:	9c 89       	ldd	r25, Y+20	; 0x14
    196a:	98 8b       	std	Y+16, r25	; 0x10
    196c:	8f 87       	std	Y+15, r24	; 0x0f
    196e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1970:	98 89       	ldd	r25, Y+16	; 0x10
    1972:	01 97       	sbiw	r24, 0x01	; 1
    1974:	f1 f7       	brne	.-4      	; 0x1972 <Keypad_u8GetPressedKey+0x132>
    1976:	98 8b       	std	Y+16, r25	; 0x10
    1978:	8f 87       	std	Y+15, r24	; 0x0f
    197a:	10 c0       	rjmp	.+32     	; 0x199c <Keypad_u8GetPressedKey+0x15c>
                	       {
                	       	_delay_ms(40);

                 	         while(LOW ==  DIO_GetPinValue(KEYPAD_COL_PORT,LOC_u8COL) )

                	          LOC_u8Data = Keypad_u8Buttons [ROW_1 - LOC_u8Row ][COL_1 - 4] ;
    197c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	85 e0       	ldi	r24, 0x05	; 5
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	82 1b       	sub	r24, r18
    1988:	93 0b       	sbc	r25, r19
    198a:	88 0f       	add	r24, r24
    198c:	99 1f       	adc	r25, r25
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	fc 01       	movw	r30, r24
    1994:	e5 59       	subi	r30, 0x95	; 149
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	80 81       	ld	r24, Z
    199a:	8d 8f       	std	Y+29, r24	; 0x1d
                	LOC_u8COL--;
                	if (DIO_GetPinValue(KEYPAD_COL_PORT,LOC_u8COL) == LOW)
                	       {
                	       	_delay_ms(40);

                 	         while(LOW ==  DIO_GetPinValue(KEYPAD_COL_PORT,LOC_u8COL) )
    199c:	83 e0       	ldi	r24, 0x03	; 3
    199e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    19a0:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <DIO_GetPinValue>
    19a4:	88 23       	and	r24, r24
    19a6:	51 f3       	breq	.-44     	; 0x197c <Keypad_u8GetPressedKey+0x13c>

                	          LOC_u8Data = Keypad_u8Buttons [ROW_1 - LOC_u8Row ][COL_1 - 4] ;
                              LOC_u8Flag = 1;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	88 a3       	std	Y+32, r24	; 0x20
    19ac:	a7 c0       	rjmp	.+334    	; 0x1afc <Keypad_u8GetPressedKey+0x2bc>
                	       }

                	}


                else if (DIO_GetPinValue(KEYPAD_COL_PORT,LOC_u8COL) == LOW)
    19ae:	83 e0       	ldi	r24, 0x03	; 3
    19b0:	6e 8d       	ldd	r22, Y+30	; 0x1e
    19b2:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <DIO_GetPinValue>
    19b6:	88 23       	and	r24, r24
    19b8:	09 f0       	breq	.+2      	; 0x19bc <Keypad_u8GetPressedKey+0x17c>
    19ba:	99 c0       	rjmp	.+306    	; 0x1aee <Keypad_u8GetPressedKey+0x2ae>
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	a0 e2       	ldi	r26, 0x20	; 32
    19c2:	b2 e4       	ldi	r27, 0x42	; 66
    19c4:	8b 87       	std	Y+11, r24	; 0x0b
    19c6:	9c 87       	std	Y+12, r25	; 0x0c
    19c8:	ad 87       	std	Y+13, r26	; 0x0d
    19ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	4a e7       	ldi	r20, 0x7A	; 122
    19da:	55 e4       	ldi	r21, 0x45	; 69
    19dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	8f 83       	std	Y+7, r24	; 0x07
    19e6:	98 87       	std	Y+8, r25	; 0x08
    19e8:	a9 87       	std	Y+9, r26	; 0x09
    19ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ec:	6f 81       	ldd	r22, Y+7	; 0x07
    19ee:	78 85       	ldd	r23, Y+8	; 0x08
    19f0:	89 85       	ldd	r24, Y+9	; 0x09
    19f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e8       	ldi	r20, 0x80	; 128
    19fa:	5f e3       	ldi	r21, 0x3F	; 63
    19fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a00:	88 23       	and	r24, r24
    1a02:	2c f4       	brge	.+10     	; 0x1a0e <Keypad_u8GetPressedKey+0x1ce>
		__ticks = 1;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	9e 83       	std	Y+6, r25	; 0x06
    1a0a:	8d 83       	std	Y+5, r24	; 0x05
    1a0c:	3f c0       	rjmp	.+126    	; 0x1a8c <Keypad_u8GetPressedKey+0x24c>
	else if (__tmp > 65535)
    1a0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a10:	78 85       	ldd	r23, Y+8	; 0x08
    1a12:	89 85       	ldd	r24, Y+9	; 0x09
    1a14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	3f ef       	ldi	r19, 0xFF	; 255
    1a1a:	4f e7       	ldi	r20, 0x7F	; 127
    1a1c:	57 e4       	ldi	r21, 0x47	; 71
    1a1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a22:	18 16       	cp	r1, r24
    1a24:	4c f5       	brge	.+82     	; 0x1a78 <Keypad_u8GetPressedKey+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e2       	ldi	r20, 0x20	; 32
    1a34:	51 e4       	ldi	r21, 0x41	; 65
    1a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	bc 01       	movw	r22, r24
    1a40:	cd 01       	movw	r24, r26
    1a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	9e 83       	std	Y+6, r25	; 0x06
    1a4c:	8d 83       	std	Y+5, r24	; 0x05
    1a4e:	0f c0       	rjmp	.+30     	; 0x1a6e <Keypad_u8GetPressedKey+0x22e>
    1a50:	80 e9       	ldi	r24, 0x90	; 144
    1a52:	91 e0       	ldi	r25, 0x01	; 1
    1a54:	9c 83       	std	Y+4, r25	; 0x04
    1a56:	8b 83       	std	Y+3, r24	; 0x03
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <Keypad_u8GetPressedKey+0x21c>
    1a60:	9c 83       	std	Y+4, r25	; 0x04
    1a62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a64:	8d 81       	ldd	r24, Y+5	; 0x05
    1a66:	9e 81       	ldd	r25, Y+6	; 0x06
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	9e 83       	std	Y+6, r25	; 0x06
    1a6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a70:	9e 81       	ldd	r25, Y+6	; 0x06
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	69 f7       	brne	.-38     	; 0x1a50 <Keypad_u8GetPressedKey+0x210>
    1a76:	32 c0       	rjmp	.+100    	; 0x1adc <Keypad_u8GetPressedKey+0x29c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a78:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7a:	78 85       	ldd	r23, Y+8	; 0x08
    1a7c:	89 85       	ldd	r24, Y+9	; 0x09
    1a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	9e 83       	std	Y+6, r25	; 0x06
    1a8a:	8d 83       	std	Y+5, r24	; 0x05
    1a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a90:	9a 83       	std	Y+2, r25	; 0x02
    1a92:	89 83       	std	Y+1, r24	; 0x01
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	9a 81       	ldd	r25, Y+2	; 0x02
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	f1 f7       	brne	.-4      	; 0x1a98 <Keypad_u8GetPressedKey+0x258>
    1a9c:	9a 83       	std	Y+2, r25	; 0x02
    1a9e:	89 83       	std	Y+1, r24	; 0x01
    1aa0:	1d c0       	rjmp	.+58     	; 0x1adc <Keypad_u8GetPressedKey+0x29c>
                {
                	_delay_ms(40);

                	while(LOW ==  DIO_GetPinValue(KEYPAD_COL_PORT,LOC_u8COL) )

                    LOC_u8Data = Keypad_u8Buttons [ROW_1 - LOC_u8Row ][COL_1 - LOC_u8COL] ;
    1aa2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	85 e0       	ldi	r24, 0x05	; 5
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	ac 01       	movw	r20, r24
    1aae:	42 1b       	sub	r20, r18
    1ab0:	53 0b       	sbc	r21, r19
    1ab2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	87 e0       	ldi	r24, 0x07	; 7
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	bc 01       	movw	r22, r24
    1abe:	62 1b       	sub	r22, r18
    1ac0:	73 0b       	sbc	r23, r19
    1ac2:	9b 01       	movw	r18, r22
    1ac4:	ca 01       	movw	r24, r20
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	82 0f       	add	r24, r18
    1ad0:	93 1f       	adc	r25, r19
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	e8 59       	subi	r30, 0x98	; 152
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	80 81       	ld	r24, Z
    1ada:	8d 8f       	std	Y+29, r24	; 0x1d

                else if (DIO_GetPinValue(KEYPAD_COL_PORT,LOC_u8COL) == LOW)
                {
                	_delay_ms(40);

                	while(LOW ==  DIO_GetPinValue(KEYPAD_COL_PORT,LOC_u8COL) )
    1adc:	83 e0       	ldi	r24, 0x03	; 3
    1ade:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1ae0:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <DIO_GetPinValue>
    1ae4:	88 23       	and	r24, r24
    1ae6:	e9 f2       	breq	.-70     	; 0x1aa2 <Keypad_u8GetPressedKey+0x262>

                    LOC_u8Data = Keypad_u8Buttons [ROW_1 - LOC_u8Row ][COL_1 - LOC_u8COL] ;
                   LOC_u8Flag = 1;
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	88 a3       	std	Y+32, r24	; 0x20
    1aec:	07 c0       	rjmp	.+14     	; 0x1afc <Keypad_u8GetPressedKey+0x2bc>
	for(LOC_u8Row = 0 + ROW_1 ;LOC_u8Row > ROW_4 - 1 ;LOC_u8Row--)
	{
		DIO_SetPinDirection(KEYPAD_ROW_PORT,LOC_u8Row,OUTPUT);
		DIO_SetPinValue(KEYPAD_ROW_PORT,LOC_u8Row,LOW);

		for (LOC_u8COL = 0 + COL_1 ;LOC_u8COL > COL_4 - 1 ;LOC_u8COL--)
    1aee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1af0:	81 50       	subi	r24, 0x01	; 1
    1af2:	8e 8f       	std	Y+30, r24	; 0x1e
    1af4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1af6:	83 30       	cpi	r24, 0x03	; 3
    1af8:	08 f0       	brcs	.+2      	; 0x1afc <Keypad_u8GetPressedKey+0x2bc>
    1afa:	bf ce       	rjmp	.-642    	; 0x187a <Keypad_u8GetPressedKey+0x3a>
                   LOC_u8Flag = 1;
                	break;
                }

		}
		DIO_SetPinDirection(KEYPAD_ROW_PORT,LOC_u8Row,INPUT);
    1afc:	82 e0       	ldi	r24, 0x02	; 2
    1afe:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b00:	40 e0       	ldi	r20, 0x00	; 0
    1b02:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
             if (LOC_u8Flag == 1)break;
    1b06:	88 a1       	ldd	r24, Y+32	; 0x20
    1b08:	81 30       	cpi	r24, 0x01	; 1
    1b0a:	39 f0       	breq	.+14     	; 0x1b1a <Keypad_u8GetPressedKey+0x2da>
	u8 LOC_u8Row;
	u8 LOC_u8COL;

	u8 LOC_u8Data = NO_DATA ;

	for(LOC_u8Row = 0 + ROW_1 ;LOC_u8Row > ROW_4 - 1 ;LOC_u8Row--)
    1b0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b0e:	81 50       	subi	r24, 0x01	; 1
    1b10:	8f 8f       	std	Y+31, r24	; 0x1f
    1b12:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b14:	82 30       	cpi	r24, 0x02	; 2
    1b16:	08 f0       	brcs	.+2      	; 0x1b1a <Keypad_u8GetPressedKey+0x2da>
    1b18:	a3 ce       	rjmp	.-698    	; 0x1860 <Keypad_u8GetPressedKey+0x20>

		}
		DIO_SetPinDirection(KEYPAD_ROW_PORT,LOC_u8Row,INPUT);
             if (LOC_u8Flag == 1)break;
	}
	return LOC_u8Data;
    1b1a:	8d 8d       	ldd	r24, Y+29	; 0x1d

}
    1b1c:	a0 96       	adiw	r28, 0x20	; 32
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <LCD_VoidInit>:
#include "LCD_Interface.h"

u8 G_u8KeyPadFlag = 0;
void LCD_VoidInit (void)
{
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    1b36:	e8 97       	sbiw	r28, 0x38	; 56
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	a8 e4       	ldi	r26, 0x48	; 72
    1b48:	b2 e4       	ldi	r27, 0x42	; 66
    1b4a:	8d ab       	std	Y+53, r24	; 0x35
    1b4c:	9e ab       	std	Y+54, r25	; 0x36
    1b4e:	af ab       	std	Y+55, r26	; 0x37
    1b50:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b52:	6d a9       	ldd	r22, Y+53	; 0x35
    1b54:	7e a9       	ldd	r23, Y+54	; 0x36
    1b56:	8f a9       	ldd	r24, Y+55	; 0x37
    1b58:	98 ad       	ldd	r25, Y+56	; 0x38
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	4a e7       	ldi	r20, 0x7A	; 122
    1b60:	55 e4       	ldi	r21, 0x45	; 69
    1b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	89 ab       	std	Y+49, r24	; 0x31
    1b6c:	9a ab       	std	Y+50, r25	; 0x32
    1b6e:	ab ab       	std	Y+51, r26	; 0x33
    1b70:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b72:	69 a9       	ldd	r22, Y+49	; 0x31
    1b74:	7a a9       	ldd	r23, Y+50	; 0x32
    1b76:	8b a9       	ldd	r24, Y+51	; 0x33
    1b78:	9c a9       	ldd	r25, Y+52	; 0x34
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e8       	ldi	r20, 0x80	; 128
    1b80:	5f e3       	ldi	r21, 0x3F	; 63
    1b82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b86:	88 23       	and	r24, r24
    1b88:	2c f4       	brge	.+10     	; 0x1b94 <LCD_VoidInit+0x66>
		__ticks = 1;
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	98 ab       	std	Y+48, r25	; 0x30
    1b90:	8f a7       	std	Y+47, r24	; 0x2f
    1b92:	3f c0       	rjmp	.+126    	; 0x1c12 <LCD_VoidInit+0xe4>
	else if (__tmp > 65535)
    1b94:	69 a9       	ldd	r22, Y+49	; 0x31
    1b96:	7a a9       	ldd	r23, Y+50	; 0x32
    1b98:	8b a9       	ldd	r24, Y+51	; 0x33
    1b9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ba0:	4f e7       	ldi	r20, 0x7F	; 127
    1ba2:	57 e4       	ldi	r21, 0x47	; 71
    1ba4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba8:	18 16       	cp	r1, r24
    1baa:	4c f5       	brge	.+82     	; 0x1bfe <LCD_VoidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bac:	6d a9       	ldd	r22, Y+53	; 0x35
    1bae:	7e a9       	ldd	r23, Y+54	; 0x36
    1bb0:	8f a9       	ldd	r24, Y+55	; 0x37
    1bb2:	98 ad       	ldd	r25, Y+56	; 0x38
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e2       	ldi	r20, 0x20	; 32
    1bba:	51 e4       	ldi	r21, 0x41	; 65
    1bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	bc 01       	movw	r22, r24
    1bc6:	cd 01       	movw	r24, r26
    1bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	98 ab       	std	Y+48, r25	; 0x30
    1bd2:	8f a7       	std	Y+47, r24	; 0x2f
    1bd4:	0f c0       	rjmp	.+30     	; 0x1bf4 <LCD_VoidInit+0xc6>
    1bd6:	80 e9       	ldi	r24, 0x90	; 144
    1bd8:	91 e0       	ldi	r25, 0x01	; 1
    1bda:	9e a7       	std	Y+46, r25	; 0x2e
    1bdc:	8d a7       	std	Y+45, r24	; 0x2d
    1bde:	8d a5       	ldd	r24, Y+45	; 0x2d
    1be0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <LCD_VoidInit+0xb4>
    1be6:	9e a7       	std	Y+46, r25	; 0x2e
    1be8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bea:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bec:	98 a9       	ldd	r25, Y+48	; 0x30
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	98 ab       	std	Y+48, r25	; 0x30
    1bf2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bf6:	98 a9       	ldd	r25, Y+48	; 0x30
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	69 f7       	brne	.-38     	; 0x1bd6 <LCD_VoidInit+0xa8>
    1bfc:	14 c0       	rjmp	.+40     	; 0x1c26 <LCD_VoidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfe:	69 a9       	ldd	r22, Y+49	; 0x31
    1c00:	7a a9       	ldd	r23, Y+50	; 0x32
    1c02:	8b a9       	ldd	r24, Y+51	; 0x33
    1c04:	9c a9       	ldd	r25, Y+52	; 0x34
    1c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	98 ab       	std	Y+48, r25	; 0x30
    1c10:	8f a7       	std	Y+47, r24	; 0x2f
    1c12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c14:	98 a9       	ldd	r25, Y+48	; 0x30
    1c16:	9c a7       	std	Y+44, r25	; 0x2c
    1c18:	8b a7       	std	Y+43, r24	; 0x2b
    1c1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <LCD_VoidInit+0xf0>
    1c22:	9c a7       	std	Y+44, r25	; 0x2c
    1c24:	8b a7       	std	Y+43, r24	; 0x2b
	 _delay_ms(50);
DIO_SetPinDirection(LCD_CONTROL_PORT,EN,OUTPUT);
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	62 e0       	ldi	r22, 0x02	; 2
    1c2a:	41 e0       	ldi	r20, 0x01	; 1
    1c2c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
DIO_SetPinDirection(LCD_CONTROL_PORT,RS,OUTPUT);
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	63 e0       	ldi	r22, 0x03	; 3
    1c34:	41 e0       	ldi	r20, 0x01	; 1
    1c36:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>

DIO_SetPinValue(LCD_DATA_PORT,RS,LOW); //RS
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	63 e0       	ldi	r22, 0x03	; 3
    1c3e:	40 e0       	ldi	r20, 0x00	; 0
    1c40:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>

DIO_SetPinDirection(LCD_DATA_PORT,D4,OUTPUT);
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	41 e0       	ldi	r20, 0x01	; 1
    1c4a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
DIO_SetPinDirection(LCD_DATA_PORT,D5,OUTPUT);
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	61 e0       	ldi	r22, 0x01	; 1
    1c52:	41 e0       	ldi	r20, 0x01	; 1
    1c54:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
DIO_SetPinDirection(LCD_DATA_PORT,D6,OUTPUT);
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	62 e0       	ldi	r22, 0x02	; 2
    1c5c:	41 e0       	ldi	r20, 0x01	; 1
    1c5e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
DIO_SetPinDirection(LCD_DATA_PORT,D7,OUTPUT);
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	64 e0       	ldi	r22, 0x04	; 4
    1c66:	41 e0       	ldi	r20, 0x01	; 1
    1c68:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>

LCD_VoidWriteCMD (0x30);
    1c6c:	80 e3       	ldi	r24, 0x30	; 48
    1c6e:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <LCD_VoidWriteCMD>
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	a0 e2       	ldi	r26, 0x20	; 32
    1c78:	b1 e4       	ldi	r27, 0x41	; 65
    1c7a:	8f a3       	std	Y+39, r24	; 0x27
    1c7c:	98 a7       	std	Y+40, r25	; 0x28
    1c7e:	a9 a7       	std	Y+41, r26	; 0x29
    1c80:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c82:	6f a1       	ldd	r22, Y+39	; 0x27
    1c84:	78 a5       	ldd	r23, Y+40	; 0x28
    1c86:	89 a5       	ldd	r24, Y+41	; 0x29
    1c88:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	4a e7       	ldi	r20, 0x7A	; 122
    1c90:	55 e4       	ldi	r21, 0x45	; 69
    1c92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	8b a3       	std	Y+35, r24	; 0x23
    1c9c:	9c a3       	std	Y+36, r25	; 0x24
    1c9e:	ad a3       	std	Y+37, r26	; 0x25
    1ca0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ca2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ca4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ca6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ca8:	9e a1       	ldd	r25, Y+38	; 0x26
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	40 e8       	ldi	r20, 0x80	; 128
    1cb0:	5f e3       	ldi	r21, 0x3F	; 63
    1cb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cb6:	88 23       	and	r24, r24
    1cb8:	2c f4       	brge	.+10     	; 0x1cc4 <LCD_VoidInit+0x196>
		__ticks = 1;
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	9a a3       	std	Y+34, r25	; 0x22
    1cc0:	89 a3       	std	Y+33, r24	; 0x21
    1cc2:	3f c0       	rjmp	.+126    	; 0x1d42 <LCD_VoidInit+0x214>
	else if (__tmp > 65535)
    1cc4:	6b a1       	ldd	r22, Y+35	; 0x23
    1cc6:	7c a1       	ldd	r23, Y+36	; 0x24
    1cc8:	8d a1       	ldd	r24, Y+37	; 0x25
    1cca:	9e a1       	ldd	r25, Y+38	; 0x26
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	3f ef       	ldi	r19, 0xFF	; 255
    1cd0:	4f e7       	ldi	r20, 0x7F	; 127
    1cd2:	57 e4       	ldi	r21, 0x47	; 71
    1cd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cd8:	18 16       	cp	r1, r24
    1cda:	4c f5       	brge	.+82     	; 0x1d2e <LCD_VoidInit+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cdc:	6f a1       	ldd	r22, Y+39	; 0x27
    1cde:	78 a5       	ldd	r23, Y+40	; 0x28
    1ce0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ce2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	40 e2       	ldi	r20, 0x20	; 32
    1cea:	51 e4       	ldi	r21, 0x41	; 65
    1cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	bc 01       	movw	r22, r24
    1cf6:	cd 01       	movw	r24, r26
    1cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	9a a3       	std	Y+34, r25	; 0x22
    1d02:	89 a3       	std	Y+33, r24	; 0x21
    1d04:	0f c0       	rjmp	.+30     	; 0x1d24 <LCD_VoidInit+0x1f6>
    1d06:	80 e9       	ldi	r24, 0x90	; 144
    1d08:	91 e0       	ldi	r25, 0x01	; 1
    1d0a:	98 a3       	std	Y+32, r25	; 0x20
    1d0c:	8f 8f       	std	Y+31, r24	; 0x1f
    1d0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d10:	98 a1       	ldd	r25, Y+32	; 0x20
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	f1 f7       	brne	.-4      	; 0x1d12 <LCD_VoidInit+0x1e4>
    1d16:	98 a3       	std	Y+32, r25	; 0x20
    1d18:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d1c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	9a a3       	std	Y+34, r25	; 0x22
    1d22:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d24:	89 a1       	ldd	r24, Y+33	; 0x21
    1d26:	9a a1       	ldd	r25, Y+34	; 0x22
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	69 f7       	brne	.-38     	; 0x1d06 <LCD_VoidInit+0x1d8>
    1d2c:	14 c0       	rjmp	.+40     	; 0x1d56 <LCD_VoidInit+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d30:	7c a1       	ldd	r23, Y+36	; 0x24
    1d32:	8d a1       	ldd	r24, Y+37	; 0x25
    1d34:	9e a1       	ldd	r25, Y+38	; 0x26
    1d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	9a a3       	std	Y+34, r25	; 0x22
    1d40:	89 a3       	std	Y+33, r24	; 0x21
    1d42:	89 a1       	ldd	r24, Y+33	; 0x21
    1d44:	9a a1       	ldd	r25, Y+34	; 0x22
    1d46:	9e 8f       	std	Y+30, r25	; 0x1e
    1d48:	8d 8f       	std	Y+29, r24	; 0x1d
    1d4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d4c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	f1 f7       	brne	.-4      	; 0x1d4e <LCD_VoidInit+0x220>
    1d52:	9e 8f       	std	Y+30, r25	; 0x1e
    1d54:	8d 8f       	std	Y+29, r24	; 0x1d
 _delay_ms(10);
LCD_VoidWriteCMD (0x30);
    1d56:	80 e3       	ldi	r24, 0x30	; 48
    1d58:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <LCD_VoidWriteCMD>
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	a0 e2       	ldi	r26, 0x20	; 32
    1d62:	b1 e4       	ldi	r27, 0x41	; 65
    1d64:	89 8f       	std	Y+25, r24	; 0x19
    1d66:	9a 8f       	std	Y+26, r25	; 0x1a
    1d68:	ab 8f       	std	Y+27, r26	; 0x1b
    1d6a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d6c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	4a e7       	ldi	r20, 0x7A	; 122
    1d7a:	55 e4       	ldi	r21, 0x45	; 69
    1d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	8d 8b       	std	Y+21, r24	; 0x15
    1d86:	9e 8b       	std	Y+22, r25	; 0x16
    1d88:	af 8b       	std	Y+23, r26	; 0x17
    1d8a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d90:	8f 89       	ldd	r24, Y+23	; 0x17
    1d92:	98 8d       	ldd	r25, Y+24	; 0x18
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e8       	ldi	r20, 0x80	; 128
    1d9a:	5f e3       	ldi	r21, 0x3F	; 63
    1d9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da0:	88 23       	and	r24, r24
    1da2:	2c f4       	brge	.+10     	; 0x1dae <LCD_VoidInit+0x280>
		__ticks = 1;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	9c 8b       	std	Y+20, r25	; 0x14
    1daa:	8b 8b       	std	Y+19, r24	; 0x13
    1dac:	3f c0       	rjmp	.+126    	; 0x1e2c <LCD_VoidInit+0x2fe>
	else if (__tmp > 65535)
    1dae:	6d 89       	ldd	r22, Y+21	; 0x15
    1db0:	7e 89       	ldd	r23, Y+22	; 0x16
    1db2:	8f 89       	ldd	r24, Y+23	; 0x17
    1db4:	98 8d       	ldd	r25, Y+24	; 0x18
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	3f ef       	ldi	r19, 0xFF	; 255
    1dba:	4f e7       	ldi	r20, 0x7F	; 127
    1dbc:	57 e4       	ldi	r21, 0x47	; 71
    1dbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc2:	18 16       	cp	r1, r24
    1dc4:	4c f5       	brge	.+82     	; 0x1e18 <LCD_VoidInit+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc6:	69 8d       	ldd	r22, Y+25	; 0x19
    1dc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 e2       	ldi	r20, 0x20	; 32
    1dd4:	51 e4       	ldi	r21, 0x41	; 65
    1dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	bc 01       	movw	r22, r24
    1de0:	cd 01       	movw	r24, r26
    1de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	9c 8b       	std	Y+20, r25	; 0x14
    1dec:	8b 8b       	std	Y+19, r24	; 0x13
    1dee:	0f c0       	rjmp	.+30     	; 0x1e0e <LCD_VoidInit+0x2e0>
    1df0:	80 e9       	ldi	r24, 0x90	; 144
    1df2:	91 e0       	ldi	r25, 0x01	; 1
    1df4:	9a 8b       	std	Y+18, r25	; 0x12
    1df6:	89 8b       	std	Y+17, r24	; 0x11
    1df8:	89 89       	ldd	r24, Y+17	; 0x11
    1dfa:	9a 89       	ldd	r25, Y+18	; 0x12
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <LCD_VoidInit+0x2ce>
    1e00:	9a 8b       	std	Y+18, r25	; 0x12
    1e02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e04:	8b 89       	ldd	r24, Y+19	; 0x13
    1e06:	9c 89       	ldd	r25, Y+20	; 0x14
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	9c 8b       	std	Y+20, r25	; 0x14
    1e0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e10:	9c 89       	ldd	r25, Y+20	; 0x14
    1e12:	00 97       	sbiw	r24, 0x00	; 0
    1e14:	69 f7       	brne	.-38     	; 0x1df0 <LCD_VoidInit+0x2c2>
    1e16:	14 c0       	rjmp	.+40     	; 0x1e40 <LCD_VoidInit+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e18:	6d 89       	ldd	r22, Y+21	; 0x15
    1e1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	9c 8b       	std	Y+20, r25	; 0x14
    1e2a:	8b 8b       	std	Y+19, r24	; 0x13
    1e2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e30:	98 8b       	std	Y+16, r25	; 0x10
    1e32:	8f 87       	std	Y+15, r24	; 0x0f
    1e34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e36:	98 89       	ldd	r25, Y+16	; 0x10
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <LCD_VoidInit+0x30a>
    1e3c:	98 8b       	std	Y+16, r25	; 0x10
    1e3e:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(10);
LCD_VoidWriteCMD (0x30);
    1e40:	80 e3       	ldi	r24, 0x30	; 48
    1e42:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <LCD_VoidWriteCMD>
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	a0 e2       	ldi	r26, 0x20	; 32
    1e4c:	b1 e4       	ldi	r27, 0x41	; 65
    1e4e:	8b 87       	std	Y+11, r24	; 0x0b
    1e50:	9c 87       	std	Y+12, r25	; 0x0c
    1e52:	ad 87       	std	Y+13, r26	; 0x0d
    1e54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	4a e7       	ldi	r20, 0x7A	; 122
    1e64:	55 e4       	ldi	r21, 0x45	; 69
    1e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	8f 83       	std	Y+7, r24	; 0x07
    1e70:	98 87       	std	Y+8, r25	; 0x08
    1e72:	a9 87       	std	Y+9, r26	; 0x09
    1e74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e76:	6f 81       	ldd	r22, Y+7	; 0x07
    1e78:	78 85       	ldd	r23, Y+8	; 0x08
    1e7a:	89 85       	ldd	r24, Y+9	; 0x09
    1e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e8       	ldi	r20, 0x80	; 128
    1e84:	5f e3       	ldi	r21, 0x3F	; 63
    1e86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e8a:	88 23       	and	r24, r24
    1e8c:	2c f4       	brge	.+10     	; 0x1e98 <LCD_VoidInit+0x36a>
		__ticks = 1;
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	9e 83       	std	Y+6, r25	; 0x06
    1e94:	8d 83       	std	Y+5, r24	; 0x05
    1e96:	3f c0       	rjmp	.+126    	; 0x1f16 <LCD_VoidInit+0x3e8>
	else if (__tmp > 65535)
    1e98:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9a:	78 85       	ldd	r23, Y+8	; 0x08
    1e9c:	89 85       	ldd	r24, Y+9	; 0x09
    1e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	3f ef       	ldi	r19, 0xFF	; 255
    1ea4:	4f e7       	ldi	r20, 0x7F	; 127
    1ea6:	57 e4       	ldi	r21, 0x47	; 71
    1ea8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eac:	18 16       	cp	r1, r24
    1eae:	4c f5       	brge	.+82     	; 0x1f02 <LCD_VoidInit+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e2       	ldi	r20, 0x20	; 32
    1ebe:	51 e4       	ldi	r21, 0x41	; 65
    1ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	bc 01       	movw	r22, r24
    1eca:	cd 01       	movw	r24, r26
    1ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	9e 83       	std	Y+6, r25	; 0x06
    1ed6:	8d 83       	std	Y+5, r24	; 0x05
    1ed8:	0f c0       	rjmp	.+30     	; 0x1ef8 <LCD_VoidInit+0x3ca>
    1eda:	80 e9       	ldi	r24, 0x90	; 144
    1edc:	91 e0       	ldi	r25, 0x01	; 1
    1ede:	9c 83       	std	Y+4, r25	; 0x04
    1ee0:	8b 83       	std	Y+3, r24	; 0x03
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	f1 f7       	brne	.-4      	; 0x1ee6 <LCD_VoidInit+0x3b8>
    1eea:	9c 83       	std	Y+4, r25	; 0x04
    1eec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	9e 83       	std	Y+6, r25	; 0x06
    1ef6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    1efa:	9e 81       	ldd	r25, Y+6	; 0x06
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	69 f7       	brne	.-38     	; 0x1eda <LCD_VoidInit+0x3ac>
    1f00:	14 c0       	rjmp	.+40     	; 0x1f2a <LCD_VoidInit+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f02:	6f 81       	ldd	r22, Y+7	; 0x07
    1f04:	78 85       	ldd	r23, Y+8	; 0x08
    1f06:	89 85       	ldd	r24, Y+9	; 0x09
    1f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	9e 83       	std	Y+6, r25	; 0x06
    1f14:	8d 83       	std	Y+5, r24	; 0x05
    1f16:	8d 81       	ldd	r24, Y+5	; 0x05
    1f18:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1a:	9a 83       	std	Y+2, r25	; 0x02
    1f1c:	89 83       	std	Y+1, r24	; 0x01
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	9a 81       	ldd	r25, Y+2	; 0x02
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	f1 f7       	brne	.-4      	; 0x1f22 <LCD_VoidInit+0x3f4>
    1f26:	9a 83       	std	Y+2, r25	; 0x02
    1f28:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(10);
LCD_VoidWriteCMD (LCD_FOUR_BITS);
    1f2a:	80 e2       	ldi	r24, 0x20	; 32
    1f2c:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <LCD_VoidWriteCMD>

G_u8KeyPadFlag = 1;
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	80 93 7e 00 	sts	0x007E, r24

LCD_VoidWriteCMD (LCD_FunctionSet_2Line);
    1f36:	88 e2       	ldi	r24, 0x28	; 40
    1f38:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <LCD_VoidWriteCMD>
LCD_VoidWriteCMD (LCD_DisplayOn_CursorOff);
    1f3c:	8c e0       	ldi	r24, 0x0C	; 12
    1f3e:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <LCD_VoidWriteCMD>
LCD_VoidWriteCMD (LCD_Clear);
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <LCD_VoidWriteCMD>
LCD_VoidWriteCMD (LCD_EntryMode);
    1f48:	86 e0       	ldi	r24, 0x06	; 6
    1f4a:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <LCD_VoidWriteCMD>

}
    1f4e:	e8 96       	adiw	r28, 0x38	; 56
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	cd bf       	out	0x3d, r28	; 61
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	08 95       	ret

00001f60 <LCD_VoidWriteCMD>:

void LCD_VoidWriteCMD (u8 cmd)
{
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	e9 97       	sbiw	r28, 0x39	; 57
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	89 af       	std	Y+57, r24	; 0x39



	DIO_SetPinValue(LCD_DATA_PORT,D4,GET_BIT(cmd,4));
    1f76:	89 ad       	ldd	r24, Y+57	; 0x39
    1f78:	82 95       	swap	r24
    1f7a:	8f 70       	andi	r24, 0x0F	; 15
    1f7c:	98 2f       	mov	r25, r24
    1f7e:	91 70       	andi	r25, 0x01	; 1
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	60 e0       	ldi	r22, 0x00	; 0
    1f84:	49 2f       	mov	r20, r25
    1f86:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_DATA_PORT,D5,GET_BIT(cmd,5));
    1f8a:	89 ad       	ldd	r24, Y+57	; 0x39
    1f8c:	82 95       	swap	r24
    1f8e:	86 95       	lsr	r24
    1f90:	87 70       	andi	r24, 0x07	; 7
    1f92:	98 2f       	mov	r25, r24
    1f94:	91 70       	andi	r25, 0x01	; 1
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	61 e0       	ldi	r22, 0x01	; 1
    1f9a:	49 2f       	mov	r20, r25
    1f9c:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_DATA_PORT,D6,GET_BIT(cmd,6));
    1fa0:	89 ad       	ldd	r24, Y+57	; 0x39
    1fa2:	82 95       	swap	r24
    1fa4:	86 95       	lsr	r24
    1fa6:	86 95       	lsr	r24
    1fa8:	83 70       	andi	r24, 0x03	; 3
    1faa:	98 2f       	mov	r25, r24
    1fac:	91 70       	andi	r25, 0x01	; 1
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	62 e0       	ldi	r22, 0x02	; 2
    1fb2:	49 2f       	mov	r20, r25
    1fb4:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_DATA_PORT,D7,GET_BIT(cmd,7));
    1fb8:	89 ad       	ldd	r24, Y+57	; 0x39
    1fba:	98 2f       	mov	r25, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	99 27       	eor	r25, r25
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	64 e0       	ldi	r22, 0x04	; 4
    1fc6:	49 2f       	mov	r20, r25
    1fc8:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>

	DIO_SetPinValue(LCD_CONTROL_PORT,EN,HIGH); //EN
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	62 e0       	ldi	r22, 0x02	; 2
    1fd0:	41 e0       	ldi	r20, 0x01	; 1
    1fd2:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	a0 e0       	ldi	r26, 0x00	; 0
    1fdc:	b0 e4       	ldi	r27, 0x40	; 64
    1fde:	8d ab       	std	Y+53, r24	; 0x35
    1fe0:	9e ab       	std	Y+54, r25	; 0x36
    1fe2:	af ab       	std	Y+55, r26	; 0x37
    1fe4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe6:	6d a9       	ldd	r22, Y+53	; 0x35
    1fe8:	7e a9       	ldd	r23, Y+54	; 0x36
    1fea:	8f a9       	ldd	r24, Y+55	; 0x37
    1fec:	98 ad       	ldd	r25, Y+56	; 0x38
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	4a e7       	ldi	r20, 0x7A	; 122
    1ff4:	55 e4       	ldi	r21, 0x45	; 69
    1ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	89 ab       	std	Y+49, r24	; 0x31
    2000:	9a ab       	std	Y+50, r25	; 0x32
    2002:	ab ab       	std	Y+51, r26	; 0x33
    2004:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2006:	69 a9       	ldd	r22, Y+49	; 0x31
    2008:	7a a9       	ldd	r23, Y+50	; 0x32
    200a:	8b a9       	ldd	r24, Y+51	; 0x33
    200c:	9c a9       	ldd	r25, Y+52	; 0x34
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e8       	ldi	r20, 0x80	; 128
    2014:	5f e3       	ldi	r21, 0x3F	; 63
    2016:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    201a:	88 23       	and	r24, r24
    201c:	2c f4       	brge	.+10     	; 0x2028 <LCD_VoidWriteCMD+0xc8>
		__ticks = 1;
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	98 ab       	std	Y+48, r25	; 0x30
    2024:	8f a7       	std	Y+47, r24	; 0x2f
    2026:	3f c0       	rjmp	.+126    	; 0x20a6 <LCD_VoidWriteCMD+0x146>
	else if (__tmp > 65535)
    2028:	69 a9       	ldd	r22, Y+49	; 0x31
    202a:	7a a9       	ldd	r23, Y+50	; 0x32
    202c:	8b a9       	ldd	r24, Y+51	; 0x33
    202e:	9c a9       	ldd	r25, Y+52	; 0x34
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	3f ef       	ldi	r19, 0xFF	; 255
    2034:	4f e7       	ldi	r20, 0x7F	; 127
    2036:	57 e4       	ldi	r21, 0x47	; 71
    2038:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    203c:	18 16       	cp	r1, r24
    203e:	4c f5       	brge	.+82     	; 0x2092 <LCD_VoidWriteCMD+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2040:	6d a9       	ldd	r22, Y+53	; 0x35
    2042:	7e a9       	ldd	r23, Y+54	; 0x36
    2044:	8f a9       	ldd	r24, Y+55	; 0x37
    2046:	98 ad       	ldd	r25, Y+56	; 0x38
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	40 e2       	ldi	r20, 0x20	; 32
    204e:	51 e4       	ldi	r21, 0x41	; 65
    2050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	bc 01       	movw	r22, r24
    205a:	cd 01       	movw	r24, r26
    205c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	98 ab       	std	Y+48, r25	; 0x30
    2066:	8f a7       	std	Y+47, r24	; 0x2f
    2068:	0f c0       	rjmp	.+30     	; 0x2088 <LCD_VoidWriteCMD+0x128>
    206a:	80 e9       	ldi	r24, 0x90	; 144
    206c:	91 e0       	ldi	r25, 0x01	; 1
    206e:	9e a7       	std	Y+46, r25	; 0x2e
    2070:	8d a7       	std	Y+45, r24	; 0x2d
    2072:	8d a5       	ldd	r24, Y+45	; 0x2d
    2074:	9e a5       	ldd	r25, Y+46	; 0x2e
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	f1 f7       	brne	.-4      	; 0x2076 <LCD_VoidWriteCMD+0x116>
    207a:	9e a7       	std	Y+46, r25	; 0x2e
    207c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2080:	98 a9       	ldd	r25, Y+48	; 0x30
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	98 ab       	std	Y+48, r25	; 0x30
    2086:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2088:	8f a5       	ldd	r24, Y+47	; 0x2f
    208a:	98 a9       	ldd	r25, Y+48	; 0x30
    208c:	00 97       	sbiw	r24, 0x00	; 0
    208e:	69 f7       	brne	.-38     	; 0x206a <LCD_VoidWriteCMD+0x10a>
    2090:	14 c0       	rjmp	.+40     	; 0x20ba <LCD_VoidWriteCMD+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2092:	69 a9       	ldd	r22, Y+49	; 0x31
    2094:	7a a9       	ldd	r23, Y+50	; 0x32
    2096:	8b a9       	ldd	r24, Y+51	; 0x33
    2098:	9c a9       	ldd	r25, Y+52	; 0x34
    209a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	98 ab       	std	Y+48, r25	; 0x30
    20a4:	8f a7       	std	Y+47, r24	; 0x2f
    20a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20a8:	98 a9       	ldd	r25, Y+48	; 0x30
    20aa:	9c a7       	std	Y+44, r25	; 0x2c
    20ac:	8b a7       	std	Y+43, r24	; 0x2b
    20ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    20b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	f1 f7       	brne	.-4      	; 0x20b2 <LCD_VoidWriteCMD+0x152>
    20b6:	9c a7       	std	Y+44, r25	; 0x2c
    20b8:	8b a7       	std	Y+43, r24	; 0x2b
     _delay_ms(2);
	DIO_SetPinValue(LCD_CONTROL_PORT,EN,LOW); //EN
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	62 e0       	ldi	r22, 0x02	; 2
    20be:	40 e0       	ldi	r20, 0x00	; 0
    20c0:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	a0 e8       	ldi	r26, 0x80	; 128
    20ca:	bf e3       	ldi	r27, 0x3F	; 63
    20cc:	8f a3       	std	Y+39, r24	; 0x27
    20ce:	98 a7       	std	Y+40, r25	; 0x28
    20d0:	a9 a7       	std	Y+41, r26	; 0x29
    20d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d4:	6f a1       	ldd	r22, Y+39	; 0x27
    20d6:	78 a5       	ldd	r23, Y+40	; 0x28
    20d8:	89 a5       	ldd	r24, Y+41	; 0x29
    20da:	9a a5       	ldd	r25, Y+42	; 0x2a
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	4a e7       	ldi	r20, 0x7A	; 122
    20e2:	55 e4       	ldi	r21, 0x45	; 69
    20e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	8b a3       	std	Y+35, r24	; 0x23
    20ee:	9c a3       	std	Y+36, r25	; 0x24
    20f0:	ad a3       	std	Y+37, r26	; 0x25
    20f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20f4:	6b a1       	ldd	r22, Y+35	; 0x23
    20f6:	7c a1       	ldd	r23, Y+36	; 0x24
    20f8:	8d a1       	ldd	r24, Y+37	; 0x25
    20fa:	9e a1       	ldd	r25, Y+38	; 0x26
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	40 e8       	ldi	r20, 0x80	; 128
    2102:	5f e3       	ldi	r21, 0x3F	; 63
    2104:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2108:	88 23       	and	r24, r24
    210a:	2c f4       	brge	.+10     	; 0x2116 <LCD_VoidWriteCMD+0x1b6>
		__ticks = 1;
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	9a a3       	std	Y+34, r25	; 0x22
    2112:	89 a3       	std	Y+33, r24	; 0x21
    2114:	3f c0       	rjmp	.+126    	; 0x2194 <LCD_VoidWriteCMD+0x234>
	else if (__tmp > 65535)
    2116:	6b a1       	ldd	r22, Y+35	; 0x23
    2118:	7c a1       	ldd	r23, Y+36	; 0x24
    211a:	8d a1       	ldd	r24, Y+37	; 0x25
    211c:	9e a1       	ldd	r25, Y+38	; 0x26
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	3f ef       	ldi	r19, 0xFF	; 255
    2122:	4f e7       	ldi	r20, 0x7F	; 127
    2124:	57 e4       	ldi	r21, 0x47	; 71
    2126:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    212a:	18 16       	cp	r1, r24
    212c:	4c f5       	brge	.+82     	; 0x2180 <LCD_VoidWriteCMD+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    212e:	6f a1       	ldd	r22, Y+39	; 0x27
    2130:	78 a5       	ldd	r23, Y+40	; 0x28
    2132:	89 a5       	ldd	r24, Y+41	; 0x29
    2134:	9a a5       	ldd	r25, Y+42	; 0x2a
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 e2       	ldi	r20, 0x20	; 32
    213c:	51 e4       	ldi	r21, 0x41	; 65
    213e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	bc 01       	movw	r22, r24
    2148:	cd 01       	movw	r24, r26
    214a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	9a a3       	std	Y+34, r25	; 0x22
    2154:	89 a3       	std	Y+33, r24	; 0x21
    2156:	0f c0       	rjmp	.+30     	; 0x2176 <LCD_VoidWriteCMD+0x216>
    2158:	80 e9       	ldi	r24, 0x90	; 144
    215a:	91 e0       	ldi	r25, 0x01	; 1
    215c:	98 a3       	std	Y+32, r25	; 0x20
    215e:	8f 8f       	std	Y+31, r24	; 0x1f
    2160:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2162:	98 a1       	ldd	r25, Y+32	; 0x20
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	f1 f7       	brne	.-4      	; 0x2164 <LCD_VoidWriteCMD+0x204>
    2168:	98 a3       	std	Y+32, r25	; 0x20
    216a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    216c:	89 a1       	ldd	r24, Y+33	; 0x21
    216e:	9a a1       	ldd	r25, Y+34	; 0x22
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	9a a3       	std	Y+34, r25	; 0x22
    2174:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2176:	89 a1       	ldd	r24, Y+33	; 0x21
    2178:	9a a1       	ldd	r25, Y+34	; 0x22
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	69 f7       	brne	.-38     	; 0x2158 <LCD_VoidWriteCMD+0x1f8>
    217e:	14 c0       	rjmp	.+40     	; 0x21a8 <LCD_VoidWriteCMD+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2180:	6b a1       	ldd	r22, Y+35	; 0x23
    2182:	7c a1       	ldd	r23, Y+36	; 0x24
    2184:	8d a1       	ldd	r24, Y+37	; 0x25
    2186:	9e a1       	ldd	r25, Y+38	; 0x26
    2188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	9a a3       	std	Y+34, r25	; 0x22
    2192:	89 a3       	std	Y+33, r24	; 0x21
    2194:	89 a1       	ldd	r24, Y+33	; 0x21
    2196:	9a a1       	ldd	r25, Y+34	; 0x22
    2198:	9e 8f       	std	Y+30, r25	; 0x1e
    219a:	8d 8f       	std	Y+29, r24	; 0x1d
    219c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    219e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	f1 f7       	brne	.-4      	; 0x21a0 <LCD_VoidWriteCMD+0x240>
    21a4:	9e 8f       	std	Y+30, r25	; 0x1e
    21a6:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(1);
	 if (G_u8KeyPadFlag == 1)
    21a8:	80 91 7e 00 	lds	r24, 0x007E
    21ac:	81 30       	cpi	r24, 0x01	; 1
    21ae:	09 f0       	breq	.+2      	; 0x21b2 <LCD_VoidWriteCMD+0x252>
    21b0:	14 c1       	rjmp	.+552    	; 0x23da <LCD_VoidWriteCMD+0x47a>
	 {
	DIO_SetPinValue(LCD_DATA_PORT,D4,GET_BIT(cmd,0));
    21b2:	89 ad       	ldd	r24, Y+57	; 0x39
    21b4:	98 2f       	mov	r25, r24
    21b6:	91 70       	andi	r25, 0x01	; 1
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	60 e0       	ldi	r22, 0x00	; 0
    21bc:	49 2f       	mov	r20, r25
    21be:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_DATA_PORT,D5,GET_BIT(cmd,1));
    21c2:	89 ad       	ldd	r24, Y+57	; 0x39
    21c4:	86 95       	lsr	r24
    21c6:	98 2f       	mov	r25, r24
    21c8:	91 70       	andi	r25, 0x01	; 1
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	61 e0       	ldi	r22, 0x01	; 1
    21ce:	49 2f       	mov	r20, r25
    21d0:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_DATA_PORT,D6,GET_BIT(cmd,2));
    21d4:	89 ad       	ldd	r24, Y+57	; 0x39
    21d6:	86 95       	lsr	r24
    21d8:	86 95       	lsr	r24
    21da:	98 2f       	mov	r25, r24
    21dc:	91 70       	andi	r25, 0x01	; 1
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	62 e0       	ldi	r22, 0x02	; 2
    21e2:	49 2f       	mov	r20, r25
    21e4:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_DATA_PORT,D7,GET_BIT(cmd,3));
    21e8:	89 ad       	ldd	r24, Y+57	; 0x39
    21ea:	86 95       	lsr	r24
    21ec:	86 95       	lsr	r24
    21ee:	86 95       	lsr	r24
    21f0:	98 2f       	mov	r25, r24
    21f2:	91 70       	andi	r25, 0x01	; 1
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	64 e0       	ldi	r22, 0x04	; 4
    21f8:	49 2f       	mov	r20, r25
    21fa:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>

	DIO_SetPinValue(LCD_CONTROL_PORT,EN,HIGH); //EN
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	62 e0       	ldi	r22, 0x02	; 2
    2202:	41 e0       	ldi	r20, 0x01	; 1
    2204:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	a0 e0       	ldi	r26, 0x00	; 0
    220e:	b0 e4       	ldi	r27, 0x40	; 64
    2210:	89 8f       	std	Y+25, r24	; 0x19
    2212:	9a 8f       	std	Y+26, r25	; 0x1a
    2214:	ab 8f       	std	Y+27, r26	; 0x1b
    2216:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2218:	69 8d       	ldd	r22, Y+25	; 0x19
    221a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    221c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    221e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	4a e7       	ldi	r20, 0x7A	; 122
    2226:	55 e4       	ldi	r21, 0x45	; 69
    2228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	8d 8b       	std	Y+21, r24	; 0x15
    2232:	9e 8b       	std	Y+22, r25	; 0x16
    2234:	af 8b       	std	Y+23, r26	; 0x17
    2236:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2238:	6d 89       	ldd	r22, Y+21	; 0x15
    223a:	7e 89       	ldd	r23, Y+22	; 0x16
    223c:	8f 89       	ldd	r24, Y+23	; 0x17
    223e:	98 8d       	ldd	r25, Y+24	; 0x18
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	40 e8       	ldi	r20, 0x80	; 128
    2246:	5f e3       	ldi	r21, 0x3F	; 63
    2248:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    224c:	88 23       	and	r24, r24
    224e:	2c f4       	brge	.+10     	; 0x225a <LCD_VoidWriteCMD+0x2fa>
		__ticks = 1;
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	9c 8b       	std	Y+20, r25	; 0x14
    2256:	8b 8b       	std	Y+19, r24	; 0x13
    2258:	3f c0       	rjmp	.+126    	; 0x22d8 <LCD_VoidWriteCMD+0x378>
	else if (__tmp > 65535)
    225a:	6d 89       	ldd	r22, Y+21	; 0x15
    225c:	7e 89       	ldd	r23, Y+22	; 0x16
    225e:	8f 89       	ldd	r24, Y+23	; 0x17
    2260:	98 8d       	ldd	r25, Y+24	; 0x18
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	3f ef       	ldi	r19, 0xFF	; 255
    2266:	4f e7       	ldi	r20, 0x7F	; 127
    2268:	57 e4       	ldi	r21, 0x47	; 71
    226a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    226e:	18 16       	cp	r1, r24
    2270:	4c f5       	brge	.+82     	; 0x22c4 <LCD_VoidWriteCMD+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2272:	69 8d       	ldd	r22, Y+25	; 0x19
    2274:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2276:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2278:	9c 8d       	ldd	r25, Y+28	; 0x1c
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	40 e2       	ldi	r20, 0x20	; 32
    2280:	51 e4       	ldi	r21, 0x41	; 65
    2282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	bc 01       	movw	r22, r24
    228c:	cd 01       	movw	r24, r26
    228e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	9c 8b       	std	Y+20, r25	; 0x14
    2298:	8b 8b       	std	Y+19, r24	; 0x13
    229a:	0f c0       	rjmp	.+30     	; 0x22ba <LCD_VoidWriteCMD+0x35a>
    229c:	80 e9       	ldi	r24, 0x90	; 144
    229e:	91 e0       	ldi	r25, 0x01	; 1
    22a0:	9a 8b       	std	Y+18, r25	; 0x12
    22a2:	89 8b       	std	Y+17, r24	; 0x11
    22a4:	89 89       	ldd	r24, Y+17	; 0x11
    22a6:	9a 89       	ldd	r25, Y+18	; 0x12
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <LCD_VoidWriteCMD+0x348>
    22ac:	9a 8b       	std	Y+18, r25	; 0x12
    22ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b0:	8b 89       	ldd	r24, Y+19	; 0x13
    22b2:	9c 89       	ldd	r25, Y+20	; 0x14
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	9c 8b       	std	Y+20, r25	; 0x14
    22b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ba:	8b 89       	ldd	r24, Y+19	; 0x13
    22bc:	9c 89       	ldd	r25, Y+20	; 0x14
    22be:	00 97       	sbiw	r24, 0x00	; 0
    22c0:	69 f7       	brne	.-38     	; 0x229c <LCD_VoidWriteCMD+0x33c>
    22c2:	14 c0       	rjmp	.+40     	; 0x22ec <LCD_VoidWriteCMD+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c4:	6d 89       	ldd	r22, Y+21	; 0x15
    22c6:	7e 89       	ldd	r23, Y+22	; 0x16
    22c8:	8f 89       	ldd	r24, Y+23	; 0x17
    22ca:	98 8d       	ldd	r25, Y+24	; 0x18
    22cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	9c 8b       	std	Y+20, r25	; 0x14
    22d6:	8b 8b       	std	Y+19, r24	; 0x13
    22d8:	8b 89       	ldd	r24, Y+19	; 0x13
    22da:	9c 89       	ldd	r25, Y+20	; 0x14
    22dc:	98 8b       	std	Y+16, r25	; 0x10
    22de:	8f 87       	std	Y+15, r24	; 0x0f
    22e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22e2:	98 89       	ldd	r25, Y+16	; 0x10
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	f1 f7       	brne	.-4      	; 0x22e4 <LCD_VoidWriteCMD+0x384>
    22e8:	98 8b       	std	Y+16, r25	; 0x10
    22ea:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(2);
	DIO_SetPinValue(LCD_CONTROL_PORT,EN,LOW); //EN
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	62 e0       	ldi	r22, 0x02	; 2
    22f0:	40 e0       	ldi	r20, 0x00	; 0
    22f2:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	a0 e2       	ldi	r26, 0x20	; 32
    22fc:	b1 e4       	ldi	r27, 0x41	; 65
    22fe:	8b 87       	std	Y+11, r24	; 0x0b
    2300:	9c 87       	std	Y+12, r25	; 0x0c
    2302:	ad 87       	std	Y+13, r26	; 0x0d
    2304:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2306:	6b 85       	ldd	r22, Y+11	; 0x0b
    2308:	7c 85       	ldd	r23, Y+12	; 0x0c
    230a:	8d 85       	ldd	r24, Y+13	; 0x0d
    230c:	9e 85       	ldd	r25, Y+14	; 0x0e
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	4a e7       	ldi	r20, 0x7A	; 122
    2314:	55 e4       	ldi	r21, 0x45	; 69
    2316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	8f 83       	std	Y+7, r24	; 0x07
    2320:	98 87       	std	Y+8, r25	; 0x08
    2322:	a9 87       	std	Y+9, r26	; 0x09
    2324:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2326:	6f 81       	ldd	r22, Y+7	; 0x07
    2328:	78 85       	ldd	r23, Y+8	; 0x08
    232a:	89 85       	ldd	r24, Y+9	; 0x09
    232c:	9a 85       	ldd	r25, Y+10	; 0x0a
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e8       	ldi	r20, 0x80	; 128
    2334:	5f e3       	ldi	r21, 0x3F	; 63
    2336:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    233a:	88 23       	and	r24, r24
    233c:	2c f4       	brge	.+10     	; 0x2348 <LCD_VoidWriteCMD+0x3e8>
		__ticks = 1;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	9e 83       	std	Y+6, r25	; 0x06
    2344:	8d 83       	std	Y+5, r24	; 0x05
    2346:	3f c0       	rjmp	.+126    	; 0x23c6 <LCD_VoidWriteCMD+0x466>
	else if (__tmp > 65535)
    2348:	6f 81       	ldd	r22, Y+7	; 0x07
    234a:	78 85       	ldd	r23, Y+8	; 0x08
    234c:	89 85       	ldd	r24, Y+9	; 0x09
    234e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	3f ef       	ldi	r19, 0xFF	; 255
    2354:	4f e7       	ldi	r20, 0x7F	; 127
    2356:	57 e4       	ldi	r21, 0x47	; 71
    2358:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    235c:	18 16       	cp	r1, r24
    235e:	4c f5       	brge	.+82     	; 0x23b2 <LCD_VoidWriteCMD+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2360:	6b 85       	ldd	r22, Y+11	; 0x0b
    2362:	7c 85       	ldd	r23, Y+12	; 0x0c
    2364:	8d 85       	ldd	r24, Y+13	; 0x0d
    2366:	9e 85       	ldd	r25, Y+14	; 0x0e
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e2       	ldi	r20, 0x20	; 32
    236e:	51 e4       	ldi	r21, 0x41	; 65
    2370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	bc 01       	movw	r22, r24
    237a:	cd 01       	movw	r24, r26
    237c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	9e 83       	std	Y+6, r25	; 0x06
    2386:	8d 83       	std	Y+5, r24	; 0x05
    2388:	0f c0       	rjmp	.+30     	; 0x23a8 <LCD_VoidWriteCMD+0x448>
    238a:	80 e9       	ldi	r24, 0x90	; 144
    238c:	91 e0       	ldi	r25, 0x01	; 1
    238e:	9c 83       	std	Y+4, r25	; 0x04
    2390:	8b 83       	std	Y+3, r24	; 0x03
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	9c 81       	ldd	r25, Y+4	; 0x04
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <LCD_VoidWriteCMD+0x436>
    239a:	9c 83       	std	Y+4, r25	; 0x04
    239c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239e:	8d 81       	ldd	r24, Y+5	; 0x05
    23a0:	9e 81       	ldd	r25, Y+6	; 0x06
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	9e 83       	std	Y+6, r25	; 0x06
    23a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	69 f7       	brne	.-38     	; 0x238a <LCD_VoidWriteCMD+0x42a>
    23b0:	14 c0       	rjmp	.+40     	; 0x23da <LCD_VoidWriteCMD+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b2:	6f 81       	ldd	r22, Y+7	; 0x07
    23b4:	78 85       	ldd	r23, Y+8	; 0x08
    23b6:	89 85       	ldd	r24, Y+9	; 0x09
    23b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	9e 83       	std	Y+6, r25	; 0x06
    23c4:	8d 83       	std	Y+5, r24	; 0x05
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ca:	9a 83       	std	Y+2, r25	; 0x02
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	9a 81       	ldd	r25, Y+2	; 0x02
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <LCD_VoidWriteCMD+0x472>
    23d6:	9a 83       	std	Y+2, r25	; 0x02
    23d8:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(10);
	 }

}
    23da:	e9 96       	adiw	r28, 0x39	; 57
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	de bf       	out	0x3e, r29	; 62
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	cd bf       	out	0x3d, r28	; 61
    23e6:	cf 91       	pop	r28
    23e8:	df 91       	pop	r29
    23ea:	08 95       	ret

000023ec <LCD_VoidSendData>:

void LCD_VoidSendData (u8 cmd)
{
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	e9 97       	sbiw	r28, 0x39	; 57
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	89 af       	std	Y+57, r24	; 0x39
   if (cmd != 0xff )
    2402:	89 ad       	ldd	r24, Y+57	; 0x39
    2404:	8f 3f       	cpi	r24, 0xFF	; 255
    2406:	09 f4       	brne	.+2      	; 0x240a <LCD_VoidSendData+0x1e>
    2408:	32 c2       	rjmp	.+1124   	; 0x286e <LCD_VoidSendData+0x482>
   {
		DIO_SetPinValue(LCD_CONTROL_PORT,RS,HIGH);
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	63 e0       	ldi	r22, 0x03	; 3
    240e:	41 e0       	ldi	r20, 0x01	; 1
    2410:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>


		DIO_SetPinValue(LCD_DATA_PORT,D4,GET_BIT(cmd,4));
    2414:	89 ad       	ldd	r24, Y+57	; 0x39
    2416:	82 95       	swap	r24
    2418:	8f 70       	andi	r24, 0x0F	; 15
    241a:	98 2f       	mov	r25, r24
    241c:	91 70       	andi	r25, 0x01	; 1
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	60 e0       	ldi	r22, 0x00	; 0
    2422:	49 2f       	mov	r20, r25
    2424:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_DATA_PORT,D5,GET_BIT(cmd,5));
    2428:	89 ad       	ldd	r24, Y+57	; 0x39
    242a:	82 95       	swap	r24
    242c:	86 95       	lsr	r24
    242e:	87 70       	andi	r24, 0x07	; 7
    2430:	98 2f       	mov	r25, r24
    2432:	91 70       	andi	r25, 0x01	; 1
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	61 e0       	ldi	r22, 0x01	; 1
    2438:	49 2f       	mov	r20, r25
    243a:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_DATA_PORT,D6,GET_BIT(cmd,6));
    243e:	89 ad       	ldd	r24, Y+57	; 0x39
    2440:	82 95       	swap	r24
    2442:	86 95       	lsr	r24
    2444:	86 95       	lsr	r24
    2446:	83 70       	andi	r24, 0x03	; 3
    2448:	98 2f       	mov	r25, r24
    244a:	91 70       	andi	r25, 0x01	; 1
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	62 e0       	ldi	r22, 0x02	; 2
    2450:	49 2f       	mov	r20, r25
    2452:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_DATA_PORT,D7,GET_BIT(cmd,7));
    2456:	89 ad       	ldd	r24, Y+57	; 0x39
    2458:	98 2f       	mov	r25, r24
    245a:	99 1f       	adc	r25, r25
    245c:	99 27       	eor	r25, r25
    245e:	99 1f       	adc	r25, r25
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	64 e0       	ldi	r22, 0x04	; 4
    2464:	49 2f       	mov	r20, r25
    2466:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>

		DIO_SetPinValue(LCD_CONTROL_PORT,EN,HIGH); //EN
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	62 e0       	ldi	r22, 0x02	; 2
    246e:	41 e0       	ldi	r20, 0x01	; 1
    2470:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	a0 e0       	ldi	r26, 0x00	; 0
    247a:	b0 e4       	ldi	r27, 0x40	; 64
    247c:	8d ab       	std	Y+53, r24	; 0x35
    247e:	9e ab       	std	Y+54, r25	; 0x36
    2480:	af ab       	std	Y+55, r26	; 0x37
    2482:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2484:	6d a9       	ldd	r22, Y+53	; 0x35
    2486:	7e a9       	ldd	r23, Y+54	; 0x36
    2488:	8f a9       	ldd	r24, Y+55	; 0x37
    248a:	98 ad       	ldd	r25, Y+56	; 0x38
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	4a e7       	ldi	r20, 0x7A	; 122
    2492:	55 e4       	ldi	r21, 0x45	; 69
    2494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	89 ab       	std	Y+49, r24	; 0x31
    249e:	9a ab       	std	Y+50, r25	; 0x32
    24a0:	ab ab       	std	Y+51, r26	; 0x33
    24a2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24a4:	69 a9       	ldd	r22, Y+49	; 0x31
    24a6:	7a a9       	ldd	r23, Y+50	; 0x32
    24a8:	8b a9       	ldd	r24, Y+51	; 0x33
    24aa:	9c a9       	ldd	r25, Y+52	; 0x34
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 e8       	ldi	r20, 0x80	; 128
    24b2:	5f e3       	ldi	r21, 0x3F	; 63
    24b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24b8:	88 23       	and	r24, r24
    24ba:	2c f4       	brge	.+10     	; 0x24c6 <LCD_VoidSendData+0xda>
		__ticks = 1;
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	98 ab       	std	Y+48, r25	; 0x30
    24c2:	8f a7       	std	Y+47, r24	; 0x2f
    24c4:	3f c0       	rjmp	.+126    	; 0x2544 <LCD_VoidSendData+0x158>
	else if (__tmp > 65535)
    24c6:	69 a9       	ldd	r22, Y+49	; 0x31
    24c8:	7a a9       	ldd	r23, Y+50	; 0x32
    24ca:	8b a9       	ldd	r24, Y+51	; 0x33
    24cc:	9c a9       	ldd	r25, Y+52	; 0x34
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	3f ef       	ldi	r19, 0xFF	; 255
    24d2:	4f e7       	ldi	r20, 0x7F	; 127
    24d4:	57 e4       	ldi	r21, 0x47	; 71
    24d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24da:	18 16       	cp	r1, r24
    24dc:	4c f5       	brge	.+82     	; 0x2530 <LCD_VoidSendData+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24de:	6d a9       	ldd	r22, Y+53	; 0x35
    24e0:	7e a9       	ldd	r23, Y+54	; 0x36
    24e2:	8f a9       	ldd	r24, Y+55	; 0x37
    24e4:	98 ad       	ldd	r25, Y+56	; 0x38
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e2       	ldi	r20, 0x20	; 32
    24ec:	51 e4       	ldi	r21, 0x41	; 65
    24ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	bc 01       	movw	r22, r24
    24f8:	cd 01       	movw	r24, r26
    24fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	98 ab       	std	Y+48, r25	; 0x30
    2504:	8f a7       	std	Y+47, r24	; 0x2f
    2506:	0f c0       	rjmp	.+30     	; 0x2526 <LCD_VoidSendData+0x13a>
    2508:	80 e9       	ldi	r24, 0x90	; 144
    250a:	91 e0       	ldi	r25, 0x01	; 1
    250c:	9e a7       	std	Y+46, r25	; 0x2e
    250e:	8d a7       	std	Y+45, r24	; 0x2d
    2510:	8d a5       	ldd	r24, Y+45	; 0x2d
    2512:	9e a5       	ldd	r25, Y+46	; 0x2e
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <LCD_VoidSendData+0x128>
    2518:	9e a7       	std	Y+46, r25	; 0x2e
    251a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251c:	8f a5       	ldd	r24, Y+47	; 0x2f
    251e:	98 a9       	ldd	r25, Y+48	; 0x30
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	98 ab       	std	Y+48, r25	; 0x30
    2524:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2526:	8f a5       	ldd	r24, Y+47	; 0x2f
    2528:	98 a9       	ldd	r25, Y+48	; 0x30
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	69 f7       	brne	.-38     	; 0x2508 <LCD_VoidSendData+0x11c>
    252e:	14 c0       	rjmp	.+40     	; 0x2558 <LCD_VoidSendData+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2530:	69 a9       	ldd	r22, Y+49	; 0x31
    2532:	7a a9       	ldd	r23, Y+50	; 0x32
    2534:	8b a9       	ldd	r24, Y+51	; 0x33
    2536:	9c a9       	ldd	r25, Y+52	; 0x34
    2538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	98 ab       	std	Y+48, r25	; 0x30
    2542:	8f a7       	std	Y+47, r24	; 0x2f
    2544:	8f a5       	ldd	r24, Y+47	; 0x2f
    2546:	98 a9       	ldd	r25, Y+48	; 0x30
    2548:	9c a7       	std	Y+44, r25	; 0x2c
    254a:	8b a7       	std	Y+43, r24	; 0x2b
    254c:	8b a5       	ldd	r24, Y+43	; 0x2b
    254e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <LCD_VoidSendData+0x164>
    2554:	9c a7       	std	Y+44, r25	; 0x2c
    2556:	8b a7       	std	Y+43, r24	; 0x2b
	     _delay_ms(2);
		DIO_SetPinValue(LCD_CONTROL_PORT,EN,LOW); //EN
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	62 e0       	ldi	r22, 0x02	; 2
    255c:	40 e0       	ldi	r20, 0x00	; 0
    255e:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	a0 e8       	ldi	r26, 0x80	; 128
    2568:	bf e3       	ldi	r27, 0x3F	; 63
    256a:	8f a3       	std	Y+39, r24	; 0x27
    256c:	98 a7       	std	Y+40, r25	; 0x28
    256e:	a9 a7       	std	Y+41, r26	; 0x29
    2570:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2572:	6f a1       	ldd	r22, Y+39	; 0x27
    2574:	78 a5       	ldd	r23, Y+40	; 0x28
    2576:	89 a5       	ldd	r24, Y+41	; 0x29
    2578:	9a a5       	ldd	r25, Y+42	; 0x2a
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	4a e7       	ldi	r20, 0x7A	; 122
    2580:	55 e4       	ldi	r21, 0x45	; 69
    2582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	8b a3       	std	Y+35, r24	; 0x23
    258c:	9c a3       	std	Y+36, r25	; 0x24
    258e:	ad a3       	std	Y+37, r26	; 0x25
    2590:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2592:	6b a1       	ldd	r22, Y+35	; 0x23
    2594:	7c a1       	ldd	r23, Y+36	; 0x24
    2596:	8d a1       	ldd	r24, Y+37	; 0x25
    2598:	9e a1       	ldd	r25, Y+38	; 0x26
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e8       	ldi	r20, 0x80	; 128
    25a0:	5f e3       	ldi	r21, 0x3F	; 63
    25a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a6:	88 23       	and	r24, r24
    25a8:	2c f4       	brge	.+10     	; 0x25b4 <LCD_VoidSendData+0x1c8>
		__ticks = 1;
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	9a a3       	std	Y+34, r25	; 0x22
    25b0:	89 a3       	std	Y+33, r24	; 0x21
    25b2:	3f c0       	rjmp	.+126    	; 0x2632 <LCD_VoidSendData+0x246>
	else if (__tmp > 65535)
    25b4:	6b a1       	ldd	r22, Y+35	; 0x23
    25b6:	7c a1       	ldd	r23, Y+36	; 0x24
    25b8:	8d a1       	ldd	r24, Y+37	; 0x25
    25ba:	9e a1       	ldd	r25, Y+38	; 0x26
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	3f ef       	ldi	r19, 0xFF	; 255
    25c0:	4f e7       	ldi	r20, 0x7F	; 127
    25c2:	57 e4       	ldi	r21, 0x47	; 71
    25c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c8:	18 16       	cp	r1, r24
    25ca:	4c f5       	brge	.+82     	; 0x261e <LCD_VoidSendData+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25cc:	6f a1       	ldd	r22, Y+39	; 0x27
    25ce:	78 a5       	ldd	r23, Y+40	; 0x28
    25d0:	89 a5       	ldd	r24, Y+41	; 0x29
    25d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e2       	ldi	r20, 0x20	; 32
    25da:	51 e4       	ldi	r21, 0x41	; 65
    25dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	bc 01       	movw	r22, r24
    25e6:	cd 01       	movw	r24, r26
    25e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	9a a3       	std	Y+34, r25	; 0x22
    25f2:	89 a3       	std	Y+33, r24	; 0x21
    25f4:	0f c0       	rjmp	.+30     	; 0x2614 <LCD_VoidSendData+0x228>
    25f6:	80 e9       	ldi	r24, 0x90	; 144
    25f8:	91 e0       	ldi	r25, 0x01	; 1
    25fa:	98 a3       	std	Y+32, r25	; 0x20
    25fc:	8f 8f       	std	Y+31, r24	; 0x1f
    25fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2600:	98 a1       	ldd	r25, Y+32	; 0x20
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	f1 f7       	brne	.-4      	; 0x2602 <LCD_VoidSendData+0x216>
    2606:	98 a3       	std	Y+32, r25	; 0x20
    2608:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260a:	89 a1       	ldd	r24, Y+33	; 0x21
    260c:	9a a1       	ldd	r25, Y+34	; 0x22
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	9a a3       	std	Y+34, r25	; 0x22
    2612:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2614:	89 a1       	ldd	r24, Y+33	; 0x21
    2616:	9a a1       	ldd	r25, Y+34	; 0x22
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	69 f7       	brne	.-38     	; 0x25f6 <LCD_VoidSendData+0x20a>
    261c:	14 c0       	rjmp	.+40     	; 0x2646 <LCD_VoidSendData+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261e:	6b a1       	ldd	r22, Y+35	; 0x23
    2620:	7c a1       	ldd	r23, Y+36	; 0x24
    2622:	8d a1       	ldd	r24, Y+37	; 0x25
    2624:	9e a1       	ldd	r25, Y+38	; 0x26
    2626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	9a a3       	std	Y+34, r25	; 0x22
    2630:	89 a3       	std	Y+33, r24	; 0x21
    2632:	89 a1       	ldd	r24, Y+33	; 0x21
    2634:	9a a1       	ldd	r25, Y+34	; 0x22
    2636:	9e 8f       	std	Y+30, r25	; 0x1e
    2638:	8d 8f       	std	Y+29, r24	; 0x1d
    263a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    263c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <LCD_VoidSendData+0x252>
    2642:	9e 8f       	std	Y+30, r25	; 0x1e
    2644:	8d 8f       	std	Y+29, r24	; 0x1d
		 _delay_ms(1);

		DIO_SetPinValue(LCD_DATA_PORT,D4,GET_BIT(cmd,0));
    2646:	89 ad       	ldd	r24, Y+57	; 0x39
    2648:	98 2f       	mov	r25, r24
    264a:	91 70       	andi	r25, 0x01	; 1
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	60 e0       	ldi	r22, 0x00	; 0
    2650:	49 2f       	mov	r20, r25
    2652:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_DATA_PORT,D5,GET_BIT(cmd,1));
    2656:	89 ad       	ldd	r24, Y+57	; 0x39
    2658:	86 95       	lsr	r24
    265a:	98 2f       	mov	r25, r24
    265c:	91 70       	andi	r25, 0x01	; 1
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	61 e0       	ldi	r22, 0x01	; 1
    2662:	49 2f       	mov	r20, r25
    2664:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_DATA_PORT,D6,GET_BIT(cmd,2));
    2668:	89 ad       	ldd	r24, Y+57	; 0x39
    266a:	86 95       	lsr	r24
    266c:	86 95       	lsr	r24
    266e:	98 2f       	mov	r25, r24
    2670:	91 70       	andi	r25, 0x01	; 1
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	62 e0       	ldi	r22, 0x02	; 2
    2676:	49 2f       	mov	r20, r25
    2678:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_DATA_PORT,D7,GET_BIT(cmd,3));
    267c:	89 ad       	ldd	r24, Y+57	; 0x39
    267e:	86 95       	lsr	r24
    2680:	86 95       	lsr	r24
    2682:	86 95       	lsr	r24
    2684:	98 2f       	mov	r25, r24
    2686:	91 70       	andi	r25, 0x01	; 1
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	64 e0       	ldi	r22, 0x04	; 4
    268c:	49 2f       	mov	r20, r25
    268e:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>

		DIO_SetPinValue(LCD_CONTROL_PORT,EN,HIGH); //EN
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	62 e0       	ldi	r22, 0x02	; 2
    2696:	41 e0       	ldi	r20, 0x01	; 1
    2698:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	a0 e0       	ldi	r26, 0x00	; 0
    26a2:	b0 e4       	ldi	r27, 0x40	; 64
    26a4:	89 8f       	std	Y+25, r24	; 0x19
    26a6:	9a 8f       	std	Y+26, r25	; 0x1a
    26a8:	ab 8f       	std	Y+27, r26	; 0x1b
    26aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ac:	69 8d       	ldd	r22, Y+25	; 0x19
    26ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	4a e7       	ldi	r20, 0x7A	; 122
    26ba:	55 e4       	ldi	r21, 0x45	; 69
    26bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	8d 8b       	std	Y+21, r24	; 0x15
    26c6:	9e 8b       	std	Y+22, r25	; 0x16
    26c8:	af 8b       	std	Y+23, r26	; 0x17
    26ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26cc:	6d 89       	ldd	r22, Y+21	; 0x15
    26ce:	7e 89       	ldd	r23, Y+22	; 0x16
    26d0:	8f 89       	ldd	r24, Y+23	; 0x17
    26d2:	98 8d       	ldd	r25, Y+24	; 0x18
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	40 e8       	ldi	r20, 0x80	; 128
    26da:	5f e3       	ldi	r21, 0x3F	; 63
    26dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26e0:	88 23       	and	r24, r24
    26e2:	2c f4       	brge	.+10     	; 0x26ee <LCD_VoidSendData+0x302>
		__ticks = 1;
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	9c 8b       	std	Y+20, r25	; 0x14
    26ea:	8b 8b       	std	Y+19, r24	; 0x13
    26ec:	3f c0       	rjmp	.+126    	; 0x276c <LCD_VoidSendData+0x380>
	else if (__tmp > 65535)
    26ee:	6d 89       	ldd	r22, Y+21	; 0x15
    26f0:	7e 89       	ldd	r23, Y+22	; 0x16
    26f2:	8f 89       	ldd	r24, Y+23	; 0x17
    26f4:	98 8d       	ldd	r25, Y+24	; 0x18
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	3f ef       	ldi	r19, 0xFF	; 255
    26fa:	4f e7       	ldi	r20, 0x7F	; 127
    26fc:	57 e4       	ldi	r21, 0x47	; 71
    26fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2702:	18 16       	cp	r1, r24
    2704:	4c f5       	brge	.+82     	; 0x2758 <LCD_VoidSendData+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2706:	69 8d       	ldd	r22, Y+25	; 0x19
    2708:	7a 8d       	ldd	r23, Y+26	; 0x1a
    270a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    270c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	40 e2       	ldi	r20, 0x20	; 32
    2714:	51 e4       	ldi	r21, 0x41	; 65
    2716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	bc 01       	movw	r22, r24
    2720:	cd 01       	movw	r24, r26
    2722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	9c 8b       	std	Y+20, r25	; 0x14
    272c:	8b 8b       	std	Y+19, r24	; 0x13
    272e:	0f c0       	rjmp	.+30     	; 0x274e <LCD_VoidSendData+0x362>
    2730:	80 e9       	ldi	r24, 0x90	; 144
    2732:	91 e0       	ldi	r25, 0x01	; 1
    2734:	9a 8b       	std	Y+18, r25	; 0x12
    2736:	89 8b       	std	Y+17, r24	; 0x11
    2738:	89 89       	ldd	r24, Y+17	; 0x11
    273a:	9a 89       	ldd	r25, Y+18	; 0x12
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	f1 f7       	brne	.-4      	; 0x273c <LCD_VoidSendData+0x350>
    2740:	9a 8b       	std	Y+18, r25	; 0x12
    2742:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2744:	8b 89       	ldd	r24, Y+19	; 0x13
    2746:	9c 89       	ldd	r25, Y+20	; 0x14
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	9c 8b       	std	Y+20, r25	; 0x14
    274c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    274e:	8b 89       	ldd	r24, Y+19	; 0x13
    2750:	9c 89       	ldd	r25, Y+20	; 0x14
    2752:	00 97       	sbiw	r24, 0x00	; 0
    2754:	69 f7       	brne	.-38     	; 0x2730 <LCD_VoidSendData+0x344>
    2756:	14 c0       	rjmp	.+40     	; 0x2780 <LCD_VoidSendData+0x394>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2758:	6d 89       	ldd	r22, Y+21	; 0x15
    275a:	7e 89       	ldd	r23, Y+22	; 0x16
    275c:	8f 89       	ldd	r24, Y+23	; 0x17
    275e:	98 8d       	ldd	r25, Y+24	; 0x18
    2760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	9c 8b       	std	Y+20, r25	; 0x14
    276a:	8b 8b       	std	Y+19, r24	; 0x13
    276c:	8b 89       	ldd	r24, Y+19	; 0x13
    276e:	9c 89       	ldd	r25, Y+20	; 0x14
    2770:	98 8b       	std	Y+16, r25	; 0x10
    2772:	8f 87       	std	Y+15, r24	; 0x0f
    2774:	8f 85       	ldd	r24, Y+15	; 0x0f
    2776:	98 89       	ldd	r25, Y+16	; 0x10
    2778:	01 97       	sbiw	r24, 0x01	; 1
    277a:	f1 f7       	brne	.-4      	; 0x2778 <LCD_VoidSendData+0x38c>
    277c:	98 8b       	std	Y+16, r25	; 0x10
    277e:	8f 87       	std	Y+15, r24	; 0x0f
		 _delay_ms(2);
		DIO_SetPinValue(LCD_CONTROL_PORT,EN,LOW); //EN
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	62 e0       	ldi	r22, 0x02	; 2
    2784:	40 e0       	ldi	r20, 0x00	; 0
    2786:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	a0 e2       	ldi	r26, 0x20	; 32
    2790:	b1 e4       	ldi	r27, 0x41	; 65
    2792:	8b 87       	std	Y+11, r24	; 0x0b
    2794:	9c 87       	std	Y+12, r25	; 0x0c
    2796:	ad 87       	std	Y+13, r26	; 0x0d
    2798:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    279a:	6b 85       	ldd	r22, Y+11	; 0x0b
    279c:	7c 85       	ldd	r23, Y+12	; 0x0c
    279e:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	4a e7       	ldi	r20, 0x7A	; 122
    27a8:	55 e4       	ldi	r21, 0x45	; 69
    27aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	8f 83       	std	Y+7, r24	; 0x07
    27b4:	98 87       	std	Y+8, r25	; 0x08
    27b6:	a9 87       	std	Y+9, r26	; 0x09
    27b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27ba:	6f 81       	ldd	r22, Y+7	; 0x07
    27bc:	78 85       	ldd	r23, Y+8	; 0x08
    27be:	89 85       	ldd	r24, Y+9	; 0x09
    27c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e8       	ldi	r20, 0x80	; 128
    27c8:	5f e3       	ldi	r21, 0x3F	; 63
    27ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ce:	88 23       	and	r24, r24
    27d0:	2c f4       	brge	.+10     	; 0x27dc <LCD_VoidSendData+0x3f0>
		__ticks = 1;
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	9e 83       	std	Y+6, r25	; 0x06
    27d8:	8d 83       	std	Y+5, r24	; 0x05
    27da:	3f c0       	rjmp	.+126    	; 0x285a <LCD_VoidSendData+0x46e>
	else if (__tmp > 65535)
    27dc:	6f 81       	ldd	r22, Y+7	; 0x07
    27de:	78 85       	ldd	r23, Y+8	; 0x08
    27e0:	89 85       	ldd	r24, Y+9	; 0x09
    27e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	3f ef       	ldi	r19, 0xFF	; 255
    27e8:	4f e7       	ldi	r20, 0x7F	; 127
    27ea:	57 e4       	ldi	r21, 0x47	; 71
    27ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27f0:	18 16       	cp	r1, r24
    27f2:	4c f5       	brge	.+82     	; 0x2846 <LCD_VoidSendData+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e2       	ldi	r20, 0x20	; 32
    2802:	51 e4       	ldi	r21, 0x41	; 65
    2804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	bc 01       	movw	r22, r24
    280e:	cd 01       	movw	r24, r26
    2810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	9e 83       	std	Y+6, r25	; 0x06
    281a:	8d 83       	std	Y+5, r24	; 0x05
    281c:	0f c0       	rjmp	.+30     	; 0x283c <LCD_VoidSendData+0x450>
    281e:	80 e9       	ldi	r24, 0x90	; 144
    2820:	91 e0       	ldi	r25, 0x01	; 1
    2822:	9c 83       	std	Y+4, r25	; 0x04
    2824:	8b 83       	std	Y+3, r24	; 0x03
    2826:	8b 81       	ldd	r24, Y+3	; 0x03
    2828:	9c 81       	ldd	r25, Y+4	; 0x04
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	f1 f7       	brne	.-4      	; 0x282a <LCD_VoidSendData+0x43e>
    282e:	9c 83       	std	Y+4, r25	; 0x04
    2830:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2832:	8d 81       	ldd	r24, Y+5	; 0x05
    2834:	9e 81       	ldd	r25, Y+6	; 0x06
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	9e 83       	std	Y+6, r25	; 0x06
    283a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283c:	8d 81       	ldd	r24, Y+5	; 0x05
    283e:	9e 81       	ldd	r25, Y+6	; 0x06
    2840:	00 97       	sbiw	r24, 0x00	; 0
    2842:	69 f7       	brne	.-38     	; 0x281e <LCD_VoidSendData+0x432>
    2844:	14 c0       	rjmp	.+40     	; 0x286e <LCD_VoidSendData+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2846:	6f 81       	ldd	r22, Y+7	; 0x07
    2848:	78 85       	ldd	r23, Y+8	; 0x08
    284a:	89 85       	ldd	r24, Y+9	; 0x09
    284c:	9a 85       	ldd	r25, Y+10	; 0x0a
    284e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	9e 83       	std	Y+6, r25	; 0x06
    2858:	8d 83       	std	Y+5, r24	; 0x05
    285a:	8d 81       	ldd	r24, Y+5	; 0x05
    285c:	9e 81       	ldd	r25, Y+6	; 0x06
    285e:	9a 83       	std	Y+2, r25	; 0x02
    2860:	89 83       	std	Y+1, r24	; 0x01
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	9a 81       	ldd	r25, Y+2	; 0x02
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	f1 f7       	brne	.-4      	; 0x2866 <LCD_VoidSendData+0x47a>
    286a:	9a 83       	std	Y+2, r25	; 0x02
    286c:	89 83       	std	Y+1, r24	; 0x01
		 _delay_ms(10);

   }


}
    286e:	e9 96       	adiw	r28, 0x39	; 57
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	f8 94       	cli
    2874:	de bf       	out	0x3e, r29	; 62
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	cd bf       	out	0x3d, r28	; 61
    287a:	cf 91       	pop	r28
    287c:	df 91       	pop	r29
    287e:	08 95       	ret

00002880 <LCD_VoidGoToXY>:



void LCD_VoidGoToXY (u8 x ,u8 y)
{
    2880:	df 93       	push	r29
    2882:	cf 93       	push	r28
    2884:	00 d0       	rcall	.+0      	; 0x2886 <LCD_VoidGoToXY+0x6>
    2886:	00 d0       	rcall	.+0      	; 0x2888 <LCD_VoidGoToXY+0x8>
    2888:	00 d0       	rcall	.+0      	; 0x288a <LCD_VoidGoToXY+0xa>
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
    288e:	8b 83       	std	Y+3, r24	; 0x03
    2890:	6c 83       	std	Y+4, r22	; 0x04
DIO_SetPinValue(LCD_CONTROL_PORT,RS,LOW); //RS
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	63 e0       	ldi	r22, 0x03	; 3
    2896:	40 e0       	ldi	r20, 0x00	; 0
    2898:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
u8 LOCAL_u8Adrs = 0 ;
    289c:	1a 82       	std	Y+2, r1	; 0x02

switch (y) {
    289e:	8c 81       	ldd	r24, Y+4	; 0x04
    28a0:	28 2f       	mov	r18, r24
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	3e 83       	std	Y+6, r19	; 0x06
    28a6:	2d 83       	std	Y+5, r18	; 0x05
    28a8:	8d 81       	ldd	r24, Y+5	; 0x05
    28aa:	9e 81       	ldd	r25, Y+6	; 0x06
    28ac:	81 30       	cpi	r24, 0x01	; 1
    28ae:	91 05       	cpc	r25, r1
    28b0:	b9 f0       	breq	.+46     	; 0x28e0 <LCD_VoidGoToXY+0x60>
    28b2:	2d 81       	ldd	r18, Y+5	; 0x05
    28b4:	3e 81       	ldd	r19, Y+6	; 0x06
    28b6:	22 30       	cpi	r18, 0x02	; 2
    28b8:	31 05       	cpc	r19, r1
    28ba:	2c f4       	brge	.+10     	; 0x28c6 <LCD_VoidGoToXY+0x46>
    28bc:	8d 81       	ldd	r24, Y+5	; 0x05
    28be:	9e 81       	ldd	r25, Y+6	; 0x06
    28c0:	00 97       	sbiw	r24, 0x00	; 0
    28c2:	61 f0       	breq	.+24     	; 0x28dc <LCD_VoidGoToXY+0x5c>
    28c4:	15 c0       	rjmp	.+42     	; 0x28f0 <LCD_VoidGoToXY+0x70>
    28c6:	2d 81       	ldd	r18, Y+5	; 0x05
    28c8:	3e 81       	ldd	r19, Y+6	; 0x06
    28ca:	22 30       	cpi	r18, 0x02	; 2
    28cc:	31 05       	cpc	r19, r1
    28ce:	59 f0       	breq	.+22     	; 0x28e6 <LCD_VoidGoToXY+0x66>
    28d0:	8d 81       	ldd	r24, Y+5	; 0x05
    28d2:	9e 81       	ldd	r25, Y+6	; 0x06
    28d4:	83 30       	cpi	r24, 0x03	; 3
    28d6:	91 05       	cpc	r25, r1
    28d8:	49 f0       	breq	.+18     	; 0x28ec <LCD_VoidGoToXY+0x6c>
    28da:	0a c0       	rjmp	.+20     	; 0x28f0 <LCD_VoidGoToXY+0x70>
case 0: LOCAL_u8Adrs = 0x00; break; //Starting address of 1st line
    28dc:	1a 82       	std	Y+2, r1	; 0x02
    28de:	08 c0       	rjmp	.+16     	; 0x28f0 <LCD_VoidGoToXY+0x70>
case 1: LOCAL_u8Adrs = 0x40; break; //Starting address of 2nd line
    28e0:	80 e4       	ldi	r24, 0x40	; 64
    28e2:	8a 83       	std	Y+2, r24	; 0x02
    28e4:	05 c0       	rjmp	.+10     	; 0x28f0 <LCD_VoidGoToXY+0x70>
case 2: LOCAL_u8Adrs = 0x14; break; //Starting address of 3rd line
    28e6:	84 e1       	ldi	r24, 0x14	; 20
    28e8:	8a 83       	std	Y+2, r24	; 0x02
    28ea:	02 c0       	rjmp	.+4      	; 0x28f0 <LCD_VoidGoToXY+0x70>
case 3: LOCAL_u8Adrs = 0x54; break; //Starting address of 4th line
    28ec:	84 e5       	ldi	r24, 0x54	; 84
    28ee:	8a 83       	std	Y+2, r24	; 0x02
           }
LOCAL_u8Adrs +=x;
    28f0:	9a 81       	ldd	r25, Y+2	; 0x02
    28f2:	8b 81       	ldd	r24, Y+3	; 0x03
    28f4:	89 0f       	add	r24, r25
    28f6:	8a 83       	std	Y+2, r24	; 0x02

u8 cmd = 0x80 | LOCAL_u8Adrs ;
    28f8:	8a 81       	ldd	r24, Y+2	; 0x02
    28fa:	80 68       	ori	r24, 0x80	; 128
    28fc:	89 83       	std	Y+1, r24	; 0x01
LCD_VoidWriteCMD (cmd);
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <LCD_VoidWriteCMD>

}
    2904:	26 96       	adiw	r28, 0x06	; 6
    2906:	0f b6       	in	r0, 0x3f	; 63
    2908:	f8 94       	cli
    290a:	de bf       	out	0x3e, r29	; 62
    290c:	0f be       	out	0x3f, r0	; 63
    290e:	cd bf       	out	0x3d, r28	; 61
    2910:	cf 91       	pop	r28
    2912:	df 91       	pop	r29
    2914:	08 95       	ret

00002916 <LCD_VoidWriteString>:

void LCD_VoidWriteString(const u8 *str)
{
    2916:	df 93       	push	r29
    2918:	cf 93       	push	r28
    291a:	00 d0       	rcall	.+0      	; 0x291c <LCD_VoidWriteString+0x6>
    291c:	0f 92       	push	r0
    291e:	cd b7       	in	r28, 0x3d	; 61
    2920:	de b7       	in	r29, 0x3e	; 62
    2922:	9b 83       	std	Y+3, r25	; 0x03
    2924:	8a 83       	std	Y+2, r24	; 0x02

	DIO_SetPinValue(LCD_CONTROL_PORT,RS,HIGH);
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	63 e0       	ldi	r22, 0x03	; 3
    292a:	41 e0       	ldi	r20, 0x01	; 1
    292c:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
	u8 LOC_u8Iterator = 0 ;
    2930:	19 82       	std	Y+1, r1	; 0x01
    2932:	0e c0       	rjmp	.+28     	; 0x2950 <LCD_VoidWriteString+0x3a>
	while(str[LOC_u8Iterator] != '\0')
	{
		LCD_VoidWriteCMD(str[LOC_u8Iterator]);
    2934:	89 81       	ldd	r24, Y+1	; 0x01
    2936:	28 2f       	mov	r18, r24
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	8a 81       	ldd	r24, Y+2	; 0x02
    293c:	9b 81       	ldd	r25, Y+3	; 0x03
    293e:	fc 01       	movw	r30, r24
    2940:	e2 0f       	add	r30, r18
    2942:	f3 1f       	adc	r31, r19
    2944:	80 81       	ld	r24, Z
    2946:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <LCD_VoidWriteCMD>
		LOC_u8Iterator++;
    294a:	89 81       	ldd	r24, Y+1	; 0x01
    294c:	8f 5f       	subi	r24, 0xFF	; 255
    294e:	89 83       	std	Y+1, r24	; 0x01
void LCD_VoidWriteString(const u8 *str)
{

	DIO_SetPinValue(LCD_CONTROL_PORT,RS,HIGH);
	u8 LOC_u8Iterator = 0 ;
	while(str[LOC_u8Iterator] != '\0')
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	28 2f       	mov	r18, r24
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	8a 81       	ldd	r24, Y+2	; 0x02
    2958:	9b 81       	ldd	r25, Y+3	; 0x03
    295a:	fc 01       	movw	r30, r24
    295c:	e2 0f       	add	r30, r18
    295e:	f3 1f       	adc	r31, r19
    2960:	80 81       	ld	r24, Z
    2962:	88 23       	and	r24, r24
    2964:	39 f7       	brne	.-50     	; 0x2934 <LCD_VoidWriteString+0x1e>
	{
		LCD_VoidWriteCMD(str[LOC_u8Iterator]);
		LOC_u8Iterator++;
	}
}
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <LCD_VoidClearScreen>:


void LCD_VoidClearScreen(void)
{
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
    297a:	2e 97       	sbiw	r28, 0x0e	; 14
    297c:	0f b6       	in	r0, 0x3f	; 63
    297e:	f8 94       	cli
    2980:	de bf       	out	0x3e, r29	; 62
    2982:	0f be       	out	0x3f, r0	; 63
    2984:	cd bf       	out	0x3d, r28	; 61
DIO_SetPinValue(LCD_CONTROL_PORT,RS,LOW); //RS
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	63 e0       	ldi	r22, 0x03	; 3
    298a:	40 e0       	ldi	r20, 0x00	; 0
    298c:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
LCD_VoidWriteCMD(LCD_Clear);
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <LCD_VoidWriteCMD>
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	a0 e2       	ldi	r26, 0x20	; 32
    299c:	b1 e4       	ldi	r27, 0x41	; 65
    299e:	8b 87       	std	Y+11, r24	; 0x0b
    29a0:	9c 87       	std	Y+12, r25	; 0x0c
    29a2:	ad 87       	std	Y+13, r26	; 0x0d
    29a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	4a e7       	ldi	r20, 0x7A	; 122
    29b4:	55 e4       	ldi	r21, 0x45	; 69
    29b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	8f 83       	std	Y+7, r24	; 0x07
    29c0:	98 87       	std	Y+8, r25	; 0x08
    29c2:	a9 87       	std	Y+9, r26	; 0x09
    29c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29c6:	6f 81       	ldd	r22, Y+7	; 0x07
    29c8:	78 85       	ldd	r23, Y+8	; 0x08
    29ca:	89 85       	ldd	r24, Y+9	; 0x09
    29cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	40 e8       	ldi	r20, 0x80	; 128
    29d4:	5f e3       	ldi	r21, 0x3F	; 63
    29d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29da:	88 23       	and	r24, r24
    29dc:	2c f4       	brge	.+10     	; 0x29e8 <LCD_VoidClearScreen+0x76>
		__ticks = 1;
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	9e 83       	std	Y+6, r25	; 0x06
    29e4:	8d 83       	std	Y+5, r24	; 0x05
    29e6:	3f c0       	rjmp	.+126    	; 0x2a66 <LCD_VoidClearScreen+0xf4>
	else if (__tmp > 65535)
    29e8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ea:	78 85       	ldd	r23, Y+8	; 0x08
    29ec:	89 85       	ldd	r24, Y+9	; 0x09
    29ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	3f ef       	ldi	r19, 0xFF	; 255
    29f4:	4f e7       	ldi	r20, 0x7F	; 127
    29f6:	57 e4       	ldi	r21, 0x47	; 71
    29f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29fc:	18 16       	cp	r1, r24
    29fe:	4c f5       	brge	.+82     	; 0x2a52 <LCD_VoidClearScreen+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	40 e2       	ldi	r20, 0x20	; 32
    2a0e:	51 e4       	ldi	r21, 0x41	; 65
    2a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	bc 01       	movw	r22, r24
    2a1a:	cd 01       	movw	r24, r26
    2a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	9e 83       	std	Y+6, r25	; 0x06
    2a26:	8d 83       	std	Y+5, r24	; 0x05
    2a28:	0f c0       	rjmp	.+30     	; 0x2a48 <LCD_VoidClearScreen+0xd6>
    2a2a:	80 e9       	ldi	r24, 0x90	; 144
    2a2c:	91 e0       	ldi	r25, 0x01	; 1
    2a2e:	9c 83       	std	Y+4, r25	; 0x04
    2a30:	8b 83       	std	Y+3, r24	; 0x03
    2a32:	8b 81       	ldd	r24, Y+3	; 0x03
    2a34:	9c 81       	ldd	r25, Y+4	; 0x04
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	f1 f7       	brne	.-4      	; 0x2a36 <LCD_VoidClearScreen+0xc4>
    2a3a:	9c 83       	std	Y+4, r25	; 0x04
    2a3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a40:	9e 81       	ldd	r25, Y+6	; 0x06
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	9e 83       	std	Y+6, r25	; 0x06
    2a46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a48:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4c:	00 97       	sbiw	r24, 0x00	; 0
    2a4e:	69 f7       	brne	.-38     	; 0x2a2a <LCD_VoidClearScreen+0xb8>
    2a50:	14 c0       	rjmp	.+40     	; 0x2a7a <LCD_VoidClearScreen+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a52:	6f 81       	ldd	r22, Y+7	; 0x07
    2a54:	78 85       	ldd	r23, Y+8	; 0x08
    2a56:	89 85       	ldd	r24, Y+9	; 0x09
    2a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	9e 83       	std	Y+6, r25	; 0x06
    2a64:	8d 83       	std	Y+5, r24	; 0x05
    2a66:	8d 81       	ldd	r24, Y+5	; 0x05
    2a68:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6a:	9a 83       	std	Y+2, r25	; 0x02
    2a6c:	89 83       	std	Y+1, r24	; 0x01
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	9a 81       	ldd	r25, Y+2	; 0x02
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	f1 f7       	brne	.-4      	; 0x2a72 <LCD_VoidClearScreen+0x100>
    2a76:	9a 83       	std	Y+2, r25	; 0x02
    2a78:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(10);
}
    2a7a:	2e 96       	adiw	r28, 0x0e	; 14
    2a7c:	0f b6       	in	r0, 0x3f	; 63
    2a7e:	f8 94       	cli
    2a80:	de bf       	out	0x3e, r29	; 62
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	cd bf       	out	0x3d, r28	; 61
    2a86:	cf 91       	pop	r28
    2a88:	df 91       	pop	r29
    2a8a:	08 95       	ret

00002a8c <LCD_VoidSendNumber>:

void LCD_VoidSendNumber(u32 Copy_u32Number)
{
    2a8c:	ef 92       	push	r14
    2a8e:	ff 92       	push	r15
    2a90:	0f 93       	push	r16
    2a92:	1f 93       	push	r17
    2a94:	df 93       	push	r29
    2a96:	cf 93       	push	r28
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
    2a9c:	28 97       	sbiw	r28, 0x08	; 8
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	6d 83       	std	Y+5, r22	; 0x05
    2aaa:	7e 83       	std	Y+6, r23	; 0x06
    2aac:	8f 83       	std	Y+7, r24	; 0x07
    2aae:	98 87       	std	Y+8, r25	; 0x08

	u32 LOC_u32Reversed = 1 ;
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	a0 e0       	ldi	r26, 0x00	; 0
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	89 83       	std	Y+1, r24	; 0x01
    2aba:	9a 83       	std	Y+2, r25	; 0x02
    2abc:	ab 83       	std	Y+3, r26	; 0x03
    2abe:	bc 83       	std	Y+4, r27	; 0x04

	if( Copy_u32Number == 0 ){ LCD_VoidSendData('0'); }
    2ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac4:	af 81       	ldd	r26, Y+7	; 0x07
    2ac6:	b8 85       	ldd	r27, Y+8	; 0x08
    2ac8:	00 97       	sbiw	r24, 0x00	; 0
    2aca:	a1 05       	cpc	r26, r1
    2acc:	b1 05       	cpc	r27, r1
    2ace:	d1 f5       	brne	.+116    	; 0x2b44 <LCD_VoidSendNumber+0xb8>
    2ad0:	80 e3       	ldi	r24, 0x30	; 48
    2ad2:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_VoidSendData>
    2ad6:	6b c0       	rjmp	.+214    	; 0x2bae <LCD_VoidSendNumber+0x122>
	else{

		while( Copy_u32Number != 0 )
		{

			LOC_u32Reversed = ( LOC_u32Reversed * 10 ) + ( Copy_u32Number % 10 );
    2ad8:	89 81       	ldd	r24, Y+1	; 0x01
    2ada:	9a 81       	ldd	r25, Y+2	; 0x02
    2adc:	ab 81       	ldd	r26, Y+3	; 0x03
    2ade:	bc 81       	ldd	r27, Y+4	; 0x04
    2ae0:	2a e0       	ldi	r18, 0x0A	; 10
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e0       	ldi	r20, 0x00	; 0
    2ae6:	50 e0       	ldi	r21, 0x00	; 0
    2ae8:	bc 01       	movw	r22, r24
    2aea:	cd 01       	movw	r24, r26
    2aec:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <__mulsi3>
    2af0:	7b 01       	movw	r14, r22
    2af2:	8c 01       	movw	r16, r24
    2af4:	8d 81       	ldd	r24, Y+5	; 0x05
    2af6:	9e 81       	ldd	r25, Y+6	; 0x06
    2af8:	af 81       	ldd	r26, Y+7	; 0x07
    2afa:	b8 85       	ldd	r27, Y+8	; 0x08
    2afc:	2a e0       	ldi	r18, 0x0A	; 10
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e0       	ldi	r20, 0x00	; 0
    2b02:	50 e0       	ldi	r21, 0x00	; 0
    2b04:	bc 01       	movw	r22, r24
    2b06:	cd 01       	movw	r24, r26
    2b08:	0e 94 92 1a 	call	0x3524	; 0x3524 <__udivmodsi4>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	8e 0d       	add	r24, r14
    2b12:	9f 1d       	adc	r25, r15
    2b14:	a0 1f       	adc	r26, r16
    2b16:	b1 1f       	adc	r27, r17
    2b18:	89 83       	std	Y+1, r24	; 0x01
    2b1a:	9a 83       	std	Y+2, r25	; 0x02
    2b1c:	ab 83       	std	Y+3, r26	; 0x03
    2b1e:	bc 83       	std	Y+4, r27	; 0x04
			Copy_u32Number /= 10 ;
    2b20:	8d 81       	ldd	r24, Y+5	; 0x05
    2b22:	9e 81       	ldd	r25, Y+6	; 0x06
    2b24:	af 81       	ldd	r26, Y+7	; 0x07
    2b26:	b8 85       	ldd	r27, Y+8	; 0x08
    2b28:	2a e0       	ldi	r18, 0x0A	; 10
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	40 e0       	ldi	r20, 0x00	; 0
    2b2e:	50 e0       	ldi	r21, 0x00	; 0
    2b30:	bc 01       	movw	r22, r24
    2b32:	cd 01       	movw	r24, r26
    2b34:	0e 94 92 1a 	call	0x3524	; 0x3524 <__udivmodsi4>
    2b38:	da 01       	movw	r26, r20
    2b3a:	c9 01       	movw	r24, r18
    2b3c:	8d 83       	std	Y+5, r24	; 0x05
    2b3e:	9e 83       	std	Y+6, r25	; 0x06
    2b40:	af 83       	std	Y+7, r26	; 0x07
    2b42:	b8 87       	std	Y+8, r27	; 0x08

	if( Copy_u32Number == 0 ){ LCD_VoidSendData('0'); }

	else{

		while( Copy_u32Number != 0 )
    2b44:	8d 81       	ldd	r24, Y+5	; 0x05
    2b46:	9e 81       	ldd	r25, Y+6	; 0x06
    2b48:	af 81       	ldd	r26, Y+7	; 0x07
    2b4a:	b8 85       	ldd	r27, Y+8	; 0x08
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	a1 05       	cpc	r26, r1
    2b50:	b1 05       	cpc	r27, r1
    2b52:	11 f6       	brne	.-124    	; 0x2ad8 <LCD_VoidSendNumber+0x4c>
    2b54:	23 c0       	rjmp	.+70     	; 0x2b9c <LCD_VoidSendNumber+0x110>

		}
		while( LOC_u32Reversed != 1 )
		{

			LCD_VoidSendData( ( LOC_u32Reversed % 10 ) + 48 );
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	9a 81       	ldd	r25, Y+2	; 0x02
    2b5a:	ab 81       	ldd	r26, Y+3	; 0x03
    2b5c:	bc 81       	ldd	r27, Y+4	; 0x04
    2b5e:	2a e0       	ldi	r18, 0x0A	; 10
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	40 e0       	ldi	r20, 0x00	; 0
    2b64:	50 e0       	ldi	r21, 0x00	; 0
    2b66:	bc 01       	movw	r22, r24
    2b68:	cd 01       	movw	r24, r26
    2b6a:	0e 94 92 1a 	call	0x3524	; 0x3524 <__udivmodsi4>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	80 5d       	subi	r24, 0xD0	; 208
    2b74:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_VoidSendData>
			LOC_u32Reversed /= 10 ;
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7c:	ab 81       	ldd	r26, Y+3	; 0x03
    2b7e:	bc 81       	ldd	r27, Y+4	; 0x04
    2b80:	2a e0       	ldi	r18, 0x0A	; 10
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e0       	ldi	r20, 0x00	; 0
    2b86:	50 e0       	ldi	r21, 0x00	; 0
    2b88:	bc 01       	movw	r22, r24
    2b8a:	cd 01       	movw	r24, r26
    2b8c:	0e 94 92 1a 	call	0x3524	; 0x3524 <__udivmodsi4>
    2b90:	da 01       	movw	r26, r20
    2b92:	c9 01       	movw	r24, r18
    2b94:	89 83       	std	Y+1, r24	; 0x01
    2b96:	9a 83       	std	Y+2, r25	; 0x02
    2b98:	ab 83       	std	Y+3, r26	; 0x03
    2b9a:	bc 83       	std	Y+4, r27	; 0x04

			LOC_u32Reversed = ( LOC_u32Reversed * 10 ) + ( Copy_u32Number % 10 );
			Copy_u32Number /= 10 ;

		}
		while( LOC_u32Reversed != 1 )
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba0:	ab 81       	ldd	r26, Y+3	; 0x03
    2ba2:	bc 81       	ldd	r27, Y+4	; 0x04
    2ba4:	81 30       	cpi	r24, 0x01	; 1
    2ba6:	91 05       	cpc	r25, r1
    2ba8:	a1 05       	cpc	r26, r1
    2baa:	b1 05       	cpc	r27, r1
    2bac:	a1 f6       	brne	.-88     	; 0x2b56 <LCD_VoidSendNumber+0xca>
		}

	}


}
    2bae:	28 96       	adiw	r28, 0x08	; 8
    2bb0:	0f b6       	in	r0, 0x3f	; 63
    2bb2:	f8 94       	cli
    2bb4:	de bf       	out	0x3e, r29	; 62
    2bb6:	0f be       	out	0x3f, r0	; 63
    2bb8:	cd bf       	out	0x3d, r28	; 61
    2bba:	cf 91       	pop	r28
    2bbc:	df 91       	pop	r29
    2bbe:	1f 91       	pop	r17
    2bc0:	0f 91       	pop	r16
    2bc2:	ff 90       	pop	r15
    2bc4:	ef 90       	pop	r14
    2bc6:	08 95       	ret

00002bc8 <SevenSeg_VoidInit>:
#include "Seven_Segments_Private.h"
#include "Seven_Segments_Config.h"


void SevenSeg_VoidInit     (void)
{
    2bc8:	df 93       	push	r29
    2bca:	cf 93       	push	r28
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
	if ( SEVEVEN_SEGMENTS_1_TYPE == COMMON_ANODE)
	DIO_SetPinDirection(SEVEN_SEGMENTS_1_POWER_PORT,SEVEN_SEGMENTS_1_POWER_PIN,OUTPUT);
    2bd0:	82 e0       	ldi	r24, 0x02	; 2
    2bd2:	60 e0       	ldi	r22, 0x00	; 0
    2bd4:	41 e0       	ldi	r20, 0x01	; 1
    2bd6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
	else
	DIO_SetPinDirection(SEVEN_SEGMENTS_1_POWER_PORT,SEVEN_SEGMENTS_1_POWER_PIN,INPUT);
//***********************************************************************************************************
	if ( SEVEVEN_SEGMENTS_2_TYPE == COMMON_ANODE)
	DIO_SetPinDirection(SEVEN_SEGMENTS_2_POWER_PORT,SEVEN_SEGMENTS_2_POWER_PIN,OUTPUT);
    2bda:	82 e0       	ldi	r24, 0x02	; 2
    2bdc:	61 e0       	ldi	r22, 0x01	; 1
    2bde:	41 e0       	ldi	r20, 0x01	; 1
    2be0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
	else
	DIO_SetPinDirection(SEVEN_SEGMENTS_2_POWER_PORT,SEVEN_SEGMENTS_2_POWER_PIN,INPUT);
//***********************************************************************************************************
	if ( SEVEVEN_SEGMENTS_3_TYPE == COMMON_ANODE)
	DIO_SetPinDirection(SEVEN_SEGMENTS_3_POWER_PORT,SEVEN_SEGMENTS_3_POWER_PIN,OUTPUT);
    2be4:	82 e0       	ldi	r24, 0x02	; 2
    2be6:	62 e0       	ldi	r22, 0x02	; 2
    2be8:	41 e0       	ldi	r20, 0x01	; 1
    2bea:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
	else
	DIO_SetPinDirection(SEVEN_SEGMENTS_3_POWER_PORT,SEVEN_SEGMENTS_3_POWER_PIN,INPUT);
//***********************************************************************************************************
	if ( SEVEVEN_SEGMENTS_4_TYPE == COMMON_ANODE)
	DIO_SetPinDirection(SEVEN_SEGMENTS_4_POWER_PORT,SEVEN_SEGMENTS_4_POWER_PIN,OUTPUT);
    2bee:	82 e0       	ldi	r24, 0x02	; 2
    2bf0:	63 e0       	ldi	r22, 0x03	; 3
    2bf2:	41 e0       	ldi	r20, 0x01	; 1
    2bf4:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
	else
	DIO_SetPinDirection(SEVEN_SEGMENTS_4_POWER_PORT,SEVEN_SEGMENTS_4_POWER_PIN,INPUT);
//***********************************************************************************************************
	DIO_SetPinDirection(SEVEN_SEGMENTS_DATA_PORT,SEVEN_SEGMENTS_DATA_PIN_A,OUTPUT);
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	60 e0       	ldi	r22, 0x00	; 0
    2bfc:	41 e0       	ldi	r20, 0x01	; 1
    2bfe:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
	DIO_SetPinDirection(SEVEN_SEGMENTS_DATA_PORT,SEVEN_SEGMENTS_DATA_PIN_B,OUTPUT);
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	61 e0       	ldi	r22, 0x01	; 1
    2c06:	41 e0       	ldi	r20, 0x01	; 1
    2c08:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
	DIO_SetPinDirection(SEVEN_SEGMENTS_DATA_PORT,SEVEN_SEGMENTS_DATA_PIN_C,OUTPUT);
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	62 e0       	ldi	r22, 0x02	; 2
    2c10:	41 e0       	ldi	r20, 0x01	; 1
    2c12:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>
	DIO_SetPinDirection(SEVEN_SEGMENTS_DATA_PORT,SEVEN_SEGMENTS_DATA_PIN_D,OUTPUT);
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	63 e0       	ldi	r22, 0x03	; 3
    2c1a:	41 e0       	ldi	r20, 0x01	; 1
    2c1c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_SetPinDirection>

//***********************************************************************************************************

#if      SevenSeg_1_State == SevenSeg_Enable
	     DIO_SetPinValue(SEVEN_SEGMENTS_1_POWER_PORT,SEVEN_SEGMENTS_1_POWER_PIN,HIGH);
    2c20:	82 e0       	ldi	r24, 0x02	; 2
    2c22:	60 e0       	ldi	r22, 0x00	; 0
    2c24:	41 e0       	ldi	r20, 0x01	; 1
    2c26:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
#elif    SevenSeg_1_State == SevenSeg_Disable
	     DIO_SetPinValue(SEVEN_SEGMENTS_1_POWER_PORT,SEVEN_SEGMENTS_1_POWER_PIN,LOW);
#endif

#if      SevenSeg_2_State == SevenSeg_Enable
	     DIO_SetPinValue(SEVEN_SEGMENTS_2_POWER_PORT,SEVEN_SEGMENTS_2_POWER_PIN,HIGH);
    2c2a:	82 e0       	ldi	r24, 0x02	; 2
    2c2c:	61 e0       	ldi	r22, 0x01	; 1
    2c2e:	41 e0       	ldi	r20, 0x01	; 1
    2c30:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
#elif    SevenSeg_2_State == SevenSeg_Disable
	     DIO_SetPinValue(SEVEN_SEGMENTS_2_POWER_PORT,SEVEN_SEGMENTS_2_POWER_PIN,LOW);
#endif

#if      SevenSeg_3_State == SevenSeg_Enable
	     DIO_SetPinValue(SEVEN_SEGMENTS_3_POWER_PORT,SEVEN_SEGMENTS_3_POWER_PIN,HIGH);
    2c34:	82 e0       	ldi	r24, 0x02	; 2
    2c36:	62 e0       	ldi	r22, 0x02	; 2
    2c38:	41 e0       	ldi	r20, 0x01	; 1
    2c3a:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
#elif    SevenSeg_3_State == SevenSeg_Disable
	     DIO_SetPinValue(SEVEN_SEGMENTS_3_POWER_PORT,SEVEN_SEGMENTS_3_POWER_PIN,LOW);
#endif

#if      SevenSeg_4_State == SevenSeg_Enable
	     DIO_SetPinValue(SEVEN_SEGMENTS_4_POWER_PORT,SEVEN_SEGMENTS_4_POWER_PIN,HIGH);
    2c3e:	82 e0       	ldi	r24, 0x02	; 2
    2c40:	63 e0       	ldi	r22, 0x03	; 3
    2c42:	41 e0       	ldi	r20, 0x01	; 1
    2c44:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
#elif    SevenSeg_4_State == SevenSeg_Disable
	     DIO_SetPinValue(SEVEN_SEGMENTS_4_POWER_PORT,SEVEN_SEGMENTS_4_POWER_PIN,LOW);
#endif
}
    2c48:	cf 91       	pop	r28
    2c4a:	df 91       	pop	r29
    2c4c:	08 95       	ret

00002c4e <SevenSeg_VoidWrite>:


/****************************************** WRTIE FUNCTION *********************************************/

void SevenSeg_VoidWrite    (u8 number)
{
    2c4e:	df 93       	push	r29
    2c50:	cf 93       	push	r28
    2c52:	0f 92       	push	r0
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    2c58:	89 83       	std	Y+1, r24	; 0x01

	if (number < 10)
    2c5a:	89 81       	ldd	r24, Y+1	; 0x01
    2c5c:	8a 30       	cpi	r24, 0x0A	; 10
    2c5e:	30 f5       	brcc	.+76     	; 0x2cac <SevenSeg_VoidWrite+0x5e>
	{
		DIO_SetPinValue(SEVEN_SEGMENTS_DATA_PORT,SEVEN_SEGMENTS_DATA_PIN_A,GET_BIT(number,0));
    2c60:	89 81       	ldd	r24, Y+1	; 0x01
    2c62:	98 2f       	mov	r25, r24
    2c64:	91 70       	andi	r25, 0x01	; 1
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	60 e0       	ldi	r22, 0x00	; 0
    2c6a:	49 2f       	mov	r20, r25
    2c6c:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
		DIO_SetPinValue(SEVEN_SEGMENTS_DATA_PORT,SEVEN_SEGMENTS_DATA_PIN_B,GET_BIT(number,1));
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	86 95       	lsr	r24
    2c74:	98 2f       	mov	r25, r24
    2c76:	91 70       	andi	r25, 0x01	; 1
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	61 e0       	ldi	r22, 0x01	; 1
    2c7c:	49 2f       	mov	r20, r25
    2c7e:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
		DIO_SetPinValue(SEVEN_SEGMENTS_DATA_PORT,SEVEN_SEGMENTS_DATA_PIN_C,GET_BIT(number,2));
    2c82:	89 81       	ldd	r24, Y+1	; 0x01
    2c84:	86 95       	lsr	r24
    2c86:	86 95       	lsr	r24
    2c88:	98 2f       	mov	r25, r24
    2c8a:	91 70       	andi	r25, 0x01	; 1
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	62 e0       	ldi	r22, 0x02	; 2
    2c90:	49 2f       	mov	r20, r25
    2c92:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
		DIO_SetPinValue(SEVEN_SEGMENTS_DATA_PORT,SEVEN_SEGMENTS_DATA_PIN_D,GET_BIT(number,3));
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	86 95       	lsr	r24
    2c9a:	86 95       	lsr	r24
    2c9c:	86 95       	lsr	r24
    2c9e:	98 2f       	mov	r25, r24
    2ca0:	91 70       	andi	r25, 0x01	; 1
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	63 e0       	ldi	r22, 0x03	; 3
    2ca6:	49 2f       	mov	r20, r25
    2ca8:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
	}
}
    2cac:	0f 90       	pop	r0
    2cae:	cf 91       	pop	r28
    2cb0:	df 91       	pop	r29
    2cb2:	08 95       	ret

00002cb4 <SevenSeg1_VoidEnable>:

/****************************************** Seven Segments 1 *********************************************/

void SevenSeg1_VoidEnable  (void)
{
    2cb4:	df 93       	push	r29
    2cb6:	cf 93       	push	r28
    2cb8:	cd b7       	in	r28, 0x3d	; 61
    2cba:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(SEVEN_SEGMENTS_1_POWER_PORT,SEVEN_SEGMENTS_1_POWER_PIN,HIGH);
    2cbc:	82 e0       	ldi	r24, 0x02	; 2
    2cbe:	60 e0       	ldi	r22, 0x00	; 0
    2cc0:	41 e0       	ldi	r20, 0x01	; 1
    2cc2:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
}
    2cc6:	cf 91       	pop	r28
    2cc8:	df 91       	pop	r29
    2cca:	08 95       	ret

00002ccc <SevenSeg1_VoidDisable>:
void SevenSeg1_VoidDisable (void)
{
    2ccc:	df 93       	push	r29
    2cce:	cf 93       	push	r28
    2cd0:	cd b7       	in	r28, 0x3d	; 61
    2cd2:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(SEVEN_SEGMENTS_1_POWER_PORT,SEVEN_SEGMENTS_1_POWER_PIN,LOW);
    2cd4:	82 e0       	ldi	r24, 0x02	; 2
    2cd6:	60 e0       	ldi	r22, 0x00	; 0
    2cd8:	40 e0       	ldi	r20, 0x00	; 0
    2cda:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
}
    2cde:	cf 91       	pop	r28
    2ce0:	df 91       	pop	r29
    2ce2:	08 95       	ret

00002ce4 <SevenSeg2_VoidEnable>:

/****************************************** Seven Segments 2 *********************************************/

void SevenSeg2_VoidEnable  (void)
{
    2ce4:	df 93       	push	r29
    2ce6:	cf 93       	push	r28
    2ce8:	cd b7       	in	r28, 0x3d	; 61
    2cea:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(SEVEN_SEGMENTS_2_POWER_PORT,SEVEN_SEGMENTS_2_POWER_PIN,HIGH);
    2cec:	82 e0       	ldi	r24, 0x02	; 2
    2cee:	61 e0       	ldi	r22, 0x01	; 1
    2cf0:	41 e0       	ldi	r20, 0x01	; 1
    2cf2:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
}
    2cf6:	cf 91       	pop	r28
    2cf8:	df 91       	pop	r29
    2cfa:	08 95       	ret

00002cfc <SevenSeg2_VoidDisable>:
void SevenSeg2_VoidDisable (void)
{
    2cfc:	df 93       	push	r29
    2cfe:	cf 93       	push	r28
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(SEVEN_SEGMENTS_2_POWER_PORT,SEVEN_SEGMENTS_2_POWER_PIN,LOW);
    2d04:	82 e0       	ldi	r24, 0x02	; 2
    2d06:	61 e0       	ldi	r22, 0x01	; 1
    2d08:	40 e0       	ldi	r20, 0x00	; 0
    2d0a:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
}
    2d0e:	cf 91       	pop	r28
    2d10:	df 91       	pop	r29
    2d12:	08 95       	ret

00002d14 <SevenSeg3_VoidEnable>:

/****************************************** Seven Segments 3 *********************************************/
void SevenSeg3_VoidEnable  (void)
{
    2d14:	df 93       	push	r29
    2d16:	cf 93       	push	r28
    2d18:	cd b7       	in	r28, 0x3d	; 61
    2d1a:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(SEVEN_SEGMENTS_3_POWER_PORT,SEVEN_SEGMENTS_3_POWER_PIN,HIGH);
    2d1c:	82 e0       	ldi	r24, 0x02	; 2
    2d1e:	62 e0       	ldi	r22, 0x02	; 2
    2d20:	41 e0       	ldi	r20, 0x01	; 1
    2d22:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
}
    2d26:	cf 91       	pop	r28
    2d28:	df 91       	pop	r29
    2d2a:	08 95       	ret

00002d2c <SevenSeg3_VoidDisable>:
void SevenSeg3_VoidDisable (void)
{
    2d2c:	df 93       	push	r29
    2d2e:	cf 93       	push	r28
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(SEVEN_SEGMENTS_3_POWER_PORT,SEVEN_SEGMENTS_3_POWER_PIN,LOW);
    2d34:	82 e0       	ldi	r24, 0x02	; 2
    2d36:	62 e0       	ldi	r22, 0x02	; 2
    2d38:	40 e0       	ldi	r20, 0x00	; 0
    2d3a:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
}
    2d3e:	cf 91       	pop	r28
    2d40:	df 91       	pop	r29
    2d42:	08 95       	ret

00002d44 <SevenSeg4_VoidEnable>:

/****************************************** Seven Segments 4 *********************************************/

void SevenSeg4_VoidEnable  (void)
{
    2d44:	df 93       	push	r29
    2d46:	cf 93       	push	r28
    2d48:	cd b7       	in	r28, 0x3d	; 61
    2d4a:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(SEVEN_SEGMENTS_4_POWER_PORT,SEVEN_SEGMENTS_4_POWER_PIN,HIGH);
    2d4c:	82 e0       	ldi	r24, 0x02	; 2
    2d4e:	63 e0       	ldi	r22, 0x03	; 3
    2d50:	41 e0       	ldi	r20, 0x01	; 1
    2d52:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
}
    2d56:	cf 91       	pop	r28
    2d58:	df 91       	pop	r29
    2d5a:	08 95       	ret

00002d5c <SevenSeg4_VoidDisable>:
void SevenSeg4_VoidDisable (void)
{
    2d5c:	df 93       	push	r29
    2d5e:	cf 93       	push	r28
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(SEVEN_SEGMENTS_4_POWER_PORT,SEVEN_SEGMENTS_4_POWER_PIN,LOW);
    2d64:	82 e0       	ldi	r24, 0x02	; 2
    2d66:	63 e0       	ldi	r22, 0x03	; 3
    2d68:	40 e0       	ldi	r20, 0x00	; 0
    2d6a:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_SetPinValue>
}
    2d6e:	cf 91       	pop	r28
    2d70:	df 91       	pop	r29
    2d72:	08 95       	ret

00002d74 <__vector_10>:
void (*GlobalPtrCTCTimer0) (void) = NULL;
void (*GlobalPtrOVTimer0)  (void) = NULL;

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    2d74:	1f 92       	push	r1
    2d76:	0f 92       	push	r0
    2d78:	0f b6       	in	r0, 0x3f	; 63
    2d7a:	0f 92       	push	r0
    2d7c:	11 24       	eor	r1, r1
    2d7e:	2f 93       	push	r18
    2d80:	3f 93       	push	r19
    2d82:	4f 93       	push	r20
    2d84:	5f 93       	push	r21
    2d86:	6f 93       	push	r22
    2d88:	7f 93       	push	r23
    2d8a:	8f 93       	push	r24
    2d8c:	9f 93       	push	r25
    2d8e:	af 93       	push	r26
    2d90:	bf 93       	push	r27
    2d92:	ef 93       	push	r30
    2d94:	ff 93       	push	r31
    2d96:	df 93       	push	r29
    2d98:	cf 93       	push	r28
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
	if (*GlobalPtrCTCTimer0 != NULL)
    2d9e:	80 91 7f 00 	lds	r24, 0x007F
    2da2:	90 91 80 00 	lds	r25, 0x0080
    2da6:	00 97       	sbiw	r24, 0x00	; 0
    2da8:	29 f0       	breq	.+10     	; 0x2db4 <__vector_10+0x40>
	{
		GlobalPtrCTCTimer0();
    2daa:	e0 91 7f 00 	lds	r30, 0x007F
    2dae:	f0 91 80 00 	lds	r31, 0x0080
    2db2:	09 95       	icall
	}
}
    2db4:	cf 91       	pop	r28
    2db6:	df 91       	pop	r29
    2db8:	ff 91       	pop	r31
    2dba:	ef 91       	pop	r30
    2dbc:	bf 91       	pop	r27
    2dbe:	af 91       	pop	r26
    2dc0:	9f 91       	pop	r25
    2dc2:	8f 91       	pop	r24
    2dc4:	7f 91       	pop	r23
    2dc6:	6f 91       	pop	r22
    2dc8:	5f 91       	pop	r21
    2dca:	4f 91       	pop	r20
    2dcc:	3f 91       	pop	r19
    2dce:	2f 91       	pop	r18
    2dd0:	0f 90       	pop	r0
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	0f 90       	pop	r0
    2dd6:	1f 90       	pop	r1
    2dd8:	18 95       	reti

00002dda <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11 (void)
{
    2dda:	1f 92       	push	r1
    2ddc:	0f 92       	push	r0
    2dde:	0f b6       	in	r0, 0x3f	; 63
    2de0:	0f 92       	push	r0
    2de2:	11 24       	eor	r1, r1
    2de4:	2f 93       	push	r18
    2de6:	3f 93       	push	r19
    2de8:	4f 93       	push	r20
    2dea:	5f 93       	push	r21
    2dec:	6f 93       	push	r22
    2dee:	7f 93       	push	r23
    2df0:	8f 93       	push	r24
    2df2:	9f 93       	push	r25
    2df4:	af 93       	push	r26
    2df6:	bf 93       	push	r27
    2df8:	ef 93       	push	r30
    2dfa:	ff 93       	push	r31
    2dfc:	df 93       	push	r29
    2dfe:	cf 93       	push	r28
    2e00:	cd b7       	in	r28, 0x3d	; 61
    2e02:	de b7       	in	r29, 0x3e	; 62
	if (*GlobalPtrOVTimer0 != NULL)
    2e04:	80 91 81 00 	lds	r24, 0x0081
    2e08:	90 91 82 00 	lds	r25, 0x0082
    2e0c:	00 97       	sbiw	r24, 0x00	; 0
    2e0e:	29 f0       	breq	.+10     	; 0x2e1a <__vector_11+0x40>
	{
		GlobalPtrOVTimer0();
    2e10:	e0 91 81 00 	lds	r30, 0x0081
    2e14:	f0 91 82 00 	lds	r31, 0x0082
    2e18:	09 95       	icall
	}
}
    2e1a:	cf 91       	pop	r28
    2e1c:	df 91       	pop	r29
    2e1e:	ff 91       	pop	r31
    2e20:	ef 91       	pop	r30
    2e22:	bf 91       	pop	r27
    2e24:	af 91       	pop	r26
    2e26:	9f 91       	pop	r25
    2e28:	8f 91       	pop	r24
    2e2a:	7f 91       	pop	r23
    2e2c:	6f 91       	pop	r22
    2e2e:	5f 91       	pop	r21
    2e30:	4f 91       	pop	r20
    2e32:	3f 91       	pop	r19
    2e34:	2f 91       	pop	r18
    2e36:	0f 90       	pop	r0
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	0f 90       	pop	r0
    2e3c:	1f 90       	pop	r1
    2e3e:	18 95       	reti

00002e40 <TIMER_0_u8Get_OV_Flag>:

u8   TIMER_0_u8Get_OV_Flag(void)
{
    2e40:	df 93       	push	r29
    2e42:	cf 93       	push	r28
    2e44:	cd b7       	in	r28, 0x3d	; 61
    2e46:	de b7       	in	r29, 0x3e	; 62
    return GET_BIT(TIFR,TOV0) ;
    2e48:	e8 e5       	ldi	r30, 0x58	; 88
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	80 81       	ld	r24, Z
    2e4e:	81 70       	andi	r24, 0x01	; 1
}
    2e50:	cf 91       	pop	r28
    2e52:	df 91       	pop	r29
    2e54:	08 95       	ret

00002e56 <TIMER_0_VoidClear_OV_Flag>:

void TIMER_0_VoidClear_OV_Flag (void)
{
    2e56:	df 93       	push	r29
    2e58:	cf 93       	push	r28
    2e5a:	cd b7       	in	r28, 0x3d	; 61
    2e5c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIFR,TOV0);
    2e5e:	a8 e5       	ldi	r26, 0x58	; 88
    2e60:	b0 e0       	ldi	r27, 0x00	; 0
    2e62:	e8 e5       	ldi	r30, 0x58	; 88
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	80 81       	ld	r24, Z
    2e68:	81 60       	ori	r24, 0x01	; 1
    2e6a:	8c 93       	st	X, r24
}
    2e6c:	cf 91       	pop	r28
    2e6e:	df 91       	pop	r29
    2e70:	08 95       	ret

00002e72 <TIMER_0_VoidClear_CTC_Flag>:

void TIMER_0_VoidClear_CTC_Flag (void)
{
    2e72:	df 93       	push	r29
    2e74:	cf 93       	push	r28
    2e76:	cd b7       	in	r28, 0x3d	; 61
    2e78:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIFR,OCF0);
    2e7a:	a8 e5       	ldi	r26, 0x58	; 88
    2e7c:	b0 e0       	ldi	r27, 0x00	; 0
    2e7e:	e8 e5       	ldi	r30, 0x58	; 88
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	80 81       	ld	r24, Z
    2e84:	82 60       	ori	r24, 0x02	; 2
    2e86:	8c 93       	st	X, r24
}
    2e88:	cf 91       	pop	r28
    2e8a:	df 91       	pop	r29
    2e8c:	08 95       	ret

00002e8e <TIMER_0_u8Get_CTC_Flag>:

u8   TIMER_0_u8Get_CTC_Flag(void)
{
    2e8e:	df 93       	push	r29
    2e90:	cf 93       	push	r28
    2e92:	cd b7       	in	r28, 0x3d	; 61
    2e94:	de b7       	in	r29, 0x3e	; 62
    return GET_BIT(TIFR,OCF0) ;
    2e96:	e8 e5       	ldi	r30, 0x58	; 88
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	80 81       	ld	r24, Z
    2e9c:	86 95       	lsr	r24
    2e9e:	81 70       	andi	r24, 0x01	; 1
}
    2ea0:	cf 91       	pop	r28
    2ea2:	df 91       	pop	r29
    2ea4:	08 95       	ret

00002ea6 <TIMER_0_voidInit>:

void TIMER_0_voidInit(void)
{
    2ea6:	df 93       	push	r29
    2ea8:	cf 93       	push	r28
    2eaa:	cd b7       	in	r28, 0x3d	; 61
    2eac:	de b7       	in	r29, 0x3e	; 62
              				#error "Wrong TIMER_0_PWM_PHASE_CORRECT_OPTION Config"
              			#endif


#elif           TIMER_0_WAVEFORM_GENERATION_MODE	==	TIMER_CTC_Mode
                       SET_BIT(TCCR0,WGM01);
    2eae:	a3 e5       	ldi	r26, 0x53	; 83
    2eb0:	b0 e0       	ldi	r27, 0x00	; 0
    2eb2:	e3 e5       	ldi	r30, 0x53	; 83
    2eb4:	f0 e0       	ldi	r31, 0x00	; 0
    2eb6:	80 81       	ld	r24, Z
    2eb8:	88 60       	ori	r24, 0x08	; 8
    2eba:	8c 93       	st	X, r24
                       CLR_BIT(TCCR0,WGM00);
    2ebc:	a3 e5       	ldi	r26, 0x53	; 83
    2ebe:	b0 e0       	ldi	r27, 0x00	; 0
    2ec0:	e3 e5       	ldi	r30, 0x53	; 83
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	80 81       	ld	r24, Z
    2ec6:	8f 7b       	andi	r24, 0xBF	; 191
    2ec8:	8c 93       	st	X, r24
                       SET_BIT(TCCR0,FOC0);
    2eca:	a3 e5       	ldi	r26, 0x53	; 83
    2ecc:	b0 e0       	ldi	r27, 0x00	; 0
    2ece:	e3 e5       	ldi	r30, 0x53	; 83
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	80 81       	ld	r24, Z
    2ed4:	80 68       	ori	r24, 0x80	; 128
    2ed6:	8c 93       	st	X, r24

              			/*Set the Required Preload Value*/
              			OCR0 = TIMER_0_PreLoad_CTC_Val ;
    2ed8:	ec e5       	ldi	r30, 0x5C	; 92
    2eda:	f0 e0       	ldi	r31, 0x00	; 0
    2edc:	84 ef       	ldi	r24, 0xF4	; 244
    2ede:	80 83       	st	Z, r24

            			/*Timer0 Compare Match Interrupt Enable*/
            			#if   TIMER_0_CTC_INTERRUPT == TIMER_CTC_Interrupt_Enable
       			     	    SET_BIT(TIMSK ,OCIE0) ;
    2ee0:	a9 e5       	ldi	r26, 0x59	; 89
    2ee2:	b0 e0       	ldi	r27, 0x00	; 0
    2ee4:	e9 e5       	ldi	r30, 0x59	; 89
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	80 81       	ld	r24, Z
    2eea:	82 60       	ori	r24, 0x02	; 2
    2eec:	8c 93       	st	X, r24
            				#error "Wrong TIMER_0_CTC_INTERRUPT Config"
            			#endif

              			/*Timer0 Fast PWM Options*/
              			#if   TIMER_0_CTC_OPTION == TIMER_OC0_Disconnected
              				CLR_BIT(TCCR0 ,COM00) ;
    2eee:	a3 e5       	ldi	r26, 0x53	; 83
    2ef0:	b0 e0       	ldi	r27, 0x00	; 0
    2ef2:	e3 e5       	ldi	r30, 0x53	; 83
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	80 81       	ld	r24, Z
    2ef8:	8f 7e       	andi	r24, 0xEF	; 239
    2efa:	8c 93       	st	X, r24
              				CLR_BIT(TCCR0 ,COM01) ;
    2efc:	a3 e5       	ldi	r26, 0x53	; 83
    2efe:	b0 e0       	ldi	r27, 0x00	; 0
    2f00:	e3 e5       	ldi	r30, 0x53	; 83
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	80 81       	ld	r24, Z
    2f06:	8f 7d       	andi	r24, 0xDF	; 223
    2f08:	8c 93       	st	X, r24
	                    	#error "Wrong TIMER_0_FAST_PWM_OPTION Config"
	                  #endif

#endif

	                    	TCCR0 &= TIMER_0_PRESCALER_MASK ;
    2f0a:	a3 e5       	ldi	r26, 0x53	; 83
    2f0c:	b0 e0       	ldi	r27, 0x00	; 0
    2f0e:	e3 e5       	ldi	r30, 0x53	; 83
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	80 81       	ld	r24, Z
    2f14:	88 7f       	andi	r24, 0xF8	; 248
    2f16:	8c 93       	st	X, r24
	                    	TCCR0 |= TIMER_0_PRESCALER ;
    2f18:	a3 e5       	ldi	r26, 0x53	; 83
    2f1a:	b0 e0       	ldi	r27, 0x00	; 0
    2f1c:	e3 e5       	ldi	r30, 0x53	; 83
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	80 81       	ld	r24, Z
    2f22:	85 60       	ori	r24, 0x05	; 5
    2f24:	8c 93       	st	X, r24
}
    2f26:	cf 91       	pop	r28
    2f28:	df 91       	pop	r29
    2f2a:	08 95       	ret

00002f2c <TIMER_0_voidSetOVPreload>:

void TIMER_0_voidSetOVPreload (u8 Copy_u8Preload)
{
    2f2c:	df 93       	push	r29
    2f2e:	cf 93       	push	r28
    2f30:	0f 92       	push	r0
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
    2f36:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload ;
    2f38:	e2 e5       	ldi	r30, 0x52	; 82
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	89 81       	ldd	r24, Y+1	; 0x01
    2f3e:	80 83       	st	Z, r24
}
    2f40:	0f 90       	pop	r0
    2f42:	cf 91       	pop	r28
    2f44:	df 91       	pop	r29
    2f46:	08 95       	ret

00002f48 <TIMER_0_voidSetCTCPreload>:

void TIMER_0_voidSetCTCPreload (u8 Copy_u8CTC)
{
    2f48:	df 93       	push	r29
    2f4a:	cf 93       	push	r28
    2f4c:	0f 92       	push	r0
    2f4e:	cd b7       	in	r28, 0x3d	; 61
    2f50:	de b7       	in	r29, 0x3e	; 62
    2f52:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTC ;
    2f54:	ec e5       	ldi	r30, 0x5C	; 92
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	89 81       	ldd	r24, Y+1	; 0x01
    2f5a:	80 83       	st	Z, r24
}
    2f5c:	0f 90       	pop	r0
    2f5e:	cf 91       	pop	r28
    2f60:	df 91       	pop	r29
    2f62:	08 95       	ret

00002f64 <TIMER_0_u8GetCounterValue>:


u8 TIMER_0_u8GetCounterValue (void)
{
    2f64:	df 93       	push	r29
    2f66:	cf 93       	push	r28
    2f68:	cd b7       	in	r28, 0x3d	; 61
    2f6a:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
    2f6c:	e2 e5       	ldi	r30, 0x52	; 82
    2f6e:	f0 e0       	ldi	r31, 0x00	; 0
    2f70:	80 81       	ld	r24, Z
}
    2f72:	cf 91       	pop	r28
    2f74:	df 91       	pop	r29
    2f76:	08 95       	ret

00002f78 <TIMER_0_VoidCTC_ISR>:

void   TIMER_0_VoidCTC_ISR(void (*FuncPtrCTCTimer0)(void) )
{
    2f78:	df 93       	push	r29
    2f7a:	cf 93       	push	r28
    2f7c:	00 d0       	rcall	.+0      	; 0x2f7e <TIMER_0_VoidCTC_ISR+0x6>
    2f7e:	cd b7       	in	r28, 0x3d	; 61
    2f80:	de b7       	in	r29, 0x3e	; 62
    2f82:	9a 83       	std	Y+2, r25	; 0x02
    2f84:	89 83       	std	Y+1, r24	; 0x01
	GlobalPtrCTCTimer0 = FuncPtrCTCTimer0;
    2f86:	89 81       	ldd	r24, Y+1	; 0x01
    2f88:	9a 81       	ldd	r25, Y+2	; 0x02
    2f8a:	90 93 80 00 	sts	0x0080, r25
    2f8e:	80 93 7f 00 	sts	0x007F, r24
}
    2f92:	0f 90       	pop	r0
    2f94:	0f 90       	pop	r0
    2f96:	cf 91       	pop	r28
    2f98:	df 91       	pop	r29
    2f9a:	08 95       	ret

00002f9c <TIMER_0_VoidOV_ISR>:
void   TIMER_0_VoidOV_ISR(void (*FuncPtrOVTimer0) (void) )
{
    2f9c:	df 93       	push	r29
    2f9e:	cf 93       	push	r28
    2fa0:	00 d0       	rcall	.+0      	; 0x2fa2 <TIMER_0_VoidOV_ISR+0x6>
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62
    2fa6:	9a 83       	std	Y+2, r25	; 0x02
    2fa8:	89 83       	std	Y+1, r24	; 0x01
	GlobalPtrOVTimer0 = FuncPtrOVTimer0 ;
    2faa:	89 81       	ldd	r24, Y+1	; 0x01
    2fac:	9a 81       	ldd	r25, Y+2	; 0x02
    2fae:	90 93 82 00 	sts	0x0082, r25
    2fb2:	80 93 81 00 	sts	0x0081, r24
}
    2fb6:	0f 90       	pop	r0
    2fb8:	0f 90       	pop	r0
    2fba:	cf 91       	pop	r28
    2fbc:	df 91       	pop	r29
    2fbe:	08 95       	ret

00002fc0 <TIMER_0_VoidPause>:

void TIMER_0_VoidPause(void)
{
    2fc0:	df 93       	push	r29
    2fc2:	cf 93       	push	r28
    2fc4:	cd b7       	in	r28, 0x3d	; 61
    2fc6:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= TIMER_0_PRESCALER_MASK ;
    2fc8:	a3 e5       	ldi	r26, 0x53	; 83
    2fca:	b0 e0       	ldi	r27, 0x00	; 0
    2fcc:	e3 e5       	ldi	r30, 0x53	; 83
    2fce:	f0 e0       	ldi	r31, 0x00	; 0
    2fd0:	80 81       	ld	r24, Z
    2fd2:	88 7f       	andi	r24, 0xF8	; 248
    2fd4:	8c 93       	st	X, r24
	TCCR0 |= TIMER_0_NO_CLOCK_SOURCE ;
    2fd6:	a3 e5       	ldi	r26, 0x53	; 83
    2fd8:	b0 e0       	ldi	r27, 0x00	; 0
    2fda:	e3 e5       	ldi	r30, 0x53	; 83
    2fdc:	f0 e0       	ldi	r31, 0x00	; 0
    2fde:	80 81       	ld	r24, Z
    2fe0:	8c 93       	st	X, r24
}
    2fe2:	cf 91       	pop	r28
    2fe4:	df 91       	pop	r29
    2fe6:	08 95       	ret

00002fe8 <TIMER_0_VoidContinue>:

void TIMER_0_VoidContinue(void)
{
    2fe8:	df 93       	push	r29
    2fea:	cf 93       	push	r28
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= TIMER_0_PRESCALER_MASK ;
    2ff0:	a3 e5       	ldi	r26, 0x53	; 83
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
    2ff4:	e3 e5       	ldi	r30, 0x53	; 83
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	80 81       	ld	r24, Z
    2ffa:	88 7f       	andi	r24, 0xF8	; 248
    2ffc:	8c 93       	st	X, r24
	TCCR0 |= TIMER_0_PRESCALER ;
    2ffe:	a3 e5       	ldi	r26, 0x53	; 83
    3000:	b0 e0       	ldi	r27, 0x00	; 0
    3002:	e3 e5       	ldi	r30, 0x53	; 83
    3004:	f0 e0       	ldi	r31, 0x00	; 0
    3006:	80 81       	ld	r24, Z
    3008:	85 60       	ori	r24, 0x05	; 5
    300a:	8c 93       	st	X, r24
}
    300c:	cf 91       	pop	r28
    300e:	df 91       	pop	r29
    3010:	08 95       	ret

00003012 <StopWatch_stop>:
u8 d3  = 0;
u8 d4  = 0;
u8 counter  = 0;

void StopWatch_stop(void)
{
    3012:	df 93       	push	r29
    3014:	cf 93       	push	r28
    3016:	cd b7       	in	r28, 0x3d	; 61
    3018:	de b7       	in	r29, 0x3e	; 62
	TIMER_0_VoidPause();
    301a:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <TIMER_0_VoidPause>
	 d1  = 0;
    301e:	10 92 83 00 	sts	0x0083, r1
     d2  = 0;
    3022:	10 92 84 00 	sts	0x0084, r1
	 d3  = 0;
    3026:	10 92 85 00 	sts	0x0085, r1
	 d4  = 0;
    302a:	10 92 86 00 	sts	0x0086, r1
}
    302e:	cf 91       	pop	r28
    3030:	df 91       	pop	r29
    3032:	08 95       	ret

00003034 <StopWatch_Cont>:

void StopWatch_Cont(void)
{
    3034:	df 93       	push	r29
    3036:	cf 93       	push	r28
    3038:	cd b7       	in	r28, 0x3d	; 61
    303a:	de b7       	in	r29, 0x3e	; 62
	TIMER_0_VoidContinue();
    303c:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <TIMER_0_VoidContinue>
}
    3040:	cf 91       	pop	r28
    3042:	df 91       	pop	r29
    3044:	08 95       	ret

00003046 <Time_Function>:


void Time_Function ()
{
    3046:	df 93       	push	r29
    3048:	cf 93       	push	r28
    304a:	cd b7       	in	r28, 0x3d	; 61
    304c:	de b7       	in	r29, 0x3e	; 62
	counter++;
    304e:	80 91 87 00 	lds	r24, 0x0087
    3052:	8f 5f       	subi	r24, 0xFF	; 255
    3054:	80 93 87 00 	sts	0x0087, r24

  if(counter == 4)
    3058:	80 91 87 00 	lds	r24, 0x0087
    305c:	84 30       	cpi	r24, 0x04	; 4
    305e:	41 f5       	brne	.+80     	; 0x30b0 <Time_Function+0x6a>
  {
	  counter = 0;
    3060:	10 92 87 00 	sts	0x0087, r1
	  d1++;
    3064:	80 91 83 00 	lds	r24, 0x0083
    3068:	8f 5f       	subi	r24, 0xFF	; 255
    306a:	80 93 83 00 	sts	0x0083, r24

	  if( d1 == 10)
    306e:	80 91 83 00 	lds	r24, 0x0083
    3072:	8a 30       	cpi	r24, 0x0A	; 10
    3074:	e9 f4       	brne	.+58     	; 0x30b0 <Time_Function+0x6a>
	    {
			d1=0;
    3076:	10 92 83 00 	sts	0x0083, r1
			d2++;
    307a:	80 91 84 00 	lds	r24, 0x0084
    307e:	8f 5f       	subi	r24, 0xFF	; 255
    3080:	80 93 84 00 	sts	0x0084, r24

			if (d2 == 10)
    3084:	80 91 84 00 	lds	r24, 0x0084
    3088:	8a 30       	cpi	r24, 0x0A	; 10
    308a:	91 f4       	brne	.+36     	; 0x30b0 <Time_Function+0x6a>
			{
				d2=0;
    308c:	10 92 84 00 	sts	0x0084, r1
				d3++;
    3090:	80 91 85 00 	lds	r24, 0x0085
    3094:	8f 5f       	subi	r24, 0xFF	; 255
    3096:	80 93 85 00 	sts	0x0085, r24

				if (d3 == 10)
    309a:	80 91 85 00 	lds	r24, 0x0085
    309e:	8a 30       	cpi	r24, 0x0A	; 10
    30a0:	39 f4       	brne	.+14     	; 0x30b0 <Time_Function+0x6a>
				{
					d3=0;
    30a2:	10 92 85 00 	sts	0x0085, r1
					d4++;
    30a6:	80 91 86 00 	lds	r24, 0x0086
    30aa:	8f 5f       	subi	r24, 0xFF	; 255
    30ac:	80 93 86 00 	sts	0x0086, r24
			}
	    }

  }

}
    30b0:	cf 91       	pop	r28
    30b2:	df 91       	pop	r29
    30b4:	08 95       	ret

000030b6 <main>:


int main (void)
{
    30b6:	df 93       	push	r29
    30b8:	cf 93       	push	r28
    30ba:	cd b7       	in	r28, 0x3d	; 61
    30bc:	de b7       	in	r29, 0x3e	; 62
    30be:	e8 97       	sbiw	r28, 0x38	; 56
    30c0:	0f b6       	in	r0, 0x3f	; 63
    30c2:	f8 94       	cli
    30c4:	de bf       	out	0x3e, r29	; 62
    30c6:	0f be       	out	0x3f, r0	; 63
    30c8:	cd bf       	out	0x3d, r28	; 61
//-----------------------------------------------------------------------------------------------------------------------------------------
// COMMON ANODE (4 DIGITS)7SEGMENTS
SevenSeg_VoidInit();
    30ca:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <SevenSeg_VoidInit>
//-----------------------------------------------------------------------------------------------------------------------------------------
DIO_SetPotDirection(PORTD , INPUT);
    30ce:	83 e0       	ldi	r24, 0x03	; 3
    30d0:	60 e0       	ldi	r22, 0x00	; 0
    30d2:	0e 94 d4 05 	call	0xba8	; 0xba8 <DIO_SetPotDirection>
DIO_SetPortValue(PORTD ,LOW);
    30d6:	83 e0       	ldi	r24, 0x03	; 3
    30d8:	60 e0       	ldi	r22, 0x00	; 0
    30da:	0e 94 4d 06 	call	0xc9a	; 0xc9a <DIO_SetPortValue>
//-----------------------------------------------------------------------------------------------------------------------------------------
EXTI_GI_Enable();
    30de:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <EXTI_GI_Enable>
TIMER_0_voidInit();
    30e2:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <TIMER_0_voidInit>
TIMER_0_VoidCTC_ISR( &Time_Function ) ;
    30e6:	83 e2       	ldi	r24, 0x23	; 35
    30e8:	98 e1       	ldi	r25, 0x18	; 24
    30ea:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <TIMER_0_VoidCTC_ISR>
//-----------------------------------------------------------------------------------------------------------------------------------------
EXTI_Initialize();
    30ee:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <EXTI_Initialize>
EXTI_0_SendToISR( &StopWatch_stop);
    30f2:	89 e0       	ldi	r24, 0x09	; 9
    30f4:	98 e1       	ldi	r25, 0x18	; 24
    30f6:	0e 94 22 0b 	call	0x1644	; 0x1644 <EXTI_0_SendToISR>
EXTI_1_SendToISR( &StopWatch_Cont);
    30fa:	8a e1       	ldi	r24, 0x1A	; 26
    30fc:	98 e1       	ldi	r25, 0x18	; 24
    30fe:	0e 94 67 0b 	call	0x16ce	; 0x16ce <EXTI_1_SendToISR>
//-----------------------------------------------------------------------------------------------------------------------------------------
while (1)
    {


	 PORTC_ = 0b00000001;
    3102:	e5 e3       	ldi	r30, 0x35	; 53
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	80 83       	st	Z, r24
	 SevenSeg_VoidWrite(d1);
    310a:	80 91 83 00 	lds	r24, 0x0083
    310e:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <SevenSeg_VoidWrite>
    3112:	80 e0       	ldi	r24, 0x00	; 0
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	a0 ea       	ldi	r26, 0xA0	; 160
    3118:	b0 e4       	ldi	r27, 0x40	; 64
    311a:	8d ab       	std	Y+53, r24	; 0x35
    311c:	9e ab       	std	Y+54, r25	; 0x36
    311e:	af ab       	std	Y+55, r26	; 0x37
    3120:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3122:	6d a9       	ldd	r22, Y+53	; 0x35
    3124:	7e a9       	ldd	r23, Y+54	; 0x36
    3126:	8f a9       	ldd	r24, Y+55	; 0x37
    3128:	98 ad       	ldd	r25, Y+56	; 0x38
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	4a e7       	ldi	r20, 0x7A	; 122
    3130:	53 e4       	ldi	r21, 0x43	; 67
    3132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3136:	dc 01       	movw	r26, r24
    3138:	cb 01       	movw	r24, r22
    313a:	89 ab       	std	Y+49, r24	; 0x31
    313c:	9a ab       	std	Y+50, r25	; 0x32
    313e:	ab ab       	std	Y+51, r26	; 0x33
    3140:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3142:	69 a9       	ldd	r22, Y+49	; 0x31
    3144:	7a a9       	ldd	r23, Y+50	; 0x32
    3146:	8b a9       	ldd	r24, Y+51	; 0x33
    3148:	9c a9       	ldd	r25, Y+52	; 0x34
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	40 e8       	ldi	r20, 0x80	; 128
    3150:	5f e3       	ldi	r21, 0x3F	; 63
    3152:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3156:	88 23       	and	r24, r24
    3158:	2c f4       	brge	.+10     	; 0x3164 <main+0xae>
		__ticks = 1;
    315a:	81 e0       	ldi	r24, 0x01	; 1
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	98 ab       	std	Y+48, r25	; 0x30
    3160:	8f a7       	std	Y+47, r24	; 0x2f
    3162:	3f c0       	rjmp	.+126    	; 0x31e2 <main+0x12c>
	else if (__tmp > 65535)
    3164:	69 a9       	ldd	r22, Y+49	; 0x31
    3166:	7a a9       	ldd	r23, Y+50	; 0x32
    3168:	8b a9       	ldd	r24, Y+51	; 0x33
    316a:	9c a9       	ldd	r25, Y+52	; 0x34
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	3f ef       	ldi	r19, 0xFF	; 255
    3170:	4f e7       	ldi	r20, 0x7F	; 127
    3172:	57 e4       	ldi	r21, 0x47	; 71
    3174:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3178:	18 16       	cp	r1, r24
    317a:	4c f5       	brge	.+82     	; 0x31ce <main+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    317c:	6d a9       	ldd	r22, Y+53	; 0x35
    317e:	7e a9       	ldd	r23, Y+54	; 0x36
    3180:	8f a9       	ldd	r24, Y+55	; 0x37
    3182:	98 ad       	ldd	r25, Y+56	; 0x38
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	40 e2       	ldi	r20, 0x20	; 32
    318a:	51 e4       	ldi	r21, 0x41	; 65
    318c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	bc 01       	movw	r22, r24
    3196:	cd 01       	movw	r24, r26
    3198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319c:	dc 01       	movw	r26, r24
    319e:	cb 01       	movw	r24, r22
    31a0:	98 ab       	std	Y+48, r25	; 0x30
    31a2:	8f a7       	std	Y+47, r24	; 0x2f
    31a4:	0f c0       	rjmp	.+30     	; 0x31c4 <main+0x10e>
    31a6:	89 e1       	ldi	r24, 0x19	; 25
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	9e a7       	std	Y+46, r25	; 0x2e
    31ac:	8d a7       	std	Y+45, r24	; 0x2d
    31ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    31b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    31b2:	01 97       	sbiw	r24, 0x01	; 1
    31b4:	f1 f7       	brne	.-4      	; 0x31b2 <main+0xfc>
    31b6:	9e a7       	std	Y+46, r25	; 0x2e
    31b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    31bc:	98 a9       	ldd	r25, Y+48	; 0x30
    31be:	01 97       	sbiw	r24, 0x01	; 1
    31c0:	98 ab       	std	Y+48, r25	; 0x30
    31c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    31c6:	98 a9       	ldd	r25, Y+48	; 0x30
    31c8:	00 97       	sbiw	r24, 0x00	; 0
    31ca:	69 f7       	brne	.-38     	; 0x31a6 <main+0xf0>
    31cc:	14 c0       	rjmp	.+40     	; 0x31f6 <main+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ce:	69 a9       	ldd	r22, Y+49	; 0x31
    31d0:	7a a9       	ldd	r23, Y+50	; 0x32
    31d2:	8b a9       	ldd	r24, Y+51	; 0x33
    31d4:	9c a9       	ldd	r25, Y+52	; 0x34
    31d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	98 ab       	std	Y+48, r25	; 0x30
    31e0:	8f a7       	std	Y+47, r24	; 0x2f
    31e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    31e4:	98 a9       	ldd	r25, Y+48	; 0x30
    31e6:	9c a7       	std	Y+44, r25	; 0x2c
    31e8:	8b a7       	std	Y+43, r24	; 0x2b
    31ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    31ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    31ee:	01 97       	sbiw	r24, 0x01	; 1
    31f0:	f1 f7       	brne	.-4      	; 0x31ee <main+0x138>
    31f2:	9c a7       	std	Y+44, r25	; 0x2c
    31f4:	8b a7       	std	Y+43, r24	; 0x2b
	 _delay_ms(5);
	 PORTC_ = 0b00000010;
    31f6:	e5 e3       	ldi	r30, 0x35	; 53
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	82 e0       	ldi	r24, 0x02	; 2
    31fc:	80 83       	st	Z, r24
	 SevenSeg_VoidWrite(d2);
    31fe:	80 91 84 00 	lds	r24, 0x0084
    3202:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <SevenSeg_VoidWrite>
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	a0 ea       	ldi	r26, 0xA0	; 160
    320c:	b0 e4       	ldi	r27, 0x40	; 64
    320e:	8f a3       	std	Y+39, r24	; 0x27
    3210:	98 a7       	std	Y+40, r25	; 0x28
    3212:	a9 a7       	std	Y+41, r26	; 0x29
    3214:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3216:	6f a1       	ldd	r22, Y+39	; 0x27
    3218:	78 a5       	ldd	r23, Y+40	; 0x28
    321a:	89 a5       	ldd	r24, Y+41	; 0x29
    321c:	9a a5       	ldd	r25, Y+42	; 0x2a
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	4a e7       	ldi	r20, 0x7A	; 122
    3224:	53 e4       	ldi	r21, 0x43	; 67
    3226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322a:	dc 01       	movw	r26, r24
    322c:	cb 01       	movw	r24, r22
    322e:	8b a3       	std	Y+35, r24	; 0x23
    3230:	9c a3       	std	Y+36, r25	; 0x24
    3232:	ad a3       	std	Y+37, r26	; 0x25
    3234:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3236:	6b a1       	ldd	r22, Y+35	; 0x23
    3238:	7c a1       	ldd	r23, Y+36	; 0x24
    323a:	8d a1       	ldd	r24, Y+37	; 0x25
    323c:	9e a1       	ldd	r25, Y+38	; 0x26
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	40 e8       	ldi	r20, 0x80	; 128
    3244:	5f e3       	ldi	r21, 0x3F	; 63
    3246:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    324a:	88 23       	and	r24, r24
    324c:	2c f4       	brge	.+10     	; 0x3258 <main+0x1a2>
		__ticks = 1;
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	9a a3       	std	Y+34, r25	; 0x22
    3254:	89 a3       	std	Y+33, r24	; 0x21
    3256:	3f c0       	rjmp	.+126    	; 0x32d6 <main+0x220>
	else if (__tmp > 65535)
    3258:	6b a1       	ldd	r22, Y+35	; 0x23
    325a:	7c a1       	ldd	r23, Y+36	; 0x24
    325c:	8d a1       	ldd	r24, Y+37	; 0x25
    325e:	9e a1       	ldd	r25, Y+38	; 0x26
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	3f ef       	ldi	r19, 0xFF	; 255
    3264:	4f e7       	ldi	r20, 0x7F	; 127
    3266:	57 e4       	ldi	r21, 0x47	; 71
    3268:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    326c:	18 16       	cp	r1, r24
    326e:	4c f5       	brge	.+82     	; 0x32c2 <main+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3270:	6f a1       	ldd	r22, Y+39	; 0x27
    3272:	78 a5       	ldd	r23, Y+40	; 0x28
    3274:	89 a5       	ldd	r24, Y+41	; 0x29
    3276:	9a a5       	ldd	r25, Y+42	; 0x2a
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	40 e2       	ldi	r20, 0x20	; 32
    327e:	51 e4       	ldi	r21, 0x41	; 65
    3280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	bc 01       	movw	r22, r24
    328a:	cd 01       	movw	r24, r26
    328c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	9a a3       	std	Y+34, r25	; 0x22
    3296:	89 a3       	std	Y+33, r24	; 0x21
    3298:	0f c0       	rjmp	.+30     	; 0x32b8 <main+0x202>
    329a:	89 e1       	ldi	r24, 0x19	; 25
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	98 a3       	std	Y+32, r25	; 0x20
    32a0:	8f 8f       	std	Y+31, r24	; 0x1f
    32a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32a4:	98 a1       	ldd	r25, Y+32	; 0x20
    32a6:	01 97       	sbiw	r24, 0x01	; 1
    32a8:	f1 f7       	brne	.-4      	; 0x32a6 <main+0x1f0>
    32aa:	98 a3       	std	Y+32, r25	; 0x20
    32ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ae:	89 a1       	ldd	r24, Y+33	; 0x21
    32b0:	9a a1       	ldd	r25, Y+34	; 0x22
    32b2:	01 97       	sbiw	r24, 0x01	; 1
    32b4:	9a a3       	std	Y+34, r25	; 0x22
    32b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b8:	89 a1       	ldd	r24, Y+33	; 0x21
    32ba:	9a a1       	ldd	r25, Y+34	; 0x22
    32bc:	00 97       	sbiw	r24, 0x00	; 0
    32be:	69 f7       	brne	.-38     	; 0x329a <main+0x1e4>
    32c0:	14 c0       	rjmp	.+40     	; 0x32ea <main+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c2:	6b a1       	ldd	r22, Y+35	; 0x23
    32c4:	7c a1       	ldd	r23, Y+36	; 0x24
    32c6:	8d a1       	ldd	r24, Y+37	; 0x25
    32c8:	9e a1       	ldd	r25, Y+38	; 0x26
    32ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	9a a3       	std	Y+34, r25	; 0x22
    32d4:	89 a3       	std	Y+33, r24	; 0x21
    32d6:	89 a1       	ldd	r24, Y+33	; 0x21
    32d8:	9a a1       	ldd	r25, Y+34	; 0x22
    32da:	9e 8f       	std	Y+30, r25	; 0x1e
    32dc:	8d 8f       	std	Y+29, r24	; 0x1d
    32de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	f1 f7       	brne	.-4      	; 0x32e2 <main+0x22c>
    32e6:	9e 8f       	std	Y+30, r25	; 0x1e
    32e8:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(5);
	 PORTC_ = 0b00000100;
    32ea:	e5 e3       	ldi	r30, 0x35	; 53
    32ec:	f0 e0       	ldi	r31, 0x00	; 0
    32ee:	84 e0       	ldi	r24, 0x04	; 4
    32f0:	80 83       	st	Z, r24
	 SevenSeg_VoidWrite(d3);
    32f2:	80 91 85 00 	lds	r24, 0x0085
    32f6:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <SevenSeg_VoidWrite>
    32fa:	80 e0       	ldi	r24, 0x00	; 0
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	a0 ea       	ldi	r26, 0xA0	; 160
    3300:	b0 e4       	ldi	r27, 0x40	; 64
    3302:	89 8f       	std	Y+25, r24	; 0x19
    3304:	9a 8f       	std	Y+26, r25	; 0x1a
    3306:	ab 8f       	std	Y+27, r26	; 0x1b
    3308:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    330a:	69 8d       	ldd	r22, Y+25	; 0x19
    330c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    330e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3310:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	4a e7       	ldi	r20, 0x7A	; 122
    3318:	53 e4       	ldi	r21, 0x43	; 67
    331a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    331e:	dc 01       	movw	r26, r24
    3320:	cb 01       	movw	r24, r22
    3322:	8d 8b       	std	Y+21, r24	; 0x15
    3324:	9e 8b       	std	Y+22, r25	; 0x16
    3326:	af 8b       	std	Y+23, r26	; 0x17
    3328:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    332a:	6d 89       	ldd	r22, Y+21	; 0x15
    332c:	7e 89       	ldd	r23, Y+22	; 0x16
    332e:	8f 89       	ldd	r24, Y+23	; 0x17
    3330:	98 8d       	ldd	r25, Y+24	; 0x18
    3332:	20 e0       	ldi	r18, 0x00	; 0
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	40 e8       	ldi	r20, 0x80	; 128
    3338:	5f e3       	ldi	r21, 0x3F	; 63
    333a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    333e:	88 23       	and	r24, r24
    3340:	2c f4       	brge	.+10     	; 0x334c <main+0x296>
		__ticks = 1;
    3342:	81 e0       	ldi	r24, 0x01	; 1
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	9c 8b       	std	Y+20, r25	; 0x14
    3348:	8b 8b       	std	Y+19, r24	; 0x13
    334a:	3f c0       	rjmp	.+126    	; 0x33ca <main+0x314>
	else if (__tmp > 65535)
    334c:	6d 89       	ldd	r22, Y+21	; 0x15
    334e:	7e 89       	ldd	r23, Y+22	; 0x16
    3350:	8f 89       	ldd	r24, Y+23	; 0x17
    3352:	98 8d       	ldd	r25, Y+24	; 0x18
    3354:	20 e0       	ldi	r18, 0x00	; 0
    3356:	3f ef       	ldi	r19, 0xFF	; 255
    3358:	4f e7       	ldi	r20, 0x7F	; 127
    335a:	57 e4       	ldi	r21, 0x47	; 71
    335c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3360:	18 16       	cp	r1, r24
    3362:	4c f5       	brge	.+82     	; 0x33b6 <main+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3364:	69 8d       	ldd	r22, Y+25	; 0x19
    3366:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3368:	8b 8d       	ldd	r24, Y+27	; 0x1b
    336a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    336c:	20 e0       	ldi	r18, 0x00	; 0
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	40 e2       	ldi	r20, 0x20	; 32
    3372:	51 e4       	ldi	r21, 0x41	; 65
    3374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3378:	dc 01       	movw	r26, r24
    337a:	cb 01       	movw	r24, r22
    337c:	bc 01       	movw	r22, r24
    337e:	cd 01       	movw	r24, r26
    3380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3384:	dc 01       	movw	r26, r24
    3386:	cb 01       	movw	r24, r22
    3388:	9c 8b       	std	Y+20, r25	; 0x14
    338a:	8b 8b       	std	Y+19, r24	; 0x13
    338c:	0f c0       	rjmp	.+30     	; 0x33ac <main+0x2f6>
    338e:	89 e1       	ldi	r24, 0x19	; 25
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	9a 8b       	std	Y+18, r25	; 0x12
    3394:	89 8b       	std	Y+17, r24	; 0x11
    3396:	89 89       	ldd	r24, Y+17	; 0x11
    3398:	9a 89       	ldd	r25, Y+18	; 0x12
    339a:	01 97       	sbiw	r24, 0x01	; 1
    339c:	f1 f7       	brne	.-4      	; 0x339a <main+0x2e4>
    339e:	9a 8b       	std	Y+18, r25	; 0x12
    33a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33a2:	8b 89       	ldd	r24, Y+19	; 0x13
    33a4:	9c 89       	ldd	r25, Y+20	; 0x14
    33a6:	01 97       	sbiw	r24, 0x01	; 1
    33a8:	9c 8b       	std	Y+20, r25	; 0x14
    33aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ac:	8b 89       	ldd	r24, Y+19	; 0x13
    33ae:	9c 89       	ldd	r25, Y+20	; 0x14
    33b0:	00 97       	sbiw	r24, 0x00	; 0
    33b2:	69 f7       	brne	.-38     	; 0x338e <main+0x2d8>
    33b4:	14 c0       	rjmp	.+40     	; 0x33de <main+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33b6:	6d 89       	ldd	r22, Y+21	; 0x15
    33b8:	7e 89       	ldd	r23, Y+22	; 0x16
    33ba:	8f 89       	ldd	r24, Y+23	; 0x17
    33bc:	98 8d       	ldd	r25, Y+24	; 0x18
    33be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c2:	dc 01       	movw	r26, r24
    33c4:	cb 01       	movw	r24, r22
    33c6:	9c 8b       	std	Y+20, r25	; 0x14
    33c8:	8b 8b       	std	Y+19, r24	; 0x13
    33ca:	8b 89       	ldd	r24, Y+19	; 0x13
    33cc:	9c 89       	ldd	r25, Y+20	; 0x14
    33ce:	98 8b       	std	Y+16, r25	; 0x10
    33d0:	8f 87       	std	Y+15, r24	; 0x0f
    33d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    33d4:	98 89       	ldd	r25, Y+16	; 0x10
    33d6:	01 97       	sbiw	r24, 0x01	; 1
    33d8:	f1 f7       	brne	.-4      	; 0x33d6 <main+0x320>
    33da:	98 8b       	std	Y+16, r25	; 0x10
    33dc:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(5);
	 PORTC_ = 0b00001000;
    33de:	e5 e3       	ldi	r30, 0x35	; 53
    33e0:	f0 e0       	ldi	r31, 0x00	; 0
    33e2:	88 e0       	ldi	r24, 0x08	; 8
    33e4:	80 83       	st	Z, r24
	 SevenSeg_VoidWrite(d4);
    33e6:	80 91 86 00 	lds	r24, 0x0086
    33ea:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <SevenSeg_VoidWrite>
    33ee:	80 e0       	ldi	r24, 0x00	; 0
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	a0 ea       	ldi	r26, 0xA0	; 160
    33f4:	b0 e4       	ldi	r27, 0x40	; 64
    33f6:	8b 87       	std	Y+11, r24	; 0x0b
    33f8:	9c 87       	std	Y+12, r25	; 0x0c
    33fa:	ad 87       	std	Y+13, r26	; 0x0d
    33fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3400:	7c 85       	ldd	r23, Y+12	; 0x0c
    3402:	8d 85       	ldd	r24, Y+13	; 0x0d
    3404:	9e 85       	ldd	r25, Y+14	; 0x0e
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	4a e7       	ldi	r20, 0x7A	; 122
    340c:	53 e4       	ldi	r21, 0x43	; 67
    340e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	8f 83       	std	Y+7, r24	; 0x07
    3418:	98 87       	std	Y+8, r25	; 0x08
    341a:	a9 87       	std	Y+9, r26	; 0x09
    341c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    341e:	6f 81       	ldd	r22, Y+7	; 0x07
    3420:	78 85       	ldd	r23, Y+8	; 0x08
    3422:	89 85       	ldd	r24, Y+9	; 0x09
    3424:	9a 85       	ldd	r25, Y+10	; 0x0a
    3426:	20 e0       	ldi	r18, 0x00	; 0
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	40 e8       	ldi	r20, 0x80	; 128
    342c:	5f e3       	ldi	r21, 0x3F	; 63
    342e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3432:	88 23       	and	r24, r24
    3434:	2c f4       	brge	.+10     	; 0x3440 <main+0x38a>
		__ticks = 1;
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	9e 83       	std	Y+6, r25	; 0x06
    343c:	8d 83       	std	Y+5, r24	; 0x05
    343e:	3f c0       	rjmp	.+126    	; 0x34be <main+0x408>
	else if (__tmp > 65535)
    3440:	6f 81       	ldd	r22, Y+7	; 0x07
    3442:	78 85       	ldd	r23, Y+8	; 0x08
    3444:	89 85       	ldd	r24, Y+9	; 0x09
    3446:	9a 85       	ldd	r25, Y+10	; 0x0a
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	3f ef       	ldi	r19, 0xFF	; 255
    344c:	4f e7       	ldi	r20, 0x7F	; 127
    344e:	57 e4       	ldi	r21, 0x47	; 71
    3450:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3454:	18 16       	cp	r1, r24
    3456:	4c f5       	brge	.+82     	; 0x34aa <main+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3458:	6b 85       	ldd	r22, Y+11	; 0x0b
    345a:	7c 85       	ldd	r23, Y+12	; 0x0c
    345c:	8d 85       	ldd	r24, Y+13	; 0x0d
    345e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3460:	20 e0       	ldi	r18, 0x00	; 0
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	40 e2       	ldi	r20, 0x20	; 32
    3466:	51 e4       	ldi	r21, 0x41	; 65
    3468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    346c:	dc 01       	movw	r26, r24
    346e:	cb 01       	movw	r24, r22
    3470:	bc 01       	movw	r22, r24
    3472:	cd 01       	movw	r24, r26
    3474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	9e 83       	std	Y+6, r25	; 0x06
    347e:	8d 83       	std	Y+5, r24	; 0x05
    3480:	0f c0       	rjmp	.+30     	; 0x34a0 <main+0x3ea>
    3482:	89 e1       	ldi	r24, 0x19	; 25
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	9c 83       	std	Y+4, r25	; 0x04
    3488:	8b 83       	std	Y+3, r24	; 0x03
    348a:	8b 81       	ldd	r24, Y+3	; 0x03
    348c:	9c 81       	ldd	r25, Y+4	; 0x04
    348e:	01 97       	sbiw	r24, 0x01	; 1
    3490:	f1 f7       	brne	.-4      	; 0x348e <main+0x3d8>
    3492:	9c 83       	std	Y+4, r25	; 0x04
    3494:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3496:	8d 81       	ldd	r24, Y+5	; 0x05
    3498:	9e 81       	ldd	r25, Y+6	; 0x06
    349a:	01 97       	sbiw	r24, 0x01	; 1
    349c:	9e 83       	std	Y+6, r25	; 0x06
    349e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a0:	8d 81       	ldd	r24, Y+5	; 0x05
    34a2:	9e 81       	ldd	r25, Y+6	; 0x06
    34a4:	00 97       	sbiw	r24, 0x00	; 0
    34a6:	69 f7       	brne	.-38     	; 0x3482 <main+0x3cc>
    34a8:	14 c0       	rjmp	.+40     	; 0x34d2 <main+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34aa:	6f 81       	ldd	r22, Y+7	; 0x07
    34ac:	78 85       	ldd	r23, Y+8	; 0x08
    34ae:	89 85       	ldd	r24, Y+9	; 0x09
    34b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b6:	dc 01       	movw	r26, r24
    34b8:	cb 01       	movw	r24, r22
    34ba:	9e 83       	std	Y+6, r25	; 0x06
    34bc:	8d 83       	std	Y+5, r24	; 0x05
    34be:	8d 81       	ldd	r24, Y+5	; 0x05
    34c0:	9e 81       	ldd	r25, Y+6	; 0x06
    34c2:	9a 83       	std	Y+2, r25	; 0x02
    34c4:	89 83       	std	Y+1, r24	; 0x01
    34c6:	89 81       	ldd	r24, Y+1	; 0x01
    34c8:	9a 81       	ldd	r25, Y+2	; 0x02
    34ca:	01 97       	sbiw	r24, 0x01	; 1
    34cc:	f1 f7       	brne	.-4      	; 0x34ca <main+0x414>
    34ce:	9a 83       	std	Y+2, r25	; 0x02
    34d0:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(5);


	    if(HIGH == DIO_GetPinValue(PORTD , PIN_4))
    34d2:	83 e0       	ldi	r24, 0x03	; 3
    34d4:	64 e0       	ldi	r22, 0x04	; 4
    34d6:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <DIO_GetPinValue>
    34da:	81 30       	cpi	r24, 0x01	; 1
    34dc:	09 f0       	breq	.+2      	; 0x34e0 <main+0x42a>
    34de:	11 ce       	rjmp	.-990    	; 0x3102 <main+0x4c>
	    {
	    	TIMER_0_VoidPause();
    34e0:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <TIMER_0_VoidPause>
    34e4:	0e ce       	rjmp	.-996    	; 0x3102 <main+0x4c>

000034e6 <__mulsi3>:
    34e6:	62 9f       	mul	r22, r18
    34e8:	d0 01       	movw	r26, r0
    34ea:	73 9f       	mul	r23, r19
    34ec:	f0 01       	movw	r30, r0
    34ee:	82 9f       	mul	r24, r18
    34f0:	e0 0d       	add	r30, r0
    34f2:	f1 1d       	adc	r31, r1
    34f4:	64 9f       	mul	r22, r20
    34f6:	e0 0d       	add	r30, r0
    34f8:	f1 1d       	adc	r31, r1
    34fa:	92 9f       	mul	r25, r18
    34fc:	f0 0d       	add	r31, r0
    34fe:	83 9f       	mul	r24, r19
    3500:	f0 0d       	add	r31, r0
    3502:	74 9f       	mul	r23, r20
    3504:	f0 0d       	add	r31, r0
    3506:	65 9f       	mul	r22, r21
    3508:	f0 0d       	add	r31, r0
    350a:	99 27       	eor	r25, r25
    350c:	72 9f       	mul	r23, r18
    350e:	b0 0d       	add	r27, r0
    3510:	e1 1d       	adc	r30, r1
    3512:	f9 1f       	adc	r31, r25
    3514:	63 9f       	mul	r22, r19
    3516:	b0 0d       	add	r27, r0
    3518:	e1 1d       	adc	r30, r1
    351a:	f9 1f       	adc	r31, r25
    351c:	bd 01       	movw	r22, r26
    351e:	cf 01       	movw	r24, r30
    3520:	11 24       	eor	r1, r1
    3522:	08 95       	ret

00003524 <__udivmodsi4>:
    3524:	a1 e2       	ldi	r26, 0x21	; 33
    3526:	1a 2e       	mov	r1, r26
    3528:	aa 1b       	sub	r26, r26
    352a:	bb 1b       	sub	r27, r27
    352c:	fd 01       	movw	r30, r26
    352e:	0d c0       	rjmp	.+26     	; 0x354a <__udivmodsi4_ep>

00003530 <__udivmodsi4_loop>:
    3530:	aa 1f       	adc	r26, r26
    3532:	bb 1f       	adc	r27, r27
    3534:	ee 1f       	adc	r30, r30
    3536:	ff 1f       	adc	r31, r31
    3538:	a2 17       	cp	r26, r18
    353a:	b3 07       	cpc	r27, r19
    353c:	e4 07       	cpc	r30, r20
    353e:	f5 07       	cpc	r31, r21
    3540:	20 f0       	brcs	.+8      	; 0x354a <__udivmodsi4_ep>
    3542:	a2 1b       	sub	r26, r18
    3544:	b3 0b       	sbc	r27, r19
    3546:	e4 0b       	sbc	r30, r20
    3548:	f5 0b       	sbc	r31, r21

0000354a <__udivmodsi4_ep>:
    354a:	66 1f       	adc	r22, r22
    354c:	77 1f       	adc	r23, r23
    354e:	88 1f       	adc	r24, r24
    3550:	99 1f       	adc	r25, r25
    3552:	1a 94       	dec	r1
    3554:	69 f7       	brne	.-38     	; 0x3530 <__udivmodsi4_loop>
    3556:	60 95       	com	r22
    3558:	70 95       	com	r23
    355a:	80 95       	com	r24
    355c:	90 95       	com	r25
    355e:	9b 01       	movw	r18, r22
    3560:	ac 01       	movw	r20, r24
    3562:	bd 01       	movw	r22, r26
    3564:	cf 01       	movw	r24, r30
    3566:	08 95       	ret

00003568 <__prologue_saves__>:
    3568:	2f 92       	push	r2
    356a:	3f 92       	push	r3
    356c:	4f 92       	push	r4
    356e:	5f 92       	push	r5
    3570:	6f 92       	push	r6
    3572:	7f 92       	push	r7
    3574:	8f 92       	push	r8
    3576:	9f 92       	push	r9
    3578:	af 92       	push	r10
    357a:	bf 92       	push	r11
    357c:	cf 92       	push	r12
    357e:	df 92       	push	r13
    3580:	ef 92       	push	r14
    3582:	ff 92       	push	r15
    3584:	0f 93       	push	r16
    3586:	1f 93       	push	r17
    3588:	cf 93       	push	r28
    358a:	df 93       	push	r29
    358c:	cd b7       	in	r28, 0x3d	; 61
    358e:	de b7       	in	r29, 0x3e	; 62
    3590:	ca 1b       	sub	r28, r26
    3592:	db 0b       	sbc	r29, r27
    3594:	0f b6       	in	r0, 0x3f	; 63
    3596:	f8 94       	cli
    3598:	de bf       	out	0x3e, r29	; 62
    359a:	0f be       	out	0x3f, r0	; 63
    359c:	cd bf       	out	0x3d, r28	; 61
    359e:	09 94       	ijmp

000035a0 <__epilogue_restores__>:
    35a0:	2a 88       	ldd	r2, Y+18	; 0x12
    35a2:	39 88       	ldd	r3, Y+17	; 0x11
    35a4:	48 88       	ldd	r4, Y+16	; 0x10
    35a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    35a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    35aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    35ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    35ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    35b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    35b2:	b9 84       	ldd	r11, Y+9	; 0x09
    35b4:	c8 84       	ldd	r12, Y+8	; 0x08
    35b6:	df 80       	ldd	r13, Y+7	; 0x07
    35b8:	ee 80       	ldd	r14, Y+6	; 0x06
    35ba:	fd 80       	ldd	r15, Y+5	; 0x05
    35bc:	0c 81       	ldd	r16, Y+4	; 0x04
    35be:	1b 81       	ldd	r17, Y+3	; 0x03
    35c0:	aa 81       	ldd	r26, Y+2	; 0x02
    35c2:	b9 81       	ldd	r27, Y+1	; 0x01
    35c4:	ce 0f       	add	r28, r30
    35c6:	d1 1d       	adc	r29, r1
    35c8:	0f b6       	in	r0, 0x3f	; 63
    35ca:	f8 94       	cli
    35cc:	de bf       	out	0x3e, r29	; 62
    35ce:	0f be       	out	0x3f, r0	; 63
    35d0:	cd bf       	out	0x3d, r28	; 61
    35d2:	ed 01       	movw	r28, r26
    35d4:	08 95       	ret

000035d6 <_exit>:
    35d6:	f8 94       	cli

000035d8 <__stop_program>:
    35d8:	ff cf       	rjmp	.-2      	; 0x35d8 <__stop_program>
